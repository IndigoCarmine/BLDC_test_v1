
BLDC_test_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052e0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080054b8  080054b8  000154b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054f8  080054f8  000202dc  2**0
                  CONTENTS
  4 .ARM          00000008  080054f8  080054f8  000154f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005500  08005500  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005500  08005500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005504  08005504  00015504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  08005508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  200002dc  080057e4  000202dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  080057e4  000206b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013343  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250a  00000000  00000000  0003364f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00035b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  00036bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8c3  00000000  00000000  00037bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012eb8  00000000  00000000  0005547b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c24d0  00000000  00000000  00068333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a803  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000465c  00000000  00000000  0012a854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002dc 	.word	0x200002dc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080054a0 	.word	0x080054a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002e0 	.word	0x200002e0
 8000214:	080054a0 	.word	0x080054a0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <set_prescalar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//htim1
void set_prescalar(int freq){
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	//170MHz

	__HAL_TIM_SET_PRESCALER(&htim1, 1000000/180*16/freq);
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <set_prescalar+0x24>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	fb92 f2f3 	sdiv	r2, r2, r3
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <set_prescalar+0x28>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	00015b30 	.word	0x00015b30
 8000544:	200002f8 	.word	0x200002f8

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fe9e 	bl	800128e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f82d 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 fb0f 	bl	8000b78 <MX_GPIO_Init>
  MX_DMA_Init();
 800055a:	f000 fab3 	bl	8000ac4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800055e:	f000 fa65 	bl	8000a2c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000562:	f000 f865 	bl	8000630 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000566:	f000 f91f 	bl	80007a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800056a:	f000 f9bb 	bl	80008e4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_1,(uint32_t*)pwmlist1, sizeof (pwmlist1) / sizeof (uint16_t));
 800056e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000572:	4a0d      	ldr	r2, [pc, #52]	; (80005a8 <main+0x60>)
 8000574:	2100      	movs	r1, #0
 8000576:	480d      	ldr	r0, [pc, #52]	; (80005ac <main+0x64>)
 8000578:	f002 fd6c 	bl	8003054 <HAL_TIM_PWM_Start_DMA>
  htim1.State = HAL_TIM_STATE_READY;
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <main+0x64>)
 800057e:	2201      	movs	r2, #1
 8000580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i = 4; i<2000;i++){
 8000584:	2304      	movs	r3, #4
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	e008      	b.n	800059c <main+0x54>
		  set_prescalar(i);
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f7ff ffc6 	bl	800051c <set_prescalar>
		  HAL_Delay(100);
 8000590:	2064      	movs	r0, #100	; 0x64
 8000592:	f000 feed 	bl	8001370 <HAL_Delay>
	  for(int i = 4; i<2000;i++){
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3301      	adds	r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80005a2:	dbf2      	blt.n	800058a <main+0x42>
 80005a4:	e7ee      	b.n	8000584 <main+0x3c>
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000
 80005ac:	200002f8 	.word	0x200002f8

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	; 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0318 	add.w	r3, r7, #24
 80005ba:	2238      	movs	r2, #56	; 0x38
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 ff66 	bl	8005490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d6:	f001 fc5b 	bl	8001e90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005da:	2302      	movs	r3, #2
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2340      	movs	r3, #64	; 0x40
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0318 	add.w	r3, r7, #24
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fcf1 	bl	8001fd8 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005fc:	f000 fafc 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000604:	2301      	movs	r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fff5 	bl	8002608 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000624:	f000 fae8 	bl	8000bf8 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3750      	adds	r7, #80	; 0x50
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b09c      	sub	sp, #112	; 0x70
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000636:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000644:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000650:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
 8000660:	615a      	str	r2, [r3, #20]
 8000662:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2234      	movs	r2, #52	; 0x34
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f004 ff10 	bl	8005490 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000670:	4b4b      	ldr	r3, [pc, #300]	; (80007a0 <MX_TIM1_Init+0x170>)
 8000672:	4a4c      	ldr	r2, [pc, #304]	; (80007a4 <MX_TIM1_Init+0x174>)
 8000674:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 8000676:	4b4a      	ldr	r3, [pc, #296]	; (80007a0 <MX_TIM1_Init+0x170>)
 8000678:	220a      	movs	r2, #10
 800067a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067c:	4b48      	ldr	r3, [pc, #288]	; (80007a0 <MX_TIM1_Init+0x170>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000682:	4b47      	ldr	r3, [pc, #284]	; (80007a0 <MX_TIM1_Init+0x170>)
 8000684:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000688:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068a:	4b45      	ldr	r3, [pc, #276]	; (80007a0 <MX_TIM1_Init+0x170>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000690:	4b43      	ldr	r3, [pc, #268]	; (80007a0 <MX_TIM1_Init+0x170>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000696:	4b42      	ldr	r3, [pc, #264]	; (80007a0 <MX_TIM1_Init+0x170>)
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800069c:	4840      	ldr	r0, [pc, #256]	; (80007a0 <MX_TIM1_Init+0x170>)
 800069e:	f002 fbbf 	bl	8002e20 <HAL_TIM_Base_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80006a8:	f000 faa6 	bl	8000bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006b6:	4619      	mov	r1, r3
 80006b8:	4839      	ldr	r0, [pc, #228]	; (80007a0 <MX_TIM1_Init+0x170>)
 80006ba:	f003 f871 	bl	80037a0 <HAL_TIM_ConfigClockSource>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80006c4:	f000 fa98 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006c8:	4835      	ldr	r0, [pc, #212]	; (80007a0 <MX_TIM1_Init+0x170>)
 80006ca:	f002 fc61 	bl	8002f90 <HAL_TIM_PWM_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80006d4:	f000 fa90 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d8:	2300      	movs	r3, #0
 80006da:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006e8:	4619      	mov	r1, r3
 80006ea:	482d      	ldr	r0, [pc, #180]	; (80007a0 <MX_TIM1_Init+0x170>)
 80006ec:	f003 ff90 	bl	8004610 <HAL_TIMEx_MasterConfigSynchronization>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80006f6:	f000 fa7f 	bl	8000bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006fa:	2360      	movs	r3, #96	; 0x60
 80006fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000702:	2300      	movs	r3, #0
 8000704:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000706:	2300      	movs	r3, #0
 8000708:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800070e:	2300      	movs	r3, #0
 8000710:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000712:	2300      	movs	r3, #0
 8000714:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000716:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800071a:	2200      	movs	r2, #0
 800071c:	4619      	mov	r1, r3
 800071e:	4820      	ldr	r0, [pc, #128]	; (80007a0 <MX_TIM1_Init+0x170>)
 8000720:	f002 ff2a 	bl	8003578 <HAL_TIM_PWM_ConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800072a:	f000 fa65 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800072e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000732:	2204      	movs	r2, #4
 8000734:	4619      	mov	r1, r3
 8000736:	481a      	ldr	r0, [pc, #104]	; (80007a0 <MX_TIM1_Init+0x170>)
 8000738:	f002 ff1e 	bl	8003578 <HAL_TIM_PWM_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000742:	f000 fa59 	bl	8000bf8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800075a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800076c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000776:	2300      	movs	r3, #0
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	4619      	mov	r1, r3
 8000782:	4807      	ldr	r0, [pc, #28]	; (80007a0 <MX_TIM1_Init+0x170>)
 8000784:	f003 ffc6 	bl	8004714 <HAL_TIMEx_ConfigBreakDeadTime>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800078e:	f000 fa33 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000792:	4803      	ldr	r0, [pc, #12]	; (80007a0 <MX_TIM1_Init+0x170>)
 8000794:	f000 fbe0 	bl	8000f58 <HAL_TIM_MspPostInit>

}
 8000798:	bf00      	nop
 800079a:	3770      	adds	r7, #112	; 0x70
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200002f8 	.word	0x200002f8
 80007a4:	40012c00 	.word	0x40012c00

080007a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	; 0x50
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
 80007e6:	615a      	str	r2, [r3, #20]
 80007e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ea:	4b3d      	ldr	r3, [pc, #244]	; (80008e0 <MX_TIM2_Init+0x138>)
 80007ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007f2:	4b3b      	ldr	r3, [pc, #236]	; (80008e0 <MX_TIM2_Init+0x138>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80007f8:	4b39      	ldr	r3, [pc, #228]	; (80008e0 <MX_TIM2_Init+0x138>)
 80007fa:	2220      	movs	r2, #32
 80007fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80007fe:	4b38      	ldr	r3, [pc, #224]	; (80008e0 <MX_TIM2_Init+0x138>)
 8000800:	f04f 32ff 	mov.w	r2, #4294967295
 8000804:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b36      	ldr	r3, [pc, #216]	; (80008e0 <MX_TIM2_Init+0x138>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <MX_TIM2_Init+0x138>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000812:	4833      	ldr	r0, [pc, #204]	; (80008e0 <MX_TIM2_Init+0x138>)
 8000814:	f002 fb04 	bl	8002e20 <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800081e:	f000 f9eb 	bl	8000bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000828:	2300      	movs	r3, #0
 800082a:	647b      	str	r3, [r7, #68]	; 0x44
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  sClockSourceConfig.ClockFilter = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000834:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000838:	4619      	mov	r1, r3
 800083a:	4829      	ldr	r0, [pc, #164]	; (80008e0 <MX_TIM2_Init+0x138>)
 800083c:	f002 ffb0 	bl	80037a0 <HAL_TIM_ConfigClockSource>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000846:	f000 f9d7 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800084a:	4825      	ldr	r0, [pc, #148]	; (80008e0 <MX_TIM2_Init+0x138>)
 800084c:	f002 fb3f 	bl	8002ece <HAL_TIM_OC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000856:	f000 f9cf 	bl	8000bf8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800085e:	2300      	movs	r3, #0
 8000860:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000866:	4619      	mov	r1, r3
 8000868:	481d      	ldr	r0, [pc, #116]	; (80008e0 <MX_TIM2_Init+0x138>)
 800086a:	f003 f893 	bl	8003994 <HAL_TIM_SlaveConfigSynchro>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8000874:	f000 f9c0 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4619      	mov	r1, r3
 8000886:	4816      	ldr	r0, [pc, #88]	; (80008e0 <MX_TIM2_Init+0x138>)
 8000888:	f003 fec2 	bl	8004610 <HAL_TIMEx_MasterConfigSynchronization>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000892:	f000 f9b1 	bl	8000bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	4619      	mov	r1, r3
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MX_TIM2_Init+0x138>)
 80008ae:	f002 fde9 	bl	8003484 <HAL_TIM_OC_ConfigChannel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 80008b8:	f000 f99e 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2204      	movs	r2, #4
 80008c0:	4619      	mov	r1, r3
 80008c2:	4807      	ldr	r0, [pc, #28]	; (80008e0 <MX_TIM2_Init+0x138>)
 80008c4:	f002 fdde 	bl	8003484 <HAL_TIM_OC_ConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM2_Init+0x12a>
  {
    Error_Handler();
 80008ce:	f000 f993 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008d2:	4803      	ldr	r0, [pc, #12]	; (80008e0 <MX_TIM2_Init+0x138>)
 80008d4:	f000 fb40 	bl	8000f58 <HAL_TIM_MspPostInit>

}
 80008d8:	bf00      	nop
 80008da:	3750      	adds	r7, #80	; 0x50
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000344 	.word	0x20000344

080008e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b094      	sub	sp, #80	; 0x50
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
 8000922:	615a      	str	r2, [r3, #20]
 8000924:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000926:	4b3f      	ldr	r3, [pc, #252]	; (8000a24 <MX_TIM3_Init+0x140>)
 8000928:	4a3f      	ldr	r2, [pc, #252]	; (8000a28 <MX_TIM3_Init+0x144>)
 800092a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800092c:	4b3d      	ldr	r3, [pc, #244]	; (8000a24 <MX_TIM3_Init+0x140>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000932:	4b3c      	ldr	r3, [pc, #240]	; (8000a24 <MX_TIM3_Init+0x140>)
 8000934:	2220      	movs	r2, #32
 8000936:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000938:	4b3a      	ldr	r3, [pc, #232]	; (8000a24 <MX_TIM3_Init+0x140>)
 800093a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800093e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000940:	4b38      	ldr	r3, [pc, #224]	; (8000a24 <MX_TIM3_Init+0x140>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	4b37      	ldr	r3, [pc, #220]	; (8000a24 <MX_TIM3_Init+0x140>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800094c:	4835      	ldr	r0, [pc, #212]	; (8000a24 <MX_TIM3_Init+0x140>)
 800094e:	f002 fa67 	bl	8002e20 <HAL_TIM_Base_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000958:	f000 f94e 	bl	8000bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800095c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000960:	643b      	str	r3, [r7, #64]	; 0x40
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000962:	2300      	movs	r3, #0
 8000964:	647b      	str	r3, [r7, #68]	; 0x44
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	64bb      	str	r3, [r7, #72]	; 0x48
  sClockSourceConfig.ClockFilter = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800096e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000972:	4619      	mov	r1, r3
 8000974:	482b      	ldr	r0, [pc, #172]	; (8000a24 <MX_TIM3_Init+0x140>)
 8000976:	f002 ff13 	bl	80037a0 <HAL_TIM_ConfigClockSource>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000980:	f000 f93a 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000984:	4827      	ldr	r0, [pc, #156]	; (8000a24 <MX_TIM3_Init+0x140>)
 8000986:	f002 fb03 	bl	8002f90 <HAL_TIM_PWM_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000990:	f000 f932 	bl	8000bf8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000998:	2300      	movs	r3, #0
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800099c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a0:	4619      	mov	r1, r3
 80009a2:	4820      	ldr	r0, [pc, #128]	; (8000a24 <MX_TIM3_Init+0x140>)
 80009a4:	f002 fff6 	bl	8003994 <HAL_TIM_SlaveConfigSynchro>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 80009ae:	f000 f923 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009ba:	f107 0320 	add.w	r3, r7, #32
 80009be:	4619      	mov	r1, r3
 80009c0:	4818      	ldr	r0, [pc, #96]	; (8000a24 <MX_TIM3_Init+0x140>)
 80009c2:	f003 fe25 	bl	8004610 <HAL_TIMEx_MasterConfigSynchronization>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80009cc:	f000 f914 	bl	8000bf8 <Error_Handler>
  }
  HAL_TIMEx_RemapConfig(&htim3, TIM_TIM3_ETR_COMP1);
 80009d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d4:	4813      	ldr	r0, [pc, #76]	; (8000a24 <MX_TIM3_Init+0x140>)
 80009d6:	f003 ff3d 	bl	8004854 <HAL_TIMEx_RemapConfig>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009da:	2360      	movs	r3, #96	; 0x60
 80009dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	4619      	mov	r1, r3
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <MX_TIM3_Init+0x140>)
 80009f2:	f002 fdc1 	bl	8003578 <HAL_TIM_PWM_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 80009fc:	f000 f8fc 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2204      	movs	r2, #4
 8000a04:	4619      	mov	r1, r3
 8000a06:	4807      	ldr	r0, [pc, #28]	; (8000a24 <MX_TIM3_Init+0x140>)
 8000a08:	f002 fdb6 	bl	8003578 <HAL_TIM_PWM_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM3_Init+0x132>
  {
    Error_Handler();
 8000a12:	f000 f8f1 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a16:	4803      	ldr	r0, [pc, #12]	; (8000a24 <MX_TIM3_Init+0x140>)
 8000a18:	f000 fa9e 	bl	8000f58 <HAL_TIM_MspPostInit>

}
 8000a1c:	bf00      	nop
 8000a1e:	3750      	adds	r7, #80	; 0x50
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000390 	.word	0x20000390
 8000a28:	40000400 	.word	0x40000400

08000a2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <MX_USART2_UART_Init+0x90>)
 8000a32:	4a23      	ldr	r2, [pc, #140]	; (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_USART2_UART_Init+0x90>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_USART2_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_USART2_UART_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_USART2_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_USART2_UART_Init+0x90>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_USART2_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_USART2_UART_Init+0x90>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_USART2_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_USART2_UART_Init+0x90>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_USART2_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a74:	4811      	ldr	r0, [pc, #68]	; (8000abc <MX_USART2_UART_Init+0x90>)
 8000a76:	f003 ff12 	bl	800489e <HAL_UART_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a80:	f000 f8ba 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a84:	2100      	movs	r1, #0
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_USART2_UART_Init+0x90>)
 8000a88:	f004 fc14 	bl	80052b4 <HAL_UARTEx_SetTxFifoThreshold>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a92:	f000 f8b1 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a96:	2100      	movs	r1, #0
 8000a98:	4808      	ldr	r0, [pc, #32]	; (8000abc <MX_USART2_UART_Init+0x90>)
 8000a9a:	f004 fc49 	bl	8005330 <HAL_UARTEx_SetRxFifoThreshold>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa4:	f000 f8a8 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_USART2_UART_Init+0x90>)
 8000aaa:	f004 fbca 	bl	8005242 <HAL_UARTEx_DisableFifoMode>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab4:	f000 f8a0 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	2000061c 	.word	0x2000061c
 8000ac0:	40004400 	.word	0x40004400

08000ac4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000aca:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <MX_DMA_Init+0xb0>)
 8000acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ace:	4a29      	ldr	r2, [pc, #164]	; (8000b74 <MX_DMA_Init+0xb0>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ad6:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <MX_DMA_Init+0xb0>)
 8000ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ae2:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <MX_DMA_Init+0xb0>)
 8000ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ae6:	4a23      	ldr	r2, [pc, #140]	; (8000b74 <MX_DMA_Init+0xb0>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6493      	str	r3, [r2, #72]	; 0x48
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <MX_DMA_Init+0xb0>)
 8000af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	200b      	movs	r0, #11
 8000b00:	f000 fd33 	bl	800156a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b04:	200b      	movs	r0, #11
 8000b06:	f000 fd4a 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	200c      	movs	r0, #12
 8000b10:	f000 fd2b 	bl	800156a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b14:	200c      	movs	r0, #12
 8000b16:	f000 fd42 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	200d      	movs	r0, #13
 8000b20:	f000 fd23 	bl	800156a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b24:	200d      	movs	r0, #13
 8000b26:	f000 fd3a 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	200e      	movs	r0, #14
 8000b30:	f000 fd1b 	bl	800156a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000b34:	200e      	movs	r0, #14
 8000b36:	f000 fd32 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	200f      	movs	r0, #15
 8000b40:	f000 fd13 	bl	800156a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000b44:	200f      	movs	r0, #15
 8000b46:	f000 fd2a 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2010      	movs	r0, #16
 8000b50:	f000 fd0b 	bl	800156a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000b54:	2010      	movs	r0, #16
 8000b56:	f000 fd22 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	205e      	movs	r0, #94	; 0x5e
 8000b60:	f000 fd03 	bl	800156a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8000b64:	205e      	movs	r0, #94	; 0x5e
 8000b66:	f000 fd1a 	bl	800159e <HAL_NVIC_EnableIRQ>

}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_GPIO_Init+0x78>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <MX_GPIO_Init+0x78>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_GPIO_Init+0x78>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_GPIO_Init+0x78>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <MX_GPIO_Init+0x78>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_GPIO_Init+0x78>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <MX_GPIO_Init+0x7c>)
 8000bc6:	f001 f94b 	bl	8001e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	4619      	mov	r1, r3
 8000be2:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_GPIO_Init+0x7c>)
 8000be4:	f000 ffba 	bl	8001b5c <HAL_GPIO_Init>

}
 8000be8:	bf00      	nop
 8000bea:	3720      	adds	r7, #32
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	48000400 	.word	0x48000400

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_MspInit+0x44>)
 8000c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_MspInit+0x44>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6613      	str	r3, [r2, #96]	; 0x60
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_MspInit+0x44>)
 8000c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_MspInit+0x44>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c26:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <HAL_MspInit+0x44>)
 8000c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_MspInit+0x44>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	; 0x30
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a75      	ldr	r2, [pc, #468]	; (8000e40 <HAL_TIM_Base_MspInit+0x1f4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d162      	bne.n	8000d34 <HAL_TIM_Base_MspInit+0xe8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c6e:	4b75      	ldr	r3, [pc, #468]	; (8000e44 <HAL_TIM_Base_MspInit+0x1f8>)
 8000c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c72:	4a74      	ldr	r2, [pc, #464]	; (8000e44 <HAL_TIM_Base_MspInit+0x1f8>)
 8000c74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c78:	6613      	str	r3, [r2, #96]	; 0x60
 8000c7a:	4b72      	ldr	r3, [pc, #456]	; (8000e44 <HAL_TIM_Base_MspInit+0x1f8>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8000c86:	4b70      	ldr	r3, [pc, #448]	; (8000e48 <HAL_TIM_Base_MspInit+0x1fc>)
 8000c88:	4a70      	ldr	r2, [pc, #448]	; (8000e4c <HAL_TIM_Base_MspInit+0x200>)
 8000c8a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8000c8c:	4b6e      	ldr	r3, [pc, #440]	; (8000e48 <HAL_TIM_Base_MspInit+0x1fc>)
 8000c8e:	222a      	movs	r2, #42	; 0x2a
 8000c90:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c92:	4b6d      	ldr	r3, [pc, #436]	; (8000e48 <HAL_TIM_Base_MspInit+0x1fc>)
 8000c94:	2210      	movs	r2, #16
 8000c96:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c98:	4b6b      	ldr	r3, [pc, #428]	; (8000e48 <HAL_TIM_Base_MspInit+0x1fc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c9e:	4b6a      	ldr	r3, [pc, #424]	; (8000e48 <HAL_TIM_Base_MspInit+0x1fc>)
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ca4:	4b68      	ldr	r3, [pc, #416]	; (8000e48 <HAL_TIM_Base_MspInit+0x1fc>)
 8000ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000caa:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cac:	4b66      	ldr	r3, [pc, #408]	; (8000e48 <HAL_TIM_Base_MspInit+0x1fc>)
 8000cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000cb4:	4b64      	ldr	r3, [pc, #400]	; (8000e48 <HAL_TIM_Base_MspInit+0x1fc>)
 8000cb6:	2220      	movs	r2, #32
 8000cb8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000cba:	4b63      	ldr	r3, [pc, #396]	; (8000e48 <HAL_TIM_Base_MspInit+0x1fc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000cc0:	4861      	ldr	r0, [pc, #388]	; (8000e48 <HAL_TIM_Base_MspInit+0x1fc>)
 8000cc2:	f000 fc87 	bl	80015d4 <HAL_DMA_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8000ccc:	f7ff ff94 	bl	8000bf8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a5d      	ldr	r2, [pc, #372]	; (8000e48 <HAL_TIM_Base_MspInit+0x1fc>)
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
 8000cd6:	4a5c      	ldr	r2, [pc, #368]	; (8000e48 <HAL_TIM_Base_MspInit+0x1fc>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel2;
 8000cdc:	4b5c      	ldr	r3, [pc, #368]	; (8000e50 <HAL_TIM_Base_MspInit+0x204>)
 8000cde:	4a5d      	ldr	r2, [pc, #372]	; (8000e54 <HAL_TIM_Base_MspInit+0x208>)
 8000ce0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 8000ce2:	4b5b      	ldr	r3, [pc, #364]	; (8000e50 <HAL_TIM_Base_MspInit+0x204>)
 8000ce4:	222b      	movs	r2, #43	; 0x2b
 8000ce6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ce8:	4b59      	ldr	r3, [pc, #356]	; (8000e50 <HAL_TIM_Base_MspInit+0x204>)
 8000cea:	2210      	movs	r2, #16
 8000cec:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cee:	4b58      	ldr	r3, [pc, #352]	; (8000e50 <HAL_TIM_Base_MspInit+0x204>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000cf4:	4b56      	ldr	r3, [pc, #344]	; (8000e50 <HAL_TIM_Base_MspInit+0x204>)
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cfa:	4b55      	ldr	r3, [pc, #340]	; (8000e50 <HAL_TIM_Base_MspInit+0x204>)
 8000cfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d00:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d02:	4b53      	ldr	r3, [pc, #332]	; (8000e50 <HAL_TIM_Base_MspInit+0x204>)
 8000d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d08:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8000d0a:	4b51      	ldr	r3, [pc, #324]	; (8000e50 <HAL_TIM_Base_MspInit+0x204>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000d10:	4b4f      	ldr	r3, [pc, #316]	; (8000e50 <HAL_TIM_Base_MspInit+0x204>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8000d16:	484e      	ldr	r0, [pc, #312]	; (8000e50 <HAL_TIM_Base_MspInit+0x204>)
 8000d18:	f000 fc5c 	bl	80015d4 <HAL_DMA_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_TIM_Base_MspInit+0xda>
    {
      Error_Handler();
 8000d22:	f7ff ff69 	bl	8000bf8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a49      	ldr	r2, [pc, #292]	; (8000e50 <HAL_TIM_Base_MspInit+0x204>)
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
 8000d2c:	4a48      	ldr	r2, [pc, #288]	; (8000e50 <HAL_TIM_Base_MspInit+0x204>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d32:	e100      	b.n	8000f36 <HAL_TIM_Base_MspInit+0x2ea>
  else if(htim_base->Instance==TIM2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d3c:	f040 8094 	bne.w	8000e68 <HAL_TIM_Base_MspInit+0x21c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d40:	4b40      	ldr	r3, [pc, #256]	; (8000e44 <HAL_TIM_Base_MspInit+0x1f8>)
 8000d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d44:	4a3f      	ldr	r2, [pc, #252]	; (8000e44 <HAL_TIM_Base_MspInit+0x1f8>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d4c:	4b3d      	ldr	r3, [pc, #244]	; (8000e44 <HAL_TIM_Base_MspInit+0x1f8>)
 8000d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b3a      	ldr	r3, [pc, #232]	; (8000e44 <HAL_TIM_Base_MspInit+0x1f8>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5c:	4a39      	ldr	r2, [pc, #228]	; (8000e44 <HAL_TIM_Base_MspInit+0x1f8>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d64:	4b37      	ldr	r3, [pc, #220]	; (8000e44 <HAL_TIM_Base_MspInit+0x1f8>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d70:	2320      	movs	r3, #32
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8e:	f000 fee5 	bl	8001b5c <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Channel3;
 8000d92:	4b31      	ldr	r3, [pc, #196]	; (8000e58 <HAL_TIM_Base_MspInit+0x20c>)
 8000d94:	4a31      	ldr	r2, [pc, #196]	; (8000e5c <HAL_TIM_Base_MspInit+0x210>)
 8000d96:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8000d98:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <HAL_TIM_Base_MspInit+0x20c>)
 8000d9a:	2238      	movs	r2, #56	; 0x38
 8000d9c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d9e:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <HAL_TIM_Base_MspInit+0x20c>)
 8000da0:	2210      	movs	r2, #16
 8000da2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <HAL_TIM_Base_MspInit+0x20c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000daa:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <HAL_TIM_Base_MspInit+0x20c>)
 8000dac:	2280      	movs	r2, #128	; 0x80
 8000dae:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000db0:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <HAL_TIM_Base_MspInit+0x20c>)
 8000db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <HAL_TIM_Base_MspInit+0x20c>)
 8000dba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dbe:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <HAL_TIM_Base_MspInit+0x20c>)
 8000dc2:	2220      	movs	r2, #32
 8000dc4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <HAL_TIM_Base_MspInit+0x20c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000dcc:	4822      	ldr	r0, [pc, #136]	; (8000e58 <HAL_TIM_Base_MspInit+0x20c>)
 8000dce:	f000 fc01 	bl	80015d4 <HAL_DMA_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <HAL_TIM_Base_MspInit+0x190>
      Error_Handler();
 8000dd8:	f7ff ff0e 	bl	8000bf8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a1e      	ldr	r2, [pc, #120]	; (8000e58 <HAL_TIM_Base_MspInit+0x20c>)
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24
 8000de2:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <HAL_TIM_Base_MspInit+0x20c>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim2_ch2.Instance = DMA1_Channel4;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <HAL_TIM_Base_MspInit+0x214>)
 8000dea:	4a1e      	ldr	r2, [pc, #120]	; (8000e64 <HAL_TIM_Base_MspInit+0x218>)
 8000dec:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <HAL_TIM_Base_MspInit+0x214>)
 8000df0:	2239      	movs	r2, #57	; 0x39
 8000df2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <HAL_TIM_Base_MspInit+0x214>)
 8000df6:	2210      	movs	r2, #16
 8000df8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_TIM_Base_MspInit+0x214>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_TIM_Base_MspInit+0x214>)
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_TIM_Base_MspInit+0x214>)
 8000e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_TIM_Base_MspInit+0x214>)
 8000e10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e14:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_CIRCULAR;
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_TIM_Base_MspInit+0x214>)
 8000e18:	2220      	movs	r2, #32
 8000e1a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_TIM_Base_MspInit+0x214>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8000e22:	480f      	ldr	r0, [pc, #60]	; (8000e60 <HAL_TIM_Base_MspInit+0x214>)
 8000e24:	f000 fbd6 	bl	80015d4 <HAL_DMA_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_TIM_Base_MspInit+0x1e6>
      Error_Handler();
 8000e2e:	f7ff fee3 	bl	8000bf8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_TIM_Base_MspInit+0x214>)
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
 8000e38:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <HAL_TIM_Base_MspInit+0x214>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000e3e:	e07a      	b.n	8000f36 <HAL_TIM_Base_MspInit+0x2ea>
 8000e40:	40012c00 	.word	0x40012c00
 8000e44:	40021000 	.word	0x40021000
 8000e48:	200003dc 	.word	0x200003dc
 8000e4c:	40020008 	.word	0x40020008
 8000e50:	2000043c 	.word	0x2000043c
 8000e54:	4002001c 	.word	0x4002001c
 8000e58:	2000049c 	.word	0x2000049c
 8000e5c:	40020030 	.word	0x40020030
 8000e60:	200004fc 	.word	0x200004fc
 8000e64:	40020044 	.word	0x40020044
  else if(htim_base->Instance==TIM3)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a34      	ldr	r2, [pc, #208]	; (8000f40 <HAL_TIM_Base_MspInit+0x2f4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d161      	bne.n	8000f36 <HAL_TIM_Base_MspInit+0x2ea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e72:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <HAL_TIM_Base_MspInit+0x2f8>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	4a33      	ldr	r2, [pc, #204]	; (8000f44 <HAL_TIM_Base_MspInit+0x2f8>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e7e:	4b31      	ldr	r3, [pc, #196]	; (8000f44 <HAL_TIM_Base_MspInit+0x2f8>)
 8000e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch1.Instance = DMA1_Channel5;
 8000e8a:	4b2f      	ldr	r3, [pc, #188]	; (8000f48 <HAL_TIM_Base_MspInit+0x2fc>)
 8000e8c:	4a2f      	ldr	r2, [pc, #188]	; (8000f4c <HAL_TIM_Base_MspInit+0x300>)
 8000e8e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8000e90:	4b2d      	ldr	r3, [pc, #180]	; (8000f48 <HAL_TIM_Base_MspInit+0x2fc>)
 8000e92:	223d      	movs	r2, #61	; 0x3d
 8000e94:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e96:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <HAL_TIM_Base_MspInit+0x2fc>)
 8000e98:	2210      	movs	r2, #16
 8000e9a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9c:	4b2a      	ldr	r3, [pc, #168]	; (8000f48 <HAL_TIM_Base_MspInit+0x2fc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ea2:	4b29      	ldr	r3, [pc, #164]	; (8000f48 <HAL_TIM_Base_MspInit+0x2fc>)
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ea8:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <HAL_TIM_Base_MspInit+0x2fc>)
 8000eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eae:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eb0:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <HAL_TIM_Base_MspInit+0x2fc>)
 8000eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 8000eb8:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <HAL_TIM_Base_MspInit+0x2fc>)
 8000eba:	2220      	movs	r2, #32
 8000ebc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <HAL_TIM_Base_MspInit+0x2fc>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8000ec4:	4820      	ldr	r0, [pc, #128]	; (8000f48 <HAL_TIM_Base_MspInit+0x2fc>)
 8000ec6:	f000 fb85 	bl	80015d4 <HAL_DMA_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_TIM_Base_MspInit+0x288>
      Error_Handler();
 8000ed0:	f7ff fe92 	bl	8000bf8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	; (8000f48 <HAL_TIM_Base_MspInit+0x2fc>)
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24
 8000eda:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <HAL_TIM_Base_MspInit+0x2fc>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim3_ch2.Instance = DMA1_Channel6;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <HAL_TIM_Base_MspInit+0x304>)
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <HAL_TIM_Base_MspInit+0x308>)
 8000ee4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <HAL_TIM_Base_MspInit+0x304>)
 8000ee8:	223e      	movs	r2, #62	; 0x3e
 8000eea:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <HAL_TIM_Base_MspInit+0x304>)
 8000eee:	2210      	movs	r2, #16
 8000ef0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <HAL_TIM_Base_MspInit+0x304>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_TIM_Base_MspInit+0x304>)
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <HAL_TIM_Base_MspInit+0x304>)
 8000f00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f04:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_TIM_Base_MspInit+0x304>)
 8000f08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f0c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <HAL_TIM_Base_MspInit+0x304>)
 8000f10:	2220      	movs	r2, #32
 8000f12:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_TIM_Base_MspInit+0x304>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <HAL_TIM_Base_MspInit+0x304>)
 8000f1c:	f000 fb5a 	bl	80015d4 <HAL_DMA_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_TIM_Base_MspInit+0x2de>
      Error_Handler();
 8000f26:	f7ff fe67 	bl	8000bf8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <HAL_TIM_Base_MspInit+0x304>)
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
 8000f30:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <HAL_TIM_Base_MspInit+0x304>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000f36:	bf00      	nop
 8000f38:	3730      	adds	r7, #48	; 0x30
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40000400 	.word	0x40000400
 8000f44:	40021000 	.word	0x40021000
 8000f48:	2000055c 	.word	0x2000055c
 8000f4c:	40020058 	.word	0x40020058
 8000f50:	200005bc 	.word	0x200005bc
 8000f54:	4002006c 	.word	0x4002006c

08000f58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a35      	ldr	r2, [pc, #212]	; (800104c <HAL_TIM_MspPostInit+0xf4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d11e      	bne.n	8000fb8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b35      	ldr	r3, [pc, #212]	; (8001050 <HAL_TIM_MspPostInit+0xf8>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a34      	ldr	r2, [pc, #208]	; (8001050 <HAL_TIM_MspPostInit+0xf8>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b32      	ldr	r3, [pc, #200]	; (8001050 <HAL_TIM_MspPostInit+0xf8>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fa4:	2306      	movs	r3, #6
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb2:	f000 fdd3 	bl	8001b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fb6:	e044      	b.n	8001042 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM2)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc0:	d11d      	bne.n	8000ffe <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <HAL_TIM_MspPostInit+0xf8>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a22      	ldr	r2, [pc, #136]	; (8001050 <HAL_TIM_MspPostInit+0xf8>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <HAL_TIM_MspPostInit+0xf8>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fea:	2301      	movs	r3, #1
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff8:	f000 fdb0 	bl	8001b5c <HAL_GPIO_Init>
}
 8000ffc:	e021      	b.n	8001042 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM3)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a14      	ldr	r2, [pc, #80]	; (8001054 <HAL_TIM_MspPostInit+0xfc>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d11c      	bne.n	8001042 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_TIM_MspPostInit+0xf8>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a10      	ldr	r2, [pc, #64]	; (8001050 <HAL_TIM_MspPostInit+0xf8>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_TIM_MspPostInit+0xf8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001020:	2350      	movs	r3, #80	; 0x50
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001030:	2302      	movs	r3, #2
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103e:	f000 fd8d 	bl	8001b5c <HAL_GPIO_Init>
}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	; 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40012c00 	.word	0x40012c00
 8001050:	40021000 	.word	0x40021000
 8001054:	40000400 	.word	0x40000400

08001058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09a      	sub	sp, #104	; 0x68
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	2244      	movs	r2, #68	; 0x44
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f004 fa09 	bl	8005490 <memset>
  if(huart->Instance==USART2)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1f      	ldr	r2, [pc, #124]	; (8001100 <HAL_UART_MspInit+0xa8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d136      	bne.n	80010f6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001088:	2302      	movs	r3, #2
 800108a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	4618      	mov	r0, r3
 8001096:	f001 fcd3 	bl	8002a40 <HAL_RCCEx_PeriphCLKConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010a0:	f7ff fdaa 	bl	8000bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_UART_MspInit+0xac>)
 80010a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a8:	4a16      	ldr	r2, [pc, #88]	; (8001104 <HAL_UART_MspInit+0xac>)
 80010aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ae:	6593      	str	r3, [r2, #88]	; 0x58
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_UART_MspInit+0xac>)
 80010b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_UART_MspInit+0xac>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	4a10      	ldr	r2, [pc, #64]	; (8001104 <HAL_UART_MspInit+0xac>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_UART_MspInit+0xac>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80010d4:	230c      	movs	r3, #12
 80010d6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010e4:	2307      	movs	r3, #7
 80010e6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ec:	4619      	mov	r1, r3
 80010ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f2:	f000 fd33 	bl	8001b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3768      	adds	r7, #104	; 0x68
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40004400 	.word	0x40004400
 8001104:	40021000 	.word	0x40021000

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800110c:	e7fe      	b.n	800110c <NMI_Handler+0x4>

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001154:	f000 f8ee 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <DMA1_Channel1_IRQHandler+0x10>)
 8001162:	f000 fb5a 	bl	800181a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200003dc 	.word	0x200003dc

08001170 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <DMA1_Channel2_IRQHandler+0x10>)
 8001176:	f000 fb50 	bl	800181a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000043c 	.word	0x2000043c

08001184 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <DMA1_Channel3_IRQHandler+0x10>)
 800118a:	f000 fb46 	bl	800181a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000049c 	.word	0x2000049c

08001198 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <DMA1_Channel4_IRQHandler+0x10>)
 800119e:	f000 fb3c 	bl	800181a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200004fc 	.word	0x200004fc

080011ac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <DMA1_Channel5_IRQHandler+0x10>)
 80011b2:	f000 fb32 	bl	800181a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000055c 	.word	0x2000055c

080011c0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <DMA1_Channel6_IRQHandler+0x10>)
 80011c6:	f000 fb28 	bl	800181a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200005bc 	.word	0x200005bc

080011d4 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_tim1_ch1);
 80011d8:	4809      	ldr	r0, [pc, #36]	; (8001200 <DMAMUX_OVR_IRQHandler+0x2c>)
 80011da:	f000 fc6d 	bl	8001ab8 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_tim1_ch2);
 80011de:	4809      	ldr	r0, [pc, #36]	; (8001204 <DMAMUX_OVR_IRQHandler+0x30>)
 80011e0:	f000 fc6a 	bl	8001ab8 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel3
  HAL_DMAEx_MUX_IRQHandler(&hdma_tim2_ch1);
 80011e4:	4808      	ldr	r0, [pc, #32]	; (8001208 <DMAMUX_OVR_IRQHandler+0x34>)
 80011e6:	f000 fc67 	bl	8001ab8 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel4
  HAL_DMAEx_MUX_IRQHandler(&hdma_tim2_ch2);
 80011ea:	4808      	ldr	r0, [pc, #32]	; (800120c <DMAMUX_OVR_IRQHandler+0x38>)
 80011ec:	f000 fc64 	bl	8001ab8 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel5
  HAL_DMAEx_MUX_IRQHandler(&hdma_tim3_ch1);
 80011f0:	4807      	ldr	r0, [pc, #28]	; (8001210 <DMAMUX_OVR_IRQHandler+0x3c>)
 80011f2:	f000 fc61 	bl	8001ab8 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel6
  HAL_DMAEx_MUX_IRQHandler(&hdma_tim3_ch2);
 80011f6:	4807      	ldr	r0, [pc, #28]	; (8001214 <DMAMUX_OVR_IRQHandler+0x40>)
 80011f8:	f000 fc5e 	bl	8001ab8 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200003dc 	.word	0x200003dc
 8001204:	2000043c 	.word	0x2000043c
 8001208:	2000049c 	.word	0x2000049c
 800120c:	200004fc 	.word	0x200004fc
 8001210:	2000055c 	.word	0x2000055c
 8001214:	200005bc 	.word	0x200005bc

08001218 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <SystemInit+0x20>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <SystemInit+0x20>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800123e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <LoopForever+0x6>)
  ldr r1, =_edata
 8001242:	490e      	ldr	r1, [pc, #56]	; (800127c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <LoopForever+0xe>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001258:	4c0b      	ldr	r4, [pc, #44]	; (8001288 <LoopForever+0x16>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001266:	f7ff ffd7 	bl	8001218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126a:	f004 f8ed 	bl	8005448 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800126e:	f7ff f96b 	bl	8000548 <main>

08001272 <LoopForever>:

LoopForever:
    b LoopForever
 8001272:	e7fe      	b.n	8001272 <LoopForever>
  ldr   r0, =_estack
 8001274:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8001280:	08005508 	.word	0x08005508
  ldr r2, =_sbss
 8001284:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8001288:	200006b0 	.word	0x200006b0

0800128c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC1_2_IRQHandler>

0800128e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 f95b 	bl	8001554 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 f80e 	bl	80012c0 <HAL_InitTick>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d002      	beq.n	80012b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	e001      	b.n	80012b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012b0:	f7ff fca8 	bl	8000c04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012b4:	79fb      	ldrb	r3, [r7, #7]

}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HAL_InitTick+0x68>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d022      	beq.n	800131a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_InitTick+0x6c>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <HAL_InitTick+0x68>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 f966 	bl	80015ba <HAL_SYSTICK_Config>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10f      	bne.n	8001314 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b0f      	cmp	r3, #15
 80012f8:	d809      	bhi.n	800130e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012fa:	2200      	movs	r2, #0
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001302:	f000 f932 	bl	800156a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <HAL_InitTick+0x70>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	e007      	b.n	800131e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	e004      	b.n	800131e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e001      	b.n	800131e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800131e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200002d8 	.word	0x200002d8
 800132c:	200002d0 	.word	0x200002d0
 8001330:	200002d4 	.word	0x200002d4

08001334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_IncTick+0x1c>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_IncTick+0x20>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4413      	add	r3, r2
 8001342:	4a03      	ldr	r2, [pc, #12]	; (8001350 <HAL_IncTick+0x1c>)
 8001344:	6013      	str	r3, [r2, #0]
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	200006ac 	.word	0x200006ac
 8001354:	200002d8 	.word	0x200002d8

08001358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_GetTick+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	200006ac 	.word	0x200006ac

08001370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001378:	f7ff ffee 	bl	8001358 <HAL_GetTick>
 800137c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001388:	d004      	beq.n	8001394 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_Delay+0x40>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4413      	add	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001394:	bf00      	nop
 8001396:	f7ff ffdf 	bl	8001358 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d8f7      	bhi.n	8001396 <HAL_Delay+0x26>
  {
  }
}
 80013a6:	bf00      	nop
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200002d8 	.word	0x200002d8

080013b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db0b      	blt.n	8001442 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	f003 021f 	and.w	r2, r3, #31
 8001430:	4907      	ldr	r1, [pc, #28]	; (8001450 <__NVIC_EnableIRQ+0x38>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	2001      	movs	r0, #1
 800143a:	fa00 f202 	lsl.w	r2, r0, r2
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000e100 	.word	0xe000e100

08001454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	db0a      	blt.n	800147e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	490c      	ldr	r1, [pc, #48]	; (80014a0 <__NVIC_SetPriority+0x4c>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	0112      	lsls	r2, r2, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	440b      	add	r3, r1
 8001478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800147c:	e00a      	b.n	8001494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4908      	ldr	r1, [pc, #32]	; (80014a4 <__NVIC_SetPriority+0x50>)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	3b04      	subs	r3, #4
 800148c:	0112      	lsls	r2, r2, #4
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	440b      	add	r3, r1
 8001492:	761a      	strb	r2, [r3, #24]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	; 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f1c3 0307 	rsb	r3, r3, #7
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	bf28      	it	cs
 80014c6:	2304      	movcs	r3, #4
 80014c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3304      	adds	r3, #4
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d902      	bls.n	80014d8 <NVIC_EncodePriority+0x30>
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3b03      	subs	r3, #3
 80014d6:	e000      	b.n	80014da <NVIC_EncodePriority+0x32>
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	4313      	orrs	r3, r2
         );
}
 8001502:	4618      	mov	r0, r3
 8001504:	3724      	adds	r7, #36	; 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001520:	d301      	bcc.n	8001526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001522:	2301      	movs	r3, #1
 8001524:	e00f      	b.n	8001546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <SysTick_Config+0x40>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152e:	210f      	movs	r1, #15
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f7ff ff8e 	bl	8001454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <SysTick_Config+0x40>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <SysTick_Config+0x40>)
 8001540:	2207      	movs	r2, #7
 8001542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	e000e010 	.word	0xe000e010

08001554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ff29 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff40 	bl	80013fc <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff90 	bl	80014a8 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5f 	bl	8001454 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff33 	bl	8001418 <__NVIC_EnableIRQ>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffa4 	bl	8001510 <SysTick_Config>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e08d      	b.n	8001702 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b47      	ldr	r3, [pc, #284]	; (800170c <HAL_DMA_Init+0x138>)
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d80f      	bhi.n	8001612 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b45      	ldr	r3, [pc, #276]	; (8001710 <HAL_DMA_Init+0x13c>)
 80015fa:	4413      	add	r3, r2
 80015fc:	4a45      	ldr	r2, [pc, #276]	; (8001714 <HAL_DMA_Init+0x140>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	009a      	lsls	r2, r3, #2
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a42      	ldr	r2, [pc, #264]	; (8001718 <HAL_DMA_Init+0x144>)
 800160e:	641a      	str	r2, [r3, #64]	; 0x40
 8001610:	e00e      	b.n	8001630 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	4b40      	ldr	r3, [pc, #256]	; (800171c <HAL_DMA_Init+0x148>)
 800161a:	4413      	add	r3, r2
 800161c:	4a3d      	ldr	r2, [pc, #244]	; (8001714 <HAL_DMA_Init+0x140>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	009a      	lsls	r2, r3, #2
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a3c      	ldr	r2, [pc, #240]	; (8001720 <HAL_DMA_Init+0x14c>)
 800162e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2202      	movs	r2, #2
 8001634:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800164a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001654:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001660:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f9b6 	bl	80019f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001690:	d102      	bne.n	8001698 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016ac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d010      	beq.n	80016d8 <HAL_DMA_Init+0x104>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d80c      	bhi.n	80016d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f9d6 	bl	8001a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	e008      	b.n	80016ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40020407 	.word	0x40020407
 8001710:	bffdfff8 	.word	0xbffdfff8
 8001714:	cccccccd 	.word	0xcccccccd
 8001718:	40020000 	.word	0x40020000
 800171c:	bffdfbf8 	.word	0xbffdfbf8
 8001720:	40020400 	.word	0x40020400

08001724 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_DMA_Start_IT+0x20>
 8001740:	2302      	movs	r3, #2
 8001742:	e066      	b.n	8001812 <HAL_DMA_Start_IT+0xee>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d155      	bne.n	8001804 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2202      	movs	r2, #2
 800175c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0201 	bic.w	r2, r2, #1
 8001774:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	68b9      	ldr	r1, [r7, #8]
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 f8fb 	bl	8001978 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	2b00      	cmp	r3, #0
 8001788:	d008      	beq.n	800179c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 020e 	orr.w	r2, r2, #14
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e00f      	b.n	80017bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0204 	bic.w	r2, r2, #4
 80017aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 020a 	orr.w	r2, r2, #10
 80017ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017d8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d007      	beq.n	80017f2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f042 0201 	orr.w	r2, r2, #1
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	e005      	b.n	8001810 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800180c:	2302      	movs	r3, #2
 800180e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001810:	7dfb      	ldrb	r3, [r7, #23]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b084      	sub	sp, #16
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	2204      	movs	r2, #4
 800183c:	409a      	lsls	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4013      	ands	r3, r2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d026      	beq.n	8001894 <HAL_DMA_IRQHandler+0x7a>
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d021      	beq.n	8001894 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	2b00      	cmp	r3, #0
 800185c:	d107      	bne.n	800186e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0204 	bic.w	r2, r2, #4
 800186c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f003 021f 	and.w	r2, r3, #31
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	2104      	movs	r1, #4
 800187c:	fa01 f202 	lsl.w	r2, r1, r2
 8001880:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	2b00      	cmp	r3, #0
 8001888:	d071      	beq.n	800196e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001892:	e06c      	b.n	800196e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	2202      	movs	r2, #2
 800189e:	409a      	lsls	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d02e      	beq.n	8001906 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d029      	beq.n	8001906 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10b      	bne.n	80018d8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 020a 	bic.w	r2, r2, #10
 80018ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	2102      	movs	r1, #2
 80018e6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d038      	beq.n	800196e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001904:	e033      	b.n	800196e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	2208      	movs	r2, #8
 8001910:	409a      	lsls	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4013      	ands	r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d02a      	beq.n	8001970 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d025      	beq.n	8001970 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 020e 	bic.w	r2, r2, #14
 8001932:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	2101      	movs	r1, #1
 8001942:	fa01 f202 	lsl.w	r2, r1, r2
 8001946:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001962:	2b00      	cmp	r3, #0
 8001964:	d004      	beq.n	8001970 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800196e:	bf00      	nop
 8001970:	bf00      	nop
}
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800198e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80019a0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f003 021f 	and.w	r2, r3, #31
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f202 	lsl.w	r2, r1, r2
 80019b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b10      	cmp	r3, #16
 80019c4:	d108      	bne.n	80019d8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019d6:	e007      	b.n	80019e8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	60da      	str	r2, [r3, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d802      	bhi.n	8001a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e001      	b.n	8001a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001a10:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	3b08      	subs	r3, #8
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001a20:	fba2 2303 	umull	r2, r3, r2, r3
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	009a      	lsls	r2, r3, #2
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4413      	add	r3, r2
 8001a34:	461a      	mov	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001a3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	2201      	movs	r2, #1
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a4e:	bf00      	nop
 8001a50:	371c      	adds	r7, #28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40020407 	.word	0x40020407
 8001a60:	40020800 	.word	0x40020800
 8001a64:	40020820 	.word	0x40020820
 8001a68:	cccccccd 	.word	0xcccccccd
 8001a6c:	40020880 	.word	0x40020880

08001a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a84:	4413      	add	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a08      	ldr	r2, [pc, #32]	; (8001ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a92:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	1000823f 	.word	0x1000823f
 8001ab4:	40020940 	.word	0x40020940

08001ab8 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d01a      	beq.n	8001b06 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ada:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ade:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ae8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d022      	beq.n	8001b54 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01a      	beq.n	8001b54 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b36:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	4798      	blx	r3
      }
    }
  }
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b6a:	e15a      	b.n	8001e22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2101      	movs	r1, #1
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 814c 	beq.w	8001e1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d005      	beq.n	8001b9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d130      	bne.n	8001bfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	f003 0201 	and.w	r2, r3, #1
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d017      	beq.n	8001c3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	2203      	movs	r2, #3
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d123      	bne.n	8001c8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	08da      	lsrs	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3208      	adds	r2, #8
 8001c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	08da      	lsrs	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3208      	adds	r2, #8
 8001c88:	6939      	ldr	r1, [r7, #16]
 8001c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	2203      	movs	r2, #3
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0203 	and.w	r2, r3, #3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 80a6 	beq.w	8001e1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd0:	4b5b      	ldr	r3, [pc, #364]	; (8001e40 <HAL_GPIO_Init+0x2e4>)
 8001cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd4:	4a5a      	ldr	r2, [pc, #360]	; (8001e40 <HAL_GPIO_Init+0x2e4>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6613      	str	r3, [r2, #96]	; 0x60
 8001cdc:	4b58      	ldr	r3, [pc, #352]	; (8001e40 <HAL_GPIO_Init+0x2e4>)
 8001cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce8:	4a56      	ldr	r2, [pc, #344]	; (8001e44 <HAL_GPIO_Init+0x2e8>)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	220f      	movs	r2, #15
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d12:	d01f      	beq.n	8001d54 <HAL_GPIO_Init+0x1f8>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a4c      	ldr	r2, [pc, #304]	; (8001e48 <HAL_GPIO_Init+0x2ec>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d019      	beq.n	8001d50 <HAL_GPIO_Init+0x1f4>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a4b      	ldr	r2, [pc, #300]	; (8001e4c <HAL_GPIO_Init+0x2f0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d013      	beq.n	8001d4c <HAL_GPIO_Init+0x1f0>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a4a      	ldr	r2, [pc, #296]	; (8001e50 <HAL_GPIO_Init+0x2f4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d00d      	beq.n	8001d48 <HAL_GPIO_Init+0x1ec>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a49      	ldr	r2, [pc, #292]	; (8001e54 <HAL_GPIO_Init+0x2f8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d007      	beq.n	8001d44 <HAL_GPIO_Init+0x1e8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a48      	ldr	r2, [pc, #288]	; (8001e58 <HAL_GPIO_Init+0x2fc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d101      	bne.n	8001d40 <HAL_GPIO_Init+0x1e4>
 8001d3c:	2305      	movs	r3, #5
 8001d3e:	e00a      	b.n	8001d56 <HAL_GPIO_Init+0x1fa>
 8001d40:	2306      	movs	r3, #6
 8001d42:	e008      	b.n	8001d56 <HAL_GPIO_Init+0x1fa>
 8001d44:	2304      	movs	r3, #4
 8001d46:	e006      	b.n	8001d56 <HAL_GPIO_Init+0x1fa>
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e004      	b.n	8001d56 <HAL_GPIO_Init+0x1fa>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e002      	b.n	8001d56 <HAL_GPIO_Init+0x1fa>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_GPIO_Init+0x1fa>
 8001d54:	2300      	movs	r3, #0
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	f002 0203 	and.w	r2, r2, #3
 8001d5c:	0092      	lsls	r2, r2, #2
 8001d5e:	4093      	lsls	r3, r2
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d66:	4937      	ldr	r1, [pc, #220]	; (8001e44 <HAL_GPIO_Init+0x2e8>)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d74:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d98:	4a30      	ldr	r2, [pc, #192]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dc2:	4a26      	ldr	r2, [pc, #152]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001dc8:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dec:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e16:	4a11      	ldr	r2, [pc, #68]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f47f ae9d 	bne.w	8001b6c <HAL_GPIO_Init+0x10>
  }
}
 8001e32:	bf00      	nop
 8001e34:	bf00      	nop
 8001e36:	371c      	adds	r7, #28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40010000 	.word	0x40010000
 8001e48:	48000400 	.word	0x48000400
 8001e4c:	48000800 	.word	0x48000800
 8001e50:	48000c00 	.word	0x48000c00
 8001e54:	48001000 	.word	0x48001000
 8001e58:	48001400 	.word	0x48001400
 8001e5c:	40010400 	.word	0x40010400

08001e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e70:	787b      	ldrb	r3, [r7, #1]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e76:	887a      	ldrh	r2, [r7, #2]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e7c:	e002      	b.n	8001e84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d141      	bne.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e9e:	4b4b      	ldr	r3, [pc, #300]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eaa:	d131      	bne.n	8001f10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eac:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eb2:	4a46      	ldr	r2, [pc, #280]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ebc:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ec4:	4a41      	ldr	r2, [pc, #260]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ecc:	4b40      	ldr	r3, [pc, #256]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2232      	movs	r2, #50	; 0x32
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	4a3f      	ldr	r2, [pc, #252]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	0c9b      	lsrs	r3, r3, #18
 8001ede:	3301      	adds	r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ee2:	e002      	b.n	8001eea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eea:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef6:	d102      	bne.n	8001efe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f2      	bne.n	8001ee4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001efe:	4b33      	ldr	r3, [pc, #204]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0a:	d158      	bne.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e057      	b.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f10:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f16:	4a2d      	ldr	r2, [pc, #180]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f20:	e04d      	b.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f28:	d141      	bne.n	8001fae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f36:	d131      	bne.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f38:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f3e:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f48:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f50:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2232      	movs	r2, #50	; 0x32
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	0c9b      	lsrs	r3, r3, #18
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f6e:	e002      	b.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f82:	d102      	bne.n	8001f8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f2      	bne.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f96:	d112      	bne.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e011      	b.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fac:	e007      	b.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fbc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	200002d0 	.word	0x200002d0
 8001fd4:	431bde83 	.word	0x431bde83

08001fd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e306      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d075      	beq.n	80020e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ff6:	4b97      	ldr	r3, [pc, #604]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002000:	4b94      	ldr	r3, [pc, #592]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	2b0c      	cmp	r3, #12
 800200e:	d102      	bne.n	8002016 <HAL_RCC_OscConfig+0x3e>
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	2b03      	cmp	r3, #3
 8002014:	d002      	beq.n	800201c <HAL_RCC_OscConfig+0x44>
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	2b08      	cmp	r3, #8
 800201a:	d10b      	bne.n	8002034 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201c:	4b8d      	ldr	r3, [pc, #564]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d05b      	beq.n	80020e0 <HAL_RCC_OscConfig+0x108>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d157      	bne.n	80020e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e2e1      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203c:	d106      	bne.n	800204c <HAL_RCC_OscConfig+0x74>
 800203e:	4b85      	ldr	r3, [pc, #532]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a84      	ldr	r2, [pc, #528]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 8002044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e01d      	b.n	8002088 <HAL_RCC_OscConfig+0xb0>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0x98>
 8002056:	4b7f      	ldr	r3, [pc, #508]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a7e      	ldr	r2, [pc, #504]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 800205c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	4b7c      	ldr	r3, [pc, #496]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a7b      	ldr	r2, [pc, #492]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 8002068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e00b      	b.n	8002088 <HAL_RCC_OscConfig+0xb0>
 8002070:	4b78      	ldr	r3, [pc, #480]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a77      	ldr	r2, [pc, #476]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 8002076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b75      	ldr	r3, [pc, #468]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a74      	ldr	r2, [pc, #464]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 8002082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d013      	beq.n	80020b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7ff f962 	bl	8001358 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002098:	f7ff f95e 	bl	8001358 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e2a6      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020aa:	4b6a      	ldr	r3, [pc, #424]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0xc0>
 80020b6:	e014      	b.n	80020e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff f94e 	bl	8001358 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c0:	f7ff f94a 	bl	8001358 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e292      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020d2:	4b60      	ldr	r3, [pc, #384]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0xe8>
 80020de:	e000      	b.n	80020e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d075      	beq.n	80021da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ee:	4b59      	ldr	r3, [pc, #356]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020f8:	4b56      	ldr	r3, [pc, #344]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b0c      	cmp	r3, #12
 8002106:	d102      	bne.n	800210e <HAL_RCC_OscConfig+0x136>
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d002      	beq.n	8002114 <HAL_RCC_OscConfig+0x13c>
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	2b04      	cmp	r3, #4
 8002112:	d11f      	bne.n	8002154 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002114:	4b4f      	ldr	r3, [pc, #316]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_OscConfig+0x154>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e265      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212c:	4b49      	ldr	r3, [pc, #292]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	061b      	lsls	r3, r3, #24
 800213a:	4946      	ldr	r1, [pc, #280]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002140:	4b45      	ldr	r3, [pc, #276]	; (8002258 <HAL_RCC_OscConfig+0x280>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff f8bb 	bl	80012c0 <HAL_InitTick>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d043      	beq.n	80021d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e251      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d023      	beq.n	80021a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800215c:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a3c      	ldr	r2, [pc, #240]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 8002162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7ff f8f6 	bl	8001358 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002170:	f7ff f8f2 	bl	8001358 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e23a      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002182:	4b34      	ldr	r3, [pc, #208]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218e:	4b31      	ldr	r3, [pc, #196]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	061b      	lsls	r3, r3, #24
 800219c:	492d      	ldr	r1, [pc, #180]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	604b      	str	r3, [r1, #4]
 80021a2:	e01a      	b.n	80021da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a4:	4b2b      	ldr	r3, [pc, #172]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a2a      	ldr	r2, [pc, #168]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 80021aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7ff f8d2 	bl	8001358 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b8:	f7ff f8ce 	bl	8001358 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e216      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ca:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x1e0>
 80021d6:	e000      	b.n	80021da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d041      	beq.n	800226a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d01c      	beq.n	8002228 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ee:	4b19      	ldr	r3, [pc, #100]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 80021f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f4:	4a17      	ldr	r2, [pc, #92]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fe:	f7ff f8ab 	bl	8001358 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002206:	f7ff f8a7 	bl	8001358 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e1ef      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002218:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 800221a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0ef      	beq.n	8002206 <HAL_RCC_OscConfig+0x22e>
 8002226:	e020      	b.n	800226a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 800222a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222e:	4a09      	ldr	r2, [pc, #36]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002238:	f7ff f88e 	bl	8001358 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800223e:	e00d      	b.n	800225c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002240:	f7ff f88a 	bl	8001358 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d906      	bls.n	800225c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e1d2      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	200002d4 	.word	0x200002d4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800225c:	4b8c      	ldr	r3, [pc, #560]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 800225e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1ea      	bne.n	8002240 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80a6 	beq.w	80023c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002278:	2300      	movs	r3, #0
 800227a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800227c:	4b84      	ldr	r3, [pc, #528]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_OscConfig+0x2b4>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x2b6>
 800228c:	2300      	movs	r3, #0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00d      	beq.n	80022ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	4b7f      	ldr	r3, [pc, #508]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	4a7e      	ldr	r2, [pc, #504]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229c:	6593      	str	r3, [r2, #88]	; 0x58
 800229e:	4b7c      	ldr	r3, [pc, #496]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022aa:	2301      	movs	r3, #1
 80022ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ae:	4b79      	ldr	r3, [pc, #484]	; (8002494 <HAL_RCC_OscConfig+0x4bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ba:	4b76      	ldr	r3, [pc, #472]	; (8002494 <HAL_RCC_OscConfig+0x4bc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a75      	ldr	r2, [pc, #468]	; (8002494 <HAL_RCC_OscConfig+0x4bc>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c6:	f7ff f847 	bl	8001358 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ce:	f7ff f843 	bl	8001358 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e18b      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e0:	4b6c      	ldr	r3, [pc, #432]	; (8002494 <HAL_RCC_OscConfig+0x4bc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d108      	bne.n	8002306 <HAL_RCC_OscConfig+0x32e>
 80022f4:	4b66      	ldr	r3, [pc, #408]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	4a65      	ldr	r2, [pc, #404]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002304:	e024      	b.n	8002350 <HAL_RCC_OscConfig+0x378>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b05      	cmp	r3, #5
 800230c:	d110      	bne.n	8002330 <HAL_RCC_OscConfig+0x358>
 800230e:	4b60      	ldr	r3, [pc, #384]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 8002310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002314:	4a5e      	ldr	r2, [pc, #376]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 8002316:	f043 0304 	orr.w	r3, r3, #4
 800231a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800231e:	4b5c      	ldr	r3, [pc, #368]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	4a5a      	ldr	r2, [pc, #360]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800232e:	e00f      	b.n	8002350 <HAL_RCC_OscConfig+0x378>
 8002330:	4b57      	ldr	r3, [pc, #348]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	4a56      	ldr	r2, [pc, #344]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002340:	4b53      	ldr	r3, [pc, #332]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	4a52      	ldr	r2, [pc, #328]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 8002348:	f023 0304 	bic.w	r3, r3, #4
 800234c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d016      	beq.n	8002386 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7fe fffe 	bl	8001358 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800235e:	e00a      	b.n	8002376 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002360:	f7fe fffa 	bl	8001358 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e140      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002376:	4b46      	ldr	r3, [pc, #280]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ed      	beq.n	8002360 <HAL_RCC_OscConfig+0x388>
 8002384:	e015      	b.n	80023b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002386:	f7fe ffe7 	bl	8001358 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe ffe3 	bl	8001358 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f241 3288 	movw	r2, #5000	; 0x1388
 800239c:	4293      	cmp	r3, r2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e129      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023a4:	4b3a      	ldr	r3, [pc, #232]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1ed      	bne.n	800238e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023b2:	7ffb      	ldrb	r3, [r7, #31]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d105      	bne.n	80023c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b8:	4b35      	ldr	r3, [pc, #212]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	4a34      	ldr	r2, [pc, #208]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 80023be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d03c      	beq.n	800244a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01c      	beq.n	8002412 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023d8:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 80023da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023de:	4a2c      	ldr	r2, [pc, #176]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e8:	f7fe ffb6 	bl	8001358 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023f0:	f7fe ffb2 	bl	8001358 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e0fa      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002402:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 8002404:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0ef      	beq.n	80023f0 <HAL_RCC_OscConfig+0x418>
 8002410:	e01b      	b.n	800244a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002412:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 8002414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002418:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002422:	f7fe ff99 	bl	8001358 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800242a:	f7fe ff95 	bl	8001358 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0dd      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 800243e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1ef      	bne.n	800242a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 80d1 	beq.w	80025f6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 030c 	and.w	r3, r3, #12
 800245c:	2b0c      	cmp	r3, #12
 800245e:	f000 808b 	beq.w	8002578 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d15e      	bne.n	8002528 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a08      	ldr	r2, [pc, #32]	; (8002490 <HAL_RCC_OscConfig+0x4b8>)
 8002470:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f7fe ff6f 	bl	8001358 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800247c:	e00c      	b.n	8002498 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247e:	f7fe ff6b 	bl	8001358 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d905      	bls.n	8002498 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e0b3      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
 8002490:	40021000 	.word	0x40021000
 8002494:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002498:	4b59      	ldr	r3, [pc, #356]	; (8002600 <HAL_RCC_OscConfig+0x628>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1ec      	bne.n	800247e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a4:	4b56      	ldr	r3, [pc, #344]	; (8002600 <HAL_RCC_OscConfig+0x628>)
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	4b56      	ldr	r3, [pc, #344]	; (8002604 <HAL_RCC_OscConfig+0x62c>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6a11      	ldr	r1, [r2, #32]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024b4:	3a01      	subs	r2, #1
 80024b6:	0112      	lsls	r2, r2, #4
 80024b8:	4311      	orrs	r1, r2
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80024be:	0212      	lsls	r2, r2, #8
 80024c0:	4311      	orrs	r1, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024c6:	0852      	lsrs	r2, r2, #1
 80024c8:	3a01      	subs	r2, #1
 80024ca:	0552      	lsls	r2, r2, #21
 80024cc:	4311      	orrs	r1, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024d2:	0852      	lsrs	r2, r2, #1
 80024d4:	3a01      	subs	r2, #1
 80024d6:	0652      	lsls	r2, r2, #25
 80024d8:	4311      	orrs	r1, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024de:	06d2      	lsls	r2, r2, #27
 80024e0:	430a      	orrs	r2, r1
 80024e2:	4947      	ldr	r1, [pc, #284]	; (8002600 <HAL_RCC_OscConfig+0x628>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e8:	4b45      	ldr	r3, [pc, #276]	; (8002600 <HAL_RCC_OscConfig+0x628>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a44      	ldr	r2, [pc, #272]	; (8002600 <HAL_RCC_OscConfig+0x628>)
 80024ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024f4:	4b42      	ldr	r3, [pc, #264]	; (8002600 <HAL_RCC_OscConfig+0x628>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a41      	ldr	r2, [pc, #260]	; (8002600 <HAL_RCC_OscConfig+0x628>)
 80024fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe ff2a 	bl	8001358 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7fe ff26 	bl	8001358 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e06e      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251a:	4b39      	ldr	r3, [pc, #228]	; (8002600 <HAL_RCC_OscConfig+0x628>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x530>
 8002526:	e066      	b.n	80025f6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002528:	4b35      	ldr	r3, [pc, #212]	; (8002600 <HAL_RCC_OscConfig+0x628>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a34      	ldr	r2, [pc, #208]	; (8002600 <HAL_RCC_OscConfig+0x628>)
 800252e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002532:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002534:	4b32      	ldr	r3, [pc, #200]	; (8002600 <HAL_RCC_OscConfig+0x628>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4a31      	ldr	r2, [pc, #196]	; (8002600 <HAL_RCC_OscConfig+0x628>)
 800253a:	f023 0303 	bic.w	r3, r3, #3
 800253e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002540:	4b2f      	ldr	r3, [pc, #188]	; (8002600 <HAL_RCC_OscConfig+0x628>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4a2e      	ldr	r2, [pc, #184]	; (8002600 <HAL_RCC_OscConfig+0x628>)
 8002546:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800254a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe ff02 	bl	8001358 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002558:	f7fe fefe 	bl	8001358 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e046      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256a:	4b25      	ldr	r3, [pc, #148]	; (8002600 <HAL_RCC_OscConfig+0x628>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x580>
 8002576:	e03e      	b.n	80025f6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e039      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002584:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <HAL_RCC_OscConfig+0x628>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 0203 	and.w	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	429a      	cmp	r2, r3
 8002596:	d12c      	bne.n	80025f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	3b01      	subs	r3, #1
 80025a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d123      	bne.n	80025f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d11b      	bne.n	80025f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d113      	bne.n	80025f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	3b01      	subs	r3, #1
 80025d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d109      	bne.n	80025f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	3b01      	subs	r3, #1
 80025ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3720      	adds	r7, #32
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000
 8002604:	019f800c 	.word	0x019f800c

08002608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e11e      	b.n	800285e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002620:	4b91      	ldr	r3, [pc, #580]	; (8002868 <HAL_RCC_ClockConfig+0x260>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d910      	bls.n	8002650 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b8e      	ldr	r3, [pc, #568]	; (8002868 <HAL_RCC_ClockConfig+0x260>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 020f 	bic.w	r2, r3, #15
 8002636:	498c      	ldr	r1, [pc, #560]	; (8002868 <HAL_RCC_ClockConfig+0x260>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b8a      	ldr	r3, [pc, #552]	; (8002868 <HAL_RCC_ClockConfig+0x260>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e106      	b.n	800285e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d073      	beq.n	8002744 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d129      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002664:	4b81      	ldr	r3, [pc, #516]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0f4      	b.n	800285e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002674:	f000 f99e 	bl	80029b4 <RCC_GetSysClockFreqFromPLLSource>
 8002678:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4a7c      	ldr	r2, [pc, #496]	; (8002870 <HAL_RCC_ClockConfig+0x268>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d93f      	bls.n	8002702 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002682:	4b7a      	ldr	r3, [pc, #488]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002696:	2b00      	cmp	r3, #0
 8002698:	d033      	beq.n	8002702 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d12f      	bne.n	8002702 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026a2:	4b72      	ldr	r3, [pc, #456]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026aa:	4a70      	ldr	r2, [pc, #448]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 80026ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	e024      	b.n	8002702 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d107      	bne.n	80026d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026c0:	4b6a      	ldr	r3, [pc, #424]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d109      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0c6      	b.n	800285e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d0:	4b66      	ldr	r3, [pc, #408]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0be      	b.n	800285e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80026e0:	f000 f8ce 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4a61      	ldr	r2, [pc, #388]	; (8002870 <HAL_RCC_ClockConfig+0x268>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d909      	bls.n	8002702 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026ee:	4b5f      	ldr	r3, [pc, #380]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026f6:	4a5d      	ldr	r2, [pc, #372]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 80026f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002702:	4b5a      	ldr	r3, [pc, #360]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f023 0203 	bic.w	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4957      	ldr	r1, [pc, #348]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 8002710:	4313      	orrs	r3, r2
 8002712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002714:	f7fe fe20 	bl	8001358 <HAL_GetTick>
 8002718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	e00a      	b.n	8002732 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271c:	f7fe fe1c 	bl	8001358 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e095      	b.n	800285e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002732:	4b4e      	ldr	r3, [pc, #312]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 020c 	and.w	r2, r3, #12
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	429a      	cmp	r2, r3
 8002742:	d1eb      	bne.n	800271c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d023      	beq.n	8002798 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800275c:	4b43      	ldr	r3, [pc, #268]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a42      	ldr	r2, [pc, #264]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 8002762:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002766:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002774:	4b3d      	ldr	r3, [pc, #244]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800277c:	4a3b      	ldr	r2, [pc, #236]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 800277e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002782:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002784:	4b39      	ldr	r3, [pc, #228]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	4936      	ldr	r1, [pc, #216]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
 8002796:	e008      	b.n	80027aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2b80      	cmp	r3, #128	; 0x80
 800279c:	d105      	bne.n	80027aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800279e:	4b33      	ldr	r3, [pc, #204]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4a32      	ldr	r2, [pc, #200]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 80027a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027aa:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <HAL_RCC_ClockConfig+0x260>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d21d      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b8:	4b2b      	ldr	r3, [pc, #172]	; (8002868 <HAL_RCC_ClockConfig+0x260>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f023 020f 	bic.w	r2, r3, #15
 80027c0:	4929      	ldr	r1, [pc, #164]	; (8002868 <HAL_RCC_ClockConfig+0x260>)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027c8:	f7fe fdc6 	bl	8001358 <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d0:	f7fe fdc2 	bl	8001358 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	; 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e03b      	b.n	800285e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_RCC_ClockConfig+0x260>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d1ed      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002800:	4b1a      	ldr	r3, [pc, #104]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4917      	ldr	r1, [pc, #92]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800281e:	4b13      	ldr	r3, [pc, #76]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	490f      	ldr	r1, [pc, #60]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002832:	f000 f825 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8002836:	4602      	mov	r2, r0
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <HAL_RCC_ClockConfig+0x264>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	490c      	ldr	r1, [pc, #48]	; (8002874 <HAL_RCC_ClockConfig+0x26c>)
 8002844:	5ccb      	ldrb	r3, [r1, r3]
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	fa22 f303 	lsr.w	r3, r2, r3
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <HAL_RCC_ClockConfig+0x270>)
 8002850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_RCC_ClockConfig+0x274>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fd32 	bl	80012c0 <HAL_InitTick>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40022000 	.word	0x40022000
 800286c:	40021000 	.word	0x40021000
 8002870:	04c4b400 	.word	0x04c4b400
 8002874:	080054b8 	.word	0x080054b8
 8002878:	200002d0 	.word	0x200002d0
 800287c:	200002d4 	.word	0x200002d4

08002880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002886:	4b2c      	ldr	r3, [pc, #176]	; (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b04      	cmp	r3, #4
 8002890:	d102      	bne.n	8002898 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002892:	4b2a      	ldr	r3, [pc, #168]	; (800293c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	e047      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002898:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 030c 	and.w	r3, r3, #12
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d102      	bne.n	80028aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	e03e      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028aa:	4b23      	ldr	r3, [pc, #140]	; (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b0c      	cmp	r3, #12
 80028b4:	d136      	bne.n	8002924 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028b6:	4b20      	ldr	r3, [pc, #128]	; (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	3301      	adds	r3, #1
 80028cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d10c      	bne.n	80028ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028d4:	4a1a      	ldr	r2, [pc, #104]	; (8002940 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	4a16      	ldr	r2, [pc, #88]	; (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028de:	68d2      	ldr	r2, [r2, #12]
 80028e0:	0a12      	lsrs	r2, r2, #8
 80028e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028e6:	fb02 f303 	mul.w	r3, r2, r3
 80028ea:	617b      	str	r3, [r7, #20]
      break;
 80028ec:	e00c      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028ee:	4a13      	ldr	r2, [pc, #76]	; (800293c <HAL_RCC_GetSysClockFreq+0xbc>)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f6:	4a10      	ldr	r2, [pc, #64]	; (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f8:	68d2      	ldr	r2, [r2, #12]
 80028fa:	0a12      	lsrs	r2, r2, #8
 80028fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002900:	fb02 f303 	mul.w	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
      break;
 8002906:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	0e5b      	lsrs	r3, r3, #25
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	3301      	adds	r3, #1
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	e001      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002928:	693b      	ldr	r3, [r7, #16]
}
 800292a:	4618      	mov	r0, r3
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000
 800293c:	00f42400 	.word	0x00f42400
 8002940:	007a1200 	.word	0x007a1200

08002944 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <HAL_RCC_GetHCLKFreq+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	200002d0 	.word	0x200002d0

0800295c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002960:	f7ff fff0 	bl	8002944 <HAL_RCC_GetHCLKFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	4904      	ldr	r1, [pc, #16]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800297c:	4618      	mov	r0, r3
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	080054c8 	.word	0x080054c8

08002988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800298c:	f7ff ffda 	bl	8002944 <HAL_RCC_GetHCLKFreq>
 8002990:	4602      	mov	r2, r0
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	0adb      	lsrs	r3, r3, #11
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	4904      	ldr	r1, [pc, #16]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800299e:	5ccb      	ldrb	r3, [r1, r3]
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	080054c8 	.word	0x080054c8

080029b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ba:	4b1e      	ldr	r3, [pc, #120]	; (8002a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029c4:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	3301      	adds	r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d10c      	bne.n	80029f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029d8:	4a17      	ldr	r2, [pc, #92]	; (8002a38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e0:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029e2:	68d2      	ldr	r2, [r2, #12]
 80029e4:	0a12      	lsrs	r2, r2, #8
 80029e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	617b      	str	r3, [r7, #20]
    break;
 80029f0:	e00c      	b.n	8002a0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029f2:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	4a0e      	ldr	r2, [pc, #56]	; (8002a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029fc:	68d2      	ldr	r2, [r2, #12]
 80029fe:	0a12      	lsrs	r2, r2, #8
 8002a00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a04:	fb02 f303 	mul.w	r3, r2, r3
 8002a08:	617b      	str	r3, [r7, #20]
    break;
 8002a0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	0e5b      	lsrs	r3, r3, #25
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	3301      	adds	r3, #1
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a26:	687b      	ldr	r3, [r7, #4]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	371c      	adds	r7, #28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40021000 	.word	0x40021000
 8002a38:	007a1200 	.word	0x007a1200
 8002a3c:	00f42400 	.word	0x00f42400

08002a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a48:	2300      	movs	r3, #0
 8002a4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8098 	beq.w	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a62:	4b43      	ldr	r3, [pc, #268]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10d      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	4b40      	ldr	r3, [pc, #256]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	4a3f      	ldr	r2, [pc, #252]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a78:	6593      	str	r3, [r2, #88]	; 0x58
 8002a7a:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a86:	2301      	movs	r3, #1
 8002a88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a8a:	4b3a      	ldr	r3, [pc, #232]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a39      	ldr	r2, [pc, #228]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a96:	f7fe fc5f 	bl	8001358 <HAL_GetTick>
 8002a9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a9c:	e009      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9e:	f7fe fc5b 	bl	8001358 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d902      	bls.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	74fb      	strb	r3, [r7, #19]
        break;
 8002ab0:	e005      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ab2:	4b30      	ldr	r3, [pc, #192]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0ef      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002abe:	7cfb      	ldrb	r3, [r7, #19]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d159      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ac4:	4b2a      	ldr	r3, [pc, #168]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ace:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01e      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d019      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ae0:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aec:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	4a1f      	ldr	r2, [pc, #124]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002afc:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	4a1b      	ldr	r2, [pc, #108]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b0c:	4a18      	ldr	r2, [pc, #96]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d016      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fc1b 	bl	8001358 <HAL_GetTick>
 8002b22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b24:	e00b      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b26:	f7fe fc17 	bl	8001358 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d902      	bls.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	74fb      	strb	r3, [r7, #19]
            break;
 8002b3c:	e006      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ec      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b4c:	7cfb      	ldrb	r3, [r7, #19]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10b      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b52:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	4903      	ldr	r1, [pc, #12]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b68:	e008      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	74bb      	strb	r3, [r7, #18]
 8002b6e:	e005      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b78:	7cfb      	ldrb	r3, [r7, #19]
 8002b7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7c:	7c7b      	ldrb	r3, [r7, #17]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d105      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b82:	4ba6      	ldr	r3, [pc, #664]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	4aa5      	ldr	r2, [pc, #660]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b9a:	4ba0      	ldr	r3, [pc, #640]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba0:	f023 0203 	bic.w	r2, r3, #3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	499c      	ldr	r1, [pc, #624]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bbc:	4b97      	ldr	r3, [pc, #604]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc2:	f023 020c 	bic.w	r2, r3, #12
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	4994      	ldr	r1, [pc, #592]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bde:	4b8f      	ldr	r3, [pc, #572]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	498b      	ldr	r1, [pc, #556]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c00:	4b86      	ldr	r3, [pc, #536]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	4983      	ldr	r1, [pc, #524]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c22:	4b7e      	ldr	r3, [pc, #504]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	497a      	ldr	r1, [pc, #488]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c44:	4b75      	ldr	r3, [pc, #468]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	4972      	ldr	r1, [pc, #456]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c66:	4b6d      	ldr	r3, [pc, #436]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	4969      	ldr	r1, [pc, #420]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c88:	4b64      	ldr	r3, [pc, #400]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	4961      	ldr	r1, [pc, #388]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002caa:	4b5c      	ldr	r3, [pc, #368]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	4958      	ldr	r1, [pc, #352]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d015      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ccc:	4b53      	ldr	r3, [pc, #332]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	4950      	ldr	r1, [pc, #320]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cea:	d105      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cec:	4b4b      	ldr	r3, [pc, #300]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a4a      	ldr	r2, [pc, #296]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cf6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d015      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d04:	4b45      	ldr	r3, [pc, #276]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	4942      	ldr	r1, [pc, #264]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d22:	d105      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d24:	4b3d      	ldr	r3, [pc, #244]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4a3c      	ldr	r2, [pc, #240]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d2e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d015      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d3c:	4b37      	ldr	r3, [pc, #220]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4934      	ldr	r1, [pc, #208]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d5c:	4b2f      	ldr	r3, [pc, #188]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a2e      	ldr	r2, [pc, #184]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d015      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d74:	4b29      	ldr	r3, [pc, #164]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d82:	4926      	ldr	r1, [pc, #152]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d92:	d105      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d94:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d015      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dba:	4918      	ldr	r1, [pc, #96]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dcc:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a12      	ldr	r2, [pc, #72]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dd6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d015      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002de4:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	490a      	ldr	r1, [pc, #40]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e02:	d105      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e10:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000

08002e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e049      	b.n	8002ec6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fd ff00 	bl	8000c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f000 feca 	bl	8003bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e049      	b.n	8002f74 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f841 	bl	8002f7c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2202      	movs	r2, #2
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	f000 fe73 	bl	8003bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e049      	b.n	8003036 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f841 	bl	800303e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	f000 fe12 	bl	8003bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
	...

08003054 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d109      	bne.n	8003080 <HAL_TIM_PWM_Start_DMA+0x2c>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	bf0c      	ite	eq
 8003078:	2301      	moveq	r3, #1
 800307a:	2300      	movne	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	e03c      	b.n	80030fa <HAL_TIM_PWM_Start_DMA+0xa6>
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b04      	cmp	r3, #4
 8003084:	d109      	bne.n	800309a <HAL_TIM_PWM_Start_DMA+0x46>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	bf0c      	ite	eq
 8003092:	2301      	moveq	r3, #1
 8003094:	2300      	movne	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	e02f      	b.n	80030fa <HAL_TIM_PWM_Start_DMA+0xa6>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b08      	cmp	r3, #8
 800309e:	d109      	bne.n	80030b4 <HAL_TIM_PWM_Start_DMA+0x60>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	e022      	b.n	80030fa <HAL_TIM_PWM_Start_DMA+0xa6>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b0c      	cmp	r3, #12
 80030b8:	d109      	bne.n	80030ce <HAL_TIM_PWM_Start_DMA+0x7a>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	bf0c      	ite	eq
 80030c6:	2301      	moveq	r3, #1
 80030c8:	2300      	movne	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	e015      	b.n	80030fa <HAL_TIM_PWM_Start_DMA+0xa6>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b10      	cmp	r3, #16
 80030d2:	d109      	bne.n	80030e8 <HAL_TIM_PWM_Start_DMA+0x94>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	e008      	b.n	80030fa <HAL_TIM_PWM_Start_DMA+0xa6>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
 8003100:	e1a6      	b.n	8003450 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <HAL_TIM_PWM_Start_DMA+0xc8>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b01      	cmp	r3, #1
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	e03c      	b.n	8003196 <HAL_TIM_PWM_Start_DMA+0x142>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b04      	cmp	r3, #4
 8003120:	d109      	bne.n	8003136 <HAL_TIM_PWM_Start_DMA+0xe2>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b01      	cmp	r3, #1
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	e02f      	b.n	8003196 <HAL_TIM_PWM_Start_DMA+0x142>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d109      	bne.n	8003150 <HAL_TIM_PWM_Start_DMA+0xfc>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	e022      	b.n	8003196 <HAL_TIM_PWM_Start_DMA+0x142>
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b0c      	cmp	r3, #12
 8003154:	d109      	bne.n	800316a <HAL_TIM_PWM_Start_DMA+0x116>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	bf0c      	ite	eq
 8003162:	2301      	moveq	r3, #1
 8003164:	2300      	movne	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	e015      	b.n	8003196 <HAL_TIM_PWM_Start_DMA+0x142>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b10      	cmp	r3, #16
 800316e:	d109      	bne.n	8003184 <HAL_TIM_PWM_Start_DMA+0x130>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e008      	b.n	8003196 <HAL_TIM_PWM_Start_DMA+0x142>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d034      	beq.n	8003204 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d104      	bne.n	80031aa <HAL_TIM_PWM_Start_DMA+0x156>
 80031a0:	887b      	ldrh	r3, [r7, #2]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e152      	b.n	8003450 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d104      	bne.n	80031ba <HAL_TIM_PWM_Start_DMA+0x166>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031b8:	e026      	b.n	8003208 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d104      	bne.n	80031ca <HAL_TIM_PWM_Start_DMA+0x176>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031c8:	e01e      	b.n	8003208 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d104      	bne.n	80031da <HAL_TIM_PWM_Start_DMA+0x186>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031d8:	e016      	b.n	8003208 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b0c      	cmp	r3, #12
 80031de:	d104      	bne.n	80031ea <HAL_TIM_PWM_Start_DMA+0x196>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031e8:	e00e      	b.n	8003208 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d104      	bne.n	80031fa <HAL_TIM_PWM_Start_DMA+0x1a6>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f8:	e006      	b.n	8003208 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2202      	movs	r2, #2
 80031fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003202:	e001      	b.n	8003208 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e123      	b.n	8003450 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b0c      	cmp	r3, #12
 800320c:	f200 80ae 	bhi.w	800336c <HAL_TIM_PWM_Start_DMA+0x318>
 8003210:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	0800324d 	.word	0x0800324d
 800321c:	0800336d 	.word	0x0800336d
 8003220:	0800336d 	.word	0x0800336d
 8003224:	0800336d 	.word	0x0800336d
 8003228:	08003295 	.word	0x08003295
 800322c:	0800336d 	.word	0x0800336d
 8003230:	0800336d 	.word	0x0800336d
 8003234:	0800336d 	.word	0x0800336d
 8003238:	080032dd 	.word	0x080032dd
 800323c:	0800336d 	.word	0x0800336d
 8003240:	0800336d 	.word	0x0800336d
 8003244:	0800336d 	.word	0x0800336d
 8003248:	08003325 	.word	0x08003325
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	4a81      	ldr	r2, [pc, #516]	; (8003458 <HAL_TIM_PWM_Start_DMA+0x404>)
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	4a80      	ldr	r2, [pc, #512]	; (800345c <HAL_TIM_PWM_Start_DMA+0x408>)
 800325a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	4a7f      	ldr	r2, [pc, #508]	; (8003460 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8003262:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3334      	adds	r3, #52	; 0x34
 8003270:	461a      	mov	r2, r3
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	f7fe fa56 	bl	8001724 <HAL_DMA_Start_IT>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e0e6      	b.n	8003450 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003290:	60da      	str	r2, [r3, #12]
      break;
 8003292:	e06e      	b.n	8003372 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	4a6f      	ldr	r2, [pc, #444]	; (8003458 <HAL_TIM_PWM_Start_DMA+0x404>)
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	4a6e      	ldr	r2, [pc, #440]	; (800345c <HAL_TIM_PWM_Start_DMA+0x408>)
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	4a6d      	ldr	r2, [pc, #436]	; (8003460 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80032aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3338      	adds	r3, #56	; 0x38
 80032b8:	461a      	mov	r2, r3
 80032ba:	887b      	ldrh	r3, [r7, #2]
 80032bc:	f7fe fa32 	bl	8001724 <HAL_DMA_Start_IT>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0c2      	b.n	8003450 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032d8:	60da      	str	r2, [r3, #12]
      break;
 80032da:	e04a      	b.n	8003372 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	4a5d      	ldr	r2, [pc, #372]	; (8003458 <HAL_TIM_PWM_Start_DMA+0x404>)
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	4a5c      	ldr	r2, [pc, #368]	; (800345c <HAL_TIM_PWM_Start_DMA+0x408>)
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	4a5b      	ldr	r2, [pc, #364]	; (8003460 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80032f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	333c      	adds	r3, #60	; 0x3c
 8003300:	461a      	mov	r2, r3
 8003302:	887b      	ldrh	r3, [r7, #2]
 8003304:	f7fe fa0e 	bl	8001724 <HAL_DMA_Start_IT>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e09e      	b.n	8003450 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003320:	60da      	str	r2, [r3, #12]
      break;
 8003322:	e026      	b.n	8003372 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	4a4b      	ldr	r2, [pc, #300]	; (8003458 <HAL_TIM_PWM_Start_DMA+0x404>)
 800332a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	4a4a      	ldr	r2, [pc, #296]	; (800345c <HAL_TIM_PWM_Start_DMA+0x408>)
 8003332:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	4a49      	ldr	r2, [pc, #292]	; (8003460 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800333a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3340      	adds	r3, #64	; 0x40
 8003348:	461a      	mov	r2, r3
 800334a:	887b      	ldrh	r3, [r7, #2]
 800334c:	f7fe f9ea 	bl	8001724 <HAL_DMA_Start_IT>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e07a      	b.n	8003450 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003368:	60da      	str	r2, [r3, #12]
      break;
 800336a:	e002      	b.n	8003372 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	75fb      	strb	r3, [r7, #23]
      break;
 8003370:	bf00      	nop
  }

  if (status == HAL_OK)
 8003372:	7dfb      	ldrb	r3, [r7, #23]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d16a      	bne.n	800344e <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2201      	movs	r2, #1
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	4618      	mov	r0, r3
 8003382:	f001 f91f 	bl	80045c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a36      	ldr	r2, [pc, #216]	; (8003464 <HAL_TIM_PWM_Start_DMA+0x410>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d013      	beq.n	80033b8 <HAL_TIM_PWM_Start_DMA+0x364>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a34      	ldr	r2, [pc, #208]	; (8003468 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00e      	beq.n	80033b8 <HAL_TIM_PWM_Start_DMA+0x364>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a33      	ldr	r2, [pc, #204]	; (800346c <HAL_TIM_PWM_Start_DMA+0x418>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d009      	beq.n	80033b8 <HAL_TIM_PWM_Start_DMA+0x364>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a31      	ldr	r2, [pc, #196]	; (8003470 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_TIM_PWM_Start_DMA+0x364>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a30      	ldr	r2, [pc, #192]	; (8003474 <HAL_TIM_PWM_Start_DMA+0x420>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d101      	bne.n	80033bc <HAL_TIM_PWM_Start_DMA+0x368>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <HAL_TIM_PWM_Start_DMA+0x36a>
 80033bc:	2300      	movs	r3, #0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d007      	beq.n	80033d2 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a23      	ldr	r2, [pc, #140]	; (8003464 <HAL_TIM_PWM_Start_DMA+0x410>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d018      	beq.n	800340e <HAL_TIM_PWM_Start_DMA+0x3ba>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e4:	d013      	beq.n	800340e <HAL_TIM_PWM_Start_DMA+0x3ba>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a23      	ldr	r2, [pc, #140]	; (8003478 <HAL_TIM_PWM_Start_DMA+0x424>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00e      	beq.n	800340e <HAL_TIM_PWM_Start_DMA+0x3ba>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a21      	ldr	r2, [pc, #132]	; (800347c <HAL_TIM_PWM_Start_DMA+0x428>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d009      	beq.n	800340e <HAL_TIM_PWM_Start_DMA+0x3ba>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1a      	ldr	r2, [pc, #104]	; (8003468 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d004      	beq.n	800340e <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a18      	ldr	r2, [pc, #96]	; (800346c <HAL_TIM_PWM_Start_DMA+0x418>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d115      	bne.n	800343a <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003416:	4013      	ands	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b06      	cmp	r3, #6
 800341e:	d015      	beq.n	800344c <HAL_TIM_PWM_Start_DMA+0x3f8>
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003426:	d011      	beq.n	800344c <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003438:	e008      	b.n	800344c <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0201 	orr.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e000      	b.n	800344e <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800344e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	08003ae7 	.word	0x08003ae7
 800345c:	08003b8f 	.word	0x08003b8f
 8003460:	08003a55 	.word	0x08003a55
 8003464:	40012c00 	.word	0x40012c00
 8003468:	40013400 	.word	0x40013400
 800346c:	40014000 	.word	0x40014000
 8003470:	40014400 	.word	0x40014400
 8003474:	40014800 	.word	0x40014800
 8003478:	40000400 	.word	0x40000400
 800347c:	40000800 	.word	0x40000800
 8003480:	00010007 	.word	0x00010007

08003484 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800349e:	2302      	movs	r3, #2
 80034a0:	e066      	b.n	8003570 <HAL_TIM_OC_ConfigChannel+0xec>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b14      	cmp	r3, #20
 80034ae:	d857      	bhi.n	8003560 <HAL_TIM_OC_ConfigChannel+0xdc>
 80034b0:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80034b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b6:	bf00      	nop
 80034b8:	0800350d 	.word	0x0800350d
 80034bc:	08003561 	.word	0x08003561
 80034c0:	08003561 	.word	0x08003561
 80034c4:	08003561 	.word	0x08003561
 80034c8:	0800351b 	.word	0x0800351b
 80034cc:	08003561 	.word	0x08003561
 80034d0:	08003561 	.word	0x08003561
 80034d4:	08003561 	.word	0x08003561
 80034d8:	08003529 	.word	0x08003529
 80034dc:	08003561 	.word	0x08003561
 80034e0:	08003561 	.word	0x08003561
 80034e4:	08003561 	.word	0x08003561
 80034e8:	08003537 	.word	0x08003537
 80034ec:	08003561 	.word	0x08003561
 80034f0:	08003561 	.word	0x08003561
 80034f4:	08003561 	.word	0x08003561
 80034f8:	08003545 	.word	0x08003545
 80034fc:	08003561 	.word	0x08003561
 8003500:	08003561 	.word	0x08003561
 8003504:	08003561 	.word	0x08003561
 8003508:	08003553 	.word	0x08003553
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fc00 	bl	8003d18 <TIM_OC1_SetConfig>
      break;
 8003518:	e025      	b.n	8003566 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	4618      	mov	r0, r3
 8003522:	f000 fc89 	bl	8003e38 <TIM_OC2_SetConfig>
      break;
 8003526:	e01e      	b.n	8003566 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fd0c 	bl	8003f4c <TIM_OC3_SetConfig>
      break;
 8003534:	e017      	b.n	8003566 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68b9      	ldr	r1, [r7, #8]
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fd8d 	bl	800405c <TIM_OC4_SetConfig>
      break;
 8003542:	e010      	b.n	8003566 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fe10 	bl	8004170 <TIM_OC5_SetConfig>
      break;
 8003550:	e009      	b.n	8003566 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fe6d 	bl	8004238 <TIM_OC6_SetConfig>
      break;
 800355e:	e002      	b.n	8003566 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	75fb      	strb	r3, [r7, #23]
      break;
 8003564:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800356e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003592:	2302      	movs	r3, #2
 8003594:	e0ff      	b.n	8003796 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b14      	cmp	r3, #20
 80035a2:	f200 80f0 	bhi.w	8003786 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80035a6:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	08003601 	.word	0x08003601
 80035b0:	08003787 	.word	0x08003787
 80035b4:	08003787 	.word	0x08003787
 80035b8:	08003787 	.word	0x08003787
 80035bc:	08003641 	.word	0x08003641
 80035c0:	08003787 	.word	0x08003787
 80035c4:	08003787 	.word	0x08003787
 80035c8:	08003787 	.word	0x08003787
 80035cc:	08003683 	.word	0x08003683
 80035d0:	08003787 	.word	0x08003787
 80035d4:	08003787 	.word	0x08003787
 80035d8:	08003787 	.word	0x08003787
 80035dc:	080036c3 	.word	0x080036c3
 80035e0:	08003787 	.word	0x08003787
 80035e4:	08003787 	.word	0x08003787
 80035e8:	08003787 	.word	0x08003787
 80035ec:	08003705 	.word	0x08003705
 80035f0:	08003787 	.word	0x08003787
 80035f4:	08003787 	.word	0x08003787
 80035f8:	08003787 	.word	0x08003787
 80035fc:	08003745 	.word	0x08003745
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fb86 	bl	8003d18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0208 	orr.w	r2, r2, #8
 800361a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699a      	ldr	r2, [r3, #24]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0204 	bic.w	r2, r2, #4
 800362a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6999      	ldr	r1, [r3, #24]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	619a      	str	r2, [r3, #24]
      break;
 800363e:	e0a5      	b.n	800378c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fbf6 	bl	8003e38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800365a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699a      	ldr	r2, [r3, #24]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6999      	ldr	r1, [r3, #24]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	021a      	lsls	r2, r3, #8
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	619a      	str	r2, [r3, #24]
      break;
 8003680:	e084      	b.n	800378c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fc5f 	bl	8003f4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69da      	ldr	r2, [r3, #28]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0208 	orr.w	r2, r2, #8
 800369c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69da      	ldr	r2, [r3, #28]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0204 	bic.w	r2, r2, #4
 80036ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69d9      	ldr	r1, [r3, #28]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	61da      	str	r2, [r3, #28]
      break;
 80036c0:	e064      	b.n	800378c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fcc7 	bl	800405c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69da      	ldr	r2, [r3, #28]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69da      	ldr	r2, [r3, #28]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69d9      	ldr	r1, [r3, #28]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	021a      	lsls	r2, r3, #8
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	61da      	str	r2, [r3, #28]
      break;
 8003702:	e043      	b.n	800378c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fd30 	bl	8004170 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0208 	orr.w	r2, r2, #8
 800371e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0204 	bic.w	r2, r2, #4
 800372e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003742:	e023      	b.n	800378c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68b9      	ldr	r1, [r7, #8]
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fd74 	bl	8004238 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800375e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	021a      	lsls	r2, r3, #8
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003784:	e002      	b.n	800378c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	75fb      	strb	r3, [r7, #23]
      break;
 800378a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003794:	7dfb      	ldrb	r3, [r7, #23]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop

080037a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_TIM_ConfigClockSource+0x1c>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e0de      	b.n	800397a <HAL_TIM_ConfigClockSource+0x1da>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80037da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a63      	ldr	r2, [pc, #396]	; (8003984 <HAL_TIM_ConfigClockSource+0x1e4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	f000 80a9 	beq.w	800394e <HAL_TIM_ConfigClockSource+0x1ae>
 80037fc:	4a61      	ldr	r2, [pc, #388]	; (8003984 <HAL_TIM_ConfigClockSource+0x1e4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	f200 80ae 	bhi.w	8003960 <HAL_TIM_ConfigClockSource+0x1c0>
 8003804:	4a60      	ldr	r2, [pc, #384]	; (8003988 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	f000 80a1 	beq.w	800394e <HAL_TIM_ConfigClockSource+0x1ae>
 800380c:	4a5e      	ldr	r2, [pc, #376]	; (8003988 <HAL_TIM_ConfigClockSource+0x1e8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	f200 80a6 	bhi.w	8003960 <HAL_TIM_ConfigClockSource+0x1c0>
 8003814:	4a5d      	ldr	r2, [pc, #372]	; (800398c <HAL_TIM_ConfigClockSource+0x1ec>)
 8003816:	4293      	cmp	r3, r2
 8003818:	f000 8099 	beq.w	800394e <HAL_TIM_ConfigClockSource+0x1ae>
 800381c:	4a5b      	ldr	r2, [pc, #364]	; (800398c <HAL_TIM_ConfigClockSource+0x1ec>)
 800381e:	4293      	cmp	r3, r2
 8003820:	f200 809e 	bhi.w	8003960 <HAL_TIM_ConfigClockSource+0x1c0>
 8003824:	4a5a      	ldr	r2, [pc, #360]	; (8003990 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	f000 8091 	beq.w	800394e <HAL_TIM_ConfigClockSource+0x1ae>
 800382c:	4a58      	ldr	r2, [pc, #352]	; (8003990 <HAL_TIM_ConfigClockSource+0x1f0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	f200 8096 	bhi.w	8003960 <HAL_TIM_ConfigClockSource+0x1c0>
 8003834:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003838:	f000 8089 	beq.w	800394e <HAL_TIM_ConfigClockSource+0x1ae>
 800383c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003840:	f200 808e 	bhi.w	8003960 <HAL_TIM_ConfigClockSource+0x1c0>
 8003844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003848:	d03e      	beq.n	80038c8 <HAL_TIM_ConfigClockSource+0x128>
 800384a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384e:	f200 8087 	bhi.w	8003960 <HAL_TIM_ConfigClockSource+0x1c0>
 8003852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003856:	f000 8086 	beq.w	8003966 <HAL_TIM_ConfigClockSource+0x1c6>
 800385a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385e:	d87f      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x1c0>
 8003860:	2b70      	cmp	r3, #112	; 0x70
 8003862:	d01a      	beq.n	800389a <HAL_TIM_ConfigClockSource+0xfa>
 8003864:	2b70      	cmp	r3, #112	; 0x70
 8003866:	d87b      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x1c0>
 8003868:	2b60      	cmp	r3, #96	; 0x60
 800386a:	d050      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x16e>
 800386c:	2b60      	cmp	r3, #96	; 0x60
 800386e:	d877      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x1c0>
 8003870:	2b50      	cmp	r3, #80	; 0x50
 8003872:	d03c      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x14e>
 8003874:	2b50      	cmp	r3, #80	; 0x50
 8003876:	d873      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x1c0>
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d058      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x18e>
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	d86f      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x1c0>
 8003880:	2b30      	cmp	r3, #48	; 0x30
 8003882:	d064      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x1ae>
 8003884:	2b30      	cmp	r3, #48	; 0x30
 8003886:	d86b      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x1c0>
 8003888:	2b20      	cmp	r3, #32
 800388a:	d060      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x1ae>
 800388c:	2b20      	cmp	r3, #32
 800388e:	d867      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x1c0>
 8003890:	2b00      	cmp	r3, #0
 8003892:	d05c      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x1ae>
 8003894:	2b10      	cmp	r3, #16
 8003896:	d05a      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x1ae>
 8003898:	e062      	b.n	8003960 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6899      	ldr	r1, [r3, #8]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f000 fe6b 	bl	8004584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	609a      	str	r2, [r3, #8]
      break;
 80038c6:	e04f      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6818      	ldr	r0, [r3, #0]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	6899      	ldr	r1, [r3, #8]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f000 fe54 	bl	8004584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ea:	609a      	str	r2, [r3, #8]
      break;
 80038ec:	e03c      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6859      	ldr	r1, [r3, #4]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	461a      	mov	r2, r3
 80038fc:	f000 fdc6 	bl	800448c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2150      	movs	r1, #80	; 0x50
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fe1f 	bl	800454a <TIM_ITRx_SetConfig>
      break;
 800390c:	e02c      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6859      	ldr	r1, [r3, #4]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	461a      	mov	r2, r3
 800391c:	f000 fde5 	bl	80044ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2160      	movs	r1, #96	; 0x60
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fe0f 	bl	800454a <TIM_ITRx_SetConfig>
      break;
 800392c:	e01c      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6859      	ldr	r1, [r3, #4]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	461a      	mov	r2, r3
 800393c:	f000 fda6 	bl	800448c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2140      	movs	r1, #64	; 0x40
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fdff 	bl	800454a <TIM_ITRx_SetConfig>
      break;
 800394c:	e00c      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4619      	mov	r1, r3
 8003958:	4610      	mov	r0, r2
 800395a:	f000 fdf6 	bl	800454a <TIM_ITRx_SetConfig>
      break;
 800395e:	e003      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
      break;
 8003964:	e000      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	00100070 	.word	0x00100070
 8003988:	00100040 	.word	0x00100040
 800398c:	00100030 	.word	0x00100030
 8003990:	00100020 	.word	0x00100020

08003994 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_TIM_SlaveConfigSynchro+0x18>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e031      	b.n	8003a10 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80039bc:	6839      	ldr	r1, [r7, #0]
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fca0 	bl	8004304 <TIM_SlaveTimer_SetConfig>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e018      	b.n	8003a10 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ec:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039fc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d107      	bne.n	8003a7c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a7a:	e02a      	b.n	8003ad2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d107      	bne.n	8003a96 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a94:	e01d      	b.n	8003ad2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d107      	bne.n	8003ab0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aae:	e010      	b.n	8003ad2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d107      	bne.n	8003aca <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2208      	movs	r2, #8
 8003abe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ac8:	e003      	b.n	8003ad2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f7ff ffb4 	bl	8003a40 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	771a      	strb	r2, [r3, #28]
}
 8003ade:	bf00      	nop
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d10b      	bne.n	8003b16 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d136      	bne.n	8003b7a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b14:	e031      	b.n	8003b7a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d10b      	bne.n	8003b38 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2202      	movs	r2, #2
 8003b24:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d125      	bne.n	8003b7a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b36:	e020      	b.n	8003b7a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d10b      	bne.n	8003b5a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2204      	movs	r2, #4
 8003b46:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d114      	bne.n	8003b7a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b58:	e00f      	b.n	8003b7a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d10a      	bne.n	8003b7a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2208      	movs	r2, #8
 8003b68:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d103      	bne.n	8003b7a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f7ff ff4c 	bl	8003a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	771a      	strb	r2, [r3, #28]
}
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d103      	bne.n	8003bae <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	771a      	strb	r2, [r3, #28]
 8003bac:	e019      	b.n	8003be2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d103      	bne.n	8003bc0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	771a      	strb	r2, [r3, #28]
 8003bbe:	e010      	b.n	8003be2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d103      	bne.n	8003bd2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2204      	movs	r2, #4
 8003bce:	771a      	strb	r2, [r3, #28]
 8003bd0:	e007      	b.n	8003be2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d102      	bne.n	8003be2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2208      	movs	r2, #8
 8003be0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7ff ff22 	bl	8003a2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	771a      	strb	r2, [r3, #28]
}
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a3c      	ldr	r2, [pc, #240]	; (8003cfc <TIM_Base_SetConfig+0x104>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00f      	beq.n	8003c30 <TIM_Base_SetConfig+0x38>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c16:	d00b      	beq.n	8003c30 <TIM_Base_SetConfig+0x38>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a39      	ldr	r2, [pc, #228]	; (8003d00 <TIM_Base_SetConfig+0x108>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d007      	beq.n	8003c30 <TIM_Base_SetConfig+0x38>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a38      	ldr	r2, [pc, #224]	; (8003d04 <TIM_Base_SetConfig+0x10c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_Base_SetConfig+0x38>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a37      	ldr	r2, [pc, #220]	; (8003d08 <TIM_Base_SetConfig+0x110>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d108      	bne.n	8003c42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a2d      	ldr	r2, [pc, #180]	; (8003cfc <TIM_Base_SetConfig+0x104>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d01b      	beq.n	8003c82 <TIM_Base_SetConfig+0x8a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c50:	d017      	beq.n	8003c82 <TIM_Base_SetConfig+0x8a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a2a      	ldr	r2, [pc, #168]	; (8003d00 <TIM_Base_SetConfig+0x108>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d013      	beq.n	8003c82 <TIM_Base_SetConfig+0x8a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a29      	ldr	r2, [pc, #164]	; (8003d04 <TIM_Base_SetConfig+0x10c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00f      	beq.n	8003c82 <TIM_Base_SetConfig+0x8a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a28      	ldr	r2, [pc, #160]	; (8003d08 <TIM_Base_SetConfig+0x110>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00b      	beq.n	8003c82 <TIM_Base_SetConfig+0x8a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a27      	ldr	r2, [pc, #156]	; (8003d0c <TIM_Base_SetConfig+0x114>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d007      	beq.n	8003c82 <TIM_Base_SetConfig+0x8a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a26      	ldr	r2, [pc, #152]	; (8003d10 <TIM_Base_SetConfig+0x118>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d003      	beq.n	8003c82 <TIM_Base_SetConfig+0x8a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a25      	ldr	r2, [pc, #148]	; (8003d14 <TIM_Base_SetConfig+0x11c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d108      	bne.n	8003c94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a10      	ldr	r2, [pc, #64]	; (8003cfc <TIM_Base_SetConfig+0x104>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00f      	beq.n	8003ce0 <TIM_Base_SetConfig+0xe8>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a11      	ldr	r2, [pc, #68]	; (8003d08 <TIM_Base_SetConfig+0x110>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00b      	beq.n	8003ce0 <TIM_Base_SetConfig+0xe8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a10      	ldr	r2, [pc, #64]	; (8003d0c <TIM_Base_SetConfig+0x114>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d007      	beq.n	8003ce0 <TIM_Base_SetConfig+0xe8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a0f      	ldr	r2, [pc, #60]	; (8003d10 <TIM_Base_SetConfig+0x118>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d003      	beq.n	8003ce0 <TIM_Base_SetConfig+0xe8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a0e      	ldr	r2, [pc, #56]	; (8003d14 <TIM_Base_SetConfig+0x11c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d103      	bne.n	8003ce8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	615a      	str	r2, [r3, #20]
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40012c00 	.word	0x40012c00
 8003d00:	40000400 	.word	0x40000400
 8003d04:	40000800 	.word	0x40000800
 8003d08:	40013400 	.word	0x40013400
 8003d0c:	40014000 	.word	0x40014000
 8003d10:	40014400 	.word	0x40014400
 8003d14:	40014800 	.word	0x40014800

08003d18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f023 0201 	bic.w	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0303 	bic.w	r3, r3, #3
 8003d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f023 0302 	bic.w	r3, r3, #2
 8003d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a2c      	ldr	r2, [pc, #176]	; (8003e24 <TIM_OC1_SetConfig+0x10c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00f      	beq.n	8003d98 <TIM_OC1_SetConfig+0x80>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a2b      	ldr	r2, [pc, #172]	; (8003e28 <TIM_OC1_SetConfig+0x110>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00b      	beq.n	8003d98 <TIM_OC1_SetConfig+0x80>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a2a      	ldr	r2, [pc, #168]	; (8003e2c <TIM_OC1_SetConfig+0x114>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d007      	beq.n	8003d98 <TIM_OC1_SetConfig+0x80>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a29      	ldr	r2, [pc, #164]	; (8003e30 <TIM_OC1_SetConfig+0x118>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d003      	beq.n	8003d98 <TIM_OC1_SetConfig+0x80>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a28      	ldr	r2, [pc, #160]	; (8003e34 <TIM_OC1_SetConfig+0x11c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d10c      	bne.n	8003db2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f023 0308 	bic.w	r3, r3, #8
 8003d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f023 0304 	bic.w	r3, r3, #4
 8003db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1b      	ldr	r2, [pc, #108]	; (8003e24 <TIM_OC1_SetConfig+0x10c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00f      	beq.n	8003dda <TIM_OC1_SetConfig+0xc2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a1a      	ldr	r2, [pc, #104]	; (8003e28 <TIM_OC1_SetConfig+0x110>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00b      	beq.n	8003dda <TIM_OC1_SetConfig+0xc2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a19      	ldr	r2, [pc, #100]	; (8003e2c <TIM_OC1_SetConfig+0x114>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d007      	beq.n	8003dda <TIM_OC1_SetConfig+0xc2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a18      	ldr	r2, [pc, #96]	; (8003e30 <TIM_OC1_SetConfig+0x118>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d003      	beq.n	8003dda <TIM_OC1_SetConfig+0xc2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a17      	ldr	r2, [pc, #92]	; (8003e34 <TIM_OC1_SetConfig+0x11c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d111      	bne.n	8003dfe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	621a      	str	r2, [r3, #32]
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	40013400 	.word	0x40013400
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	40014400 	.word	0x40014400
 8003e34:	40014800 	.word	0x40014800

08003e38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	f023 0210 	bic.w	r2, r3, #16
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f023 0320 	bic.w	r3, r3, #32
 8003e86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a28      	ldr	r2, [pc, #160]	; (8003f38 <TIM_OC2_SetConfig+0x100>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_OC2_SetConfig+0x6c>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a27      	ldr	r2, [pc, #156]	; (8003f3c <TIM_OC2_SetConfig+0x104>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d10d      	bne.n	8003ec0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ebe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a1d      	ldr	r2, [pc, #116]	; (8003f38 <TIM_OC2_SetConfig+0x100>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00f      	beq.n	8003ee8 <TIM_OC2_SetConfig+0xb0>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a1c      	ldr	r2, [pc, #112]	; (8003f3c <TIM_OC2_SetConfig+0x104>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00b      	beq.n	8003ee8 <TIM_OC2_SetConfig+0xb0>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a1b      	ldr	r2, [pc, #108]	; (8003f40 <TIM_OC2_SetConfig+0x108>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d007      	beq.n	8003ee8 <TIM_OC2_SetConfig+0xb0>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a1a      	ldr	r2, [pc, #104]	; (8003f44 <TIM_OC2_SetConfig+0x10c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d003      	beq.n	8003ee8 <TIM_OC2_SetConfig+0xb0>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a19      	ldr	r2, [pc, #100]	; (8003f48 <TIM_OC2_SetConfig+0x110>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d113      	bne.n	8003f10 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	bf00      	nop
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40013400 	.word	0x40013400
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800

08003f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a27      	ldr	r2, [pc, #156]	; (8004048 <TIM_OC3_SetConfig+0xfc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_OC3_SetConfig+0x6a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a26      	ldr	r2, [pc, #152]	; (800404c <TIM_OC3_SetConfig+0x100>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d10d      	bne.n	8003fd2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	021b      	lsls	r3, r3, #8
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <TIM_OC3_SetConfig+0xfc>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00f      	beq.n	8003ffa <TIM_OC3_SetConfig+0xae>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	; (800404c <TIM_OC3_SetConfig+0x100>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00b      	beq.n	8003ffa <TIM_OC3_SetConfig+0xae>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a1a      	ldr	r2, [pc, #104]	; (8004050 <TIM_OC3_SetConfig+0x104>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d007      	beq.n	8003ffa <TIM_OC3_SetConfig+0xae>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a19      	ldr	r2, [pc, #100]	; (8004054 <TIM_OC3_SetConfig+0x108>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d003      	beq.n	8003ffa <TIM_OC3_SetConfig+0xae>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a18      	ldr	r2, [pc, #96]	; (8004058 <TIM_OC3_SetConfig+0x10c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d113      	bne.n	8004022 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	621a      	str	r2, [r3, #32]
}
 800403c:	bf00      	nop
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	40012c00 	.word	0x40012c00
 800404c:	40013400 	.word	0x40013400
 8004050:	40014000 	.word	0x40014000
 8004054:	40014400 	.word	0x40014400
 8004058:	40014800 	.word	0x40014800

0800405c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800408a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800408e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	021b      	lsls	r3, r3, #8
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	031b      	lsls	r3, r3, #12
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a28      	ldr	r2, [pc, #160]	; (800415c <TIM_OC4_SetConfig+0x100>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <TIM_OC4_SetConfig+0x6c>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a27      	ldr	r2, [pc, #156]	; (8004160 <TIM_OC4_SetConfig+0x104>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d10d      	bne.n	80040e4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	031b      	lsls	r3, r3, #12
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a1d      	ldr	r2, [pc, #116]	; (800415c <TIM_OC4_SetConfig+0x100>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00f      	beq.n	800410c <TIM_OC4_SetConfig+0xb0>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a1c      	ldr	r2, [pc, #112]	; (8004160 <TIM_OC4_SetConfig+0x104>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00b      	beq.n	800410c <TIM_OC4_SetConfig+0xb0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a1b      	ldr	r2, [pc, #108]	; (8004164 <TIM_OC4_SetConfig+0x108>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d007      	beq.n	800410c <TIM_OC4_SetConfig+0xb0>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a1a      	ldr	r2, [pc, #104]	; (8004168 <TIM_OC4_SetConfig+0x10c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <TIM_OC4_SetConfig+0xb0>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a19      	ldr	r2, [pc, #100]	; (800416c <TIM_OC4_SetConfig+0x110>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d113      	bne.n	8004134 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004112:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800411a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	019b      	lsls	r3, r3, #6
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	019b      	lsls	r3, r3, #6
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	621a      	str	r2, [r3, #32]
}
 800414e:	bf00      	nop
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40012c00 	.word	0x40012c00
 8004160:	40013400 	.word	0x40013400
 8004164:	40014000 	.word	0x40014000
 8004168:	40014400 	.word	0x40014400
 800416c:	40014800 	.word	0x40014800

08004170 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800419e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80041b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	041b      	lsls	r3, r3, #16
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a17      	ldr	r2, [pc, #92]	; (8004224 <TIM_OC5_SetConfig+0xb4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00f      	beq.n	80041ea <TIM_OC5_SetConfig+0x7a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a16      	ldr	r2, [pc, #88]	; (8004228 <TIM_OC5_SetConfig+0xb8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00b      	beq.n	80041ea <TIM_OC5_SetConfig+0x7a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a15      	ldr	r2, [pc, #84]	; (800422c <TIM_OC5_SetConfig+0xbc>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d007      	beq.n	80041ea <TIM_OC5_SetConfig+0x7a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a14      	ldr	r2, [pc, #80]	; (8004230 <TIM_OC5_SetConfig+0xc0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d003      	beq.n	80041ea <TIM_OC5_SetConfig+0x7a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a13      	ldr	r2, [pc, #76]	; (8004234 <TIM_OC5_SetConfig+0xc4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d109      	bne.n	80041fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	621a      	str	r2, [r3, #32]
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40013400 	.word	0x40013400
 800422c:	40014000 	.word	0x40014000
 8004230:	40014400 	.word	0x40014400
 8004234:	40014800 	.word	0x40014800

08004238 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800427e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	051b      	lsls	r3, r3, #20
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <TIM_OC6_SetConfig+0xb8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00f      	beq.n	80042b4 <TIM_OC6_SetConfig+0x7c>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a17      	ldr	r2, [pc, #92]	; (80042f4 <TIM_OC6_SetConfig+0xbc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00b      	beq.n	80042b4 <TIM_OC6_SetConfig+0x7c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a16      	ldr	r2, [pc, #88]	; (80042f8 <TIM_OC6_SetConfig+0xc0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <TIM_OC6_SetConfig+0x7c>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a15      	ldr	r2, [pc, #84]	; (80042fc <TIM_OC6_SetConfig+0xc4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_OC6_SetConfig+0x7c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a14      	ldr	r2, [pc, #80]	; (8004300 <TIM_OC6_SetConfig+0xc8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d109      	bne.n	80042c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	029b      	lsls	r3, r3, #10
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	621a      	str	r2, [r3, #32]
}
 80042e2:	bf00      	nop
 80042e4:	371c      	adds	r7, #28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40012c00 	.word	0x40012c00
 80042f4:	40013400 	.word	0x40013400
 80042f8:	40014000 	.word	0x40014000
 80042fc:	40014400 	.word	0x40014400
 8004300:	40014800 	.word	0x40014800

08004304 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004324:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004336:	f023 0307 	bic.w	r3, r3, #7
 800433a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	4a4a      	ldr	r2, [pc, #296]	; (800447c <TIM_SlaveTimer_SetConfig+0x178>)
 8004354:	4293      	cmp	r3, r2
 8004356:	f000 808a 	beq.w	800446e <TIM_SlaveTimer_SetConfig+0x16a>
 800435a:	4a48      	ldr	r2, [pc, #288]	; (800447c <TIM_SlaveTimer_SetConfig+0x178>)
 800435c:	4293      	cmp	r3, r2
 800435e:	f200 8083 	bhi.w	8004468 <TIM_SlaveTimer_SetConfig+0x164>
 8004362:	4a47      	ldr	r2, [pc, #284]	; (8004480 <TIM_SlaveTimer_SetConfig+0x17c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	f000 8082 	beq.w	800446e <TIM_SlaveTimer_SetConfig+0x16a>
 800436a:	4a45      	ldr	r2, [pc, #276]	; (8004480 <TIM_SlaveTimer_SetConfig+0x17c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d87b      	bhi.n	8004468 <TIM_SlaveTimer_SetConfig+0x164>
 8004370:	4a44      	ldr	r2, [pc, #272]	; (8004484 <TIM_SlaveTimer_SetConfig+0x180>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d07b      	beq.n	800446e <TIM_SlaveTimer_SetConfig+0x16a>
 8004376:	4a43      	ldr	r2, [pc, #268]	; (8004484 <TIM_SlaveTimer_SetConfig+0x180>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d875      	bhi.n	8004468 <TIM_SlaveTimer_SetConfig+0x164>
 800437c:	4a42      	ldr	r2, [pc, #264]	; (8004488 <TIM_SlaveTimer_SetConfig+0x184>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d075      	beq.n	800446e <TIM_SlaveTimer_SetConfig+0x16a>
 8004382:	4a41      	ldr	r2, [pc, #260]	; (8004488 <TIM_SlaveTimer_SetConfig+0x184>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d86f      	bhi.n	8004468 <TIM_SlaveTimer_SetConfig+0x164>
 8004388:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800438c:	d06f      	beq.n	800446e <TIM_SlaveTimer_SetConfig+0x16a>
 800438e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004392:	d869      	bhi.n	8004468 <TIM_SlaveTimer_SetConfig+0x164>
 8004394:	2b70      	cmp	r3, #112	; 0x70
 8004396:	d01a      	beq.n	80043ce <TIM_SlaveTimer_SetConfig+0xca>
 8004398:	2b70      	cmp	r3, #112	; 0x70
 800439a:	d865      	bhi.n	8004468 <TIM_SlaveTimer_SetConfig+0x164>
 800439c:	2b60      	cmp	r3, #96	; 0x60
 800439e:	d059      	beq.n	8004454 <TIM_SlaveTimer_SetConfig+0x150>
 80043a0:	2b60      	cmp	r3, #96	; 0x60
 80043a2:	d861      	bhi.n	8004468 <TIM_SlaveTimer_SetConfig+0x164>
 80043a4:	2b50      	cmp	r3, #80	; 0x50
 80043a6:	d04b      	beq.n	8004440 <TIM_SlaveTimer_SetConfig+0x13c>
 80043a8:	2b50      	cmp	r3, #80	; 0x50
 80043aa:	d85d      	bhi.n	8004468 <TIM_SlaveTimer_SetConfig+0x164>
 80043ac:	2b40      	cmp	r3, #64	; 0x40
 80043ae:	d019      	beq.n	80043e4 <TIM_SlaveTimer_SetConfig+0xe0>
 80043b0:	2b40      	cmp	r3, #64	; 0x40
 80043b2:	d859      	bhi.n	8004468 <TIM_SlaveTimer_SetConfig+0x164>
 80043b4:	2b30      	cmp	r3, #48	; 0x30
 80043b6:	d05a      	beq.n	800446e <TIM_SlaveTimer_SetConfig+0x16a>
 80043b8:	2b30      	cmp	r3, #48	; 0x30
 80043ba:	d855      	bhi.n	8004468 <TIM_SlaveTimer_SetConfig+0x164>
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d056      	beq.n	800446e <TIM_SlaveTimer_SetConfig+0x16a>
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d851      	bhi.n	8004468 <TIM_SlaveTimer_SetConfig+0x164>
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d052      	beq.n	800446e <TIM_SlaveTimer_SetConfig+0x16a>
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d050      	beq.n	800446e <TIM_SlaveTimer_SetConfig+0x16a>
 80043cc:	e04c      	b.n	8004468 <TIM_SlaveTimer_SetConfig+0x164>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68d9      	ldr	r1, [r3, #12]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f000 f8d1 	bl	8004584 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80043e2:	e045      	b.n	8004470 <TIM_SlaveTimer_SetConfig+0x16c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b05      	cmp	r3, #5
 80043ea:	d004      	beq.n	80043f6 <TIM_SlaveTimer_SetConfig+0xf2>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80043f0:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80043f4:	d101      	bne.n	80043fa <TIM_SlaveTimer_SetConfig+0xf6>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e03b      	b.n	8004472 <TIM_SlaveTimer_SetConfig+0x16e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6a1a      	ldr	r2, [r3, #32]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0201 	bic.w	r2, r2, #1
 8004410:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004420:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	4313      	orrs	r3, r2
 800442c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	621a      	str	r2, [r3, #32]
      break;
 800443e:	e017      	b.n	8004470 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	6899      	ldr	r1, [r3, #8]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	461a      	mov	r2, r3
 800444e:	f000 f81d 	bl	800448c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004452:	e00d      	b.n	8004470 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	6899      	ldr	r1, [r3, #8]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	461a      	mov	r2, r3
 8004462:	f000 f842 	bl	80044ea <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004466:	e003      	b.n	8004470 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	75fb      	strb	r3, [r7, #23]
      break;
 800446c:	e000      	b.n	8004470 <TIM_SlaveTimer_SetConfig+0x16c>
      break;
 800446e:	bf00      	nop
  }

  return status;
 8004470:	7dfb      	ldrb	r3, [r7, #23]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	00100070 	.word	0x00100070
 8004480:	00100040 	.word	0x00100040
 8004484:	00100030 	.word	0x00100030
 8004488:	00100020 	.word	0x00100020

0800448c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f023 0201 	bic.w	r2, r3, #1
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f023 030a 	bic.w	r3, r3, #10
 80044c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	621a      	str	r2, [r3, #32]
}
 80044de:	bf00      	nop
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b087      	sub	sp, #28
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	f023 0210 	bic.w	r2, r3, #16
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004514:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	031b      	lsls	r3, r3, #12
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004526:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	621a      	str	r2, [r3, #32]
}
 800453e:	bf00      	nop
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800454a:	b480      	push	{r7}
 800454c:	b085      	sub	sp, #20
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	f043 0307 	orr.w	r3, r3, #7
 8004570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	609a      	str	r2, [r3, #8]
}
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800459e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	021a      	lsls	r2, r3, #8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	609a      	str	r2, [r3, #8]
}
 80045b8:	bf00      	nop
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	2201      	movs	r2, #1
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a1a      	ldr	r2, [r3, #32]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	43db      	mvns	r3, r3
 80045e6:	401a      	ands	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	fa01 f303 	lsl.w	r3, r1, r3
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	621a      	str	r2, [r3, #32]
}
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004624:	2302      	movs	r3, #2
 8004626:	e065      	b.n	80046f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a2c      	ldr	r2, [pc, #176]	; (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d004      	beq.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a2b      	ldr	r2, [pc, #172]	; (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d108      	bne.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004662:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004678:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d018      	beq.n	80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469e:	d013      	beq.n	80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a18      	ldr	r2, [pc, #96]	; (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00e      	beq.n	80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a17      	ldr	r2, [pc, #92]	; (800470c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d009      	beq.n	80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a12      	ldr	r2, [pc, #72]	; (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a13      	ldr	r2, [pc, #76]	; (8004710 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d10c      	bne.n	80046e2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	40012c00 	.word	0x40012c00
 8004704:	40013400 	.word	0x40013400
 8004708:	40000400 	.word	0x40000400
 800470c:	40000800 	.word	0x40000800
 8004710:	40014000 	.word	0x40014000

08004714 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800472c:	2302      	movs	r3, #2
 800472e:	e087      	b.n	8004840 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	4313      	orrs	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	041b      	lsls	r3, r3, #16
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a27      	ldr	r2, [pc, #156]	; (800484c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a25      	ldr	r2, [pc, #148]	; (8004850 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d106      	bne.n	80047cc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1e      	ldr	r2, [pc, #120]	; (800484c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a1d      	ldr	r2, [pc, #116]	; (8004850 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d126      	bne.n	800482e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	051b      	lsls	r3, r3, #20
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a0e      	ldr	r2, [pc, #56]	; (800484c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a0d      	ldr	r2, [pc, #52]	; (8004850 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d106      	bne.n	800482e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	40012c00 	.word	0x40012c00
 8004850:	40013400 	.word	0x40013400

08004854 <HAL_TIMEx_RemapConfig>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  __HAL_LOCK(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_TIMEx_RemapConfig+0x18>
 8004868:	2302      	movs	r3, #2
 800486a:	e012      	b.n	8004892 <HAL_TIMEx_RemapConfig+0x3e>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  MODIFY_REG(htim->Instance->AF1, TIM1_AF1_ETRSEL_Msk, Remap);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487a:	f423 3170 	bic.w	r1, r3, #245760	; 0x3c000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e042      	b.n	8004936 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fc fbc8 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2224      	movs	r2, #36	; 0x24
 80048cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0201 	bic.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f82d 	bl	8004940 <UART_SetConfig>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e022      	b.n	8004936 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 faed 	bl	8004ed8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800490c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800491c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f042 0201 	orr.w	r2, r2, #1
 800492c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fb74 	bl	800501c <UART_CheckIdleState>
 8004934:	4603      	mov	r3, r0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004944:	b08c      	sub	sp, #48	; 0x30
 8004946:	af00      	add	r7, sp, #0
 8004948:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	431a      	orrs	r2, r3
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	431a      	orrs	r2, r3
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	4313      	orrs	r3, r2
 8004966:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	4bab      	ldr	r3, [pc, #684]	; (8004c1c <UART_SetConfig+0x2dc>)
 8004970:	4013      	ands	r3, r2
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	6812      	ldr	r2, [r2, #0]
 8004976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004978:	430b      	orrs	r3, r1
 800497a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4aa0      	ldr	r2, [pc, #640]	; (8004c20 <UART_SetConfig+0x2e0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d004      	beq.n	80049ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049a8:	4313      	orrs	r3, r2
 80049aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80049b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049c0:	430b      	orrs	r3, r1
 80049c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	f023 010f 	bic.w	r1, r3, #15
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a91      	ldr	r2, [pc, #580]	; (8004c24 <UART_SetConfig+0x2e4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d125      	bne.n	8004a30 <UART_SetConfig+0xf0>
 80049e4:	4b90      	ldr	r3, [pc, #576]	; (8004c28 <UART_SetConfig+0x2e8>)
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d81a      	bhi.n	8004a28 <UART_SetConfig+0xe8>
 80049f2:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <UART_SetConfig+0xb8>)
 80049f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f8:	08004a09 	.word	0x08004a09
 80049fc:	08004a19 	.word	0x08004a19
 8004a00:	08004a11 	.word	0x08004a11
 8004a04:	08004a21 	.word	0x08004a21
 8004a08:	2301      	movs	r3, #1
 8004a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a0e:	e0d6      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004a10:	2302      	movs	r3, #2
 8004a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a16:	e0d2      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004a18:	2304      	movs	r3, #4
 8004a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a1e:	e0ce      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004a20:	2308      	movs	r3, #8
 8004a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a26:	e0ca      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004a28:	2310      	movs	r3, #16
 8004a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a2e:	e0c6      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a7d      	ldr	r2, [pc, #500]	; (8004c2c <UART_SetConfig+0x2ec>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d138      	bne.n	8004aac <UART_SetConfig+0x16c>
 8004a3a:	4b7b      	ldr	r3, [pc, #492]	; (8004c28 <UART_SetConfig+0x2e8>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b0c      	cmp	r3, #12
 8004a46:	d82d      	bhi.n	8004aa4 <UART_SetConfig+0x164>
 8004a48:	a201      	add	r2, pc, #4	; (adr r2, 8004a50 <UART_SetConfig+0x110>)
 8004a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4e:	bf00      	nop
 8004a50:	08004a85 	.word	0x08004a85
 8004a54:	08004aa5 	.word	0x08004aa5
 8004a58:	08004aa5 	.word	0x08004aa5
 8004a5c:	08004aa5 	.word	0x08004aa5
 8004a60:	08004a95 	.word	0x08004a95
 8004a64:	08004aa5 	.word	0x08004aa5
 8004a68:	08004aa5 	.word	0x08004aa5
 8004a6c:	08004aa5 	.word	0x08004aa5
 8004a70:	08004a8d 	.word	0x08004a8d
 8004a74:	08004aa5 	.word	0x08004aa5
 8004a78:	08004aa5 	.word	0x08004aa5
 8004a7c:	08004aa5 	.word	0x08004aa5
 8004a80:	08004a9d 	.word	0x08004a9d
 8004a84:	2300      	movs	r3, #0
 8004a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a8a:	e098      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a92:	e094      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004a94:	2304      	movs	r3, #4
 8004a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a9a:	e090      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004a9c:	2308      	movs	r3, #8
 8004a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa2:	e08c      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aaa:	e088      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a5f      	ldr	r2, [pc, #380]	; (8004c30 <UART_SetConfig+0x2f0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d125      	bne.n	8004b02 <UART_SetConfig+0x1c2>
 8004ab6:	4b5c      	ldr	r3, [pc, #368]	; (8004c28 <UART_SetConfig+0x2e8>)
 8004ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ac0:	2b30      	cmp	r3, #48	; 0x30
 8004ac2:	d016      	beq.n	8004af2 <UART_SetConfig+0x1b2>
 8004ac4:	2b30      	cmp	r3, #48	; 0x30
 8004ac6:	d818      	bhi.n	8004afa <UART_SetConfig+0x1ba>
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	d00a      	beq.n	8004ae2 <UART_SetConfig+0x1a2>
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d814      	bhi.n	8004afa <UART_SetConfig+0x1ba>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <UART_SetConfig+0x19a>
 8004ad4:	2b10      	cmp	r3, #16
 8004ad6:	d008      	beq.n	8004aea <UART_SetConfig+0x1aa>
 8004ad8:	e00f      	b.n	8004afa <UART_SetConfig+0x1ba>
 8004ada:	2300      	movs	r3, #0
 8004adc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ae0:	e06d      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ae8:	e069      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004aea:	2304      	movs	r3, #4
 8004aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004af0:	e065      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004af2:	2308      	movs	r3, #8
 8004af4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004af8:	e061      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004afa:	2310      	movs	r3, #16
 8004afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b00:	e05d      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a4b      	ldr	r2, [pc, #300]	; (8004c34 <UART_SetConfig+0x2f4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d125      	bne.n	8004b58 <UART_SetConfig+0x218>
 8004b0c:	4b46      	ldr	r3, [pc, #280]	; (8004c28 <UART_SetConfig+0x2e8>)
 8004b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b16:	2bc0      	cmp	r3, #192	; 0xc0
 8004b18:	d016      	beq.n	8004b48 <UART_SetConfig+0x208>
 8004b1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b1c:	d818      	bhi.n	8004b50 <UART_SetConfig+0x210>
 8004b1e:	2b80      	cmp	r3, #128	; 0x80
 8004b20:	d00a      	beq.n	8004b38 <UART_SetConfig+0x1f8>
 8004b22:	2b80      	cmp	r3, #128	; 0x80
 8004b24:	d814      	bhi.n	8004b50 <UART_SetConfig+0x210>
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <UART_SetConfig+0x1f0>
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	d008      	beq.n	8004b40 <UART_SetConfig+0x200>
 8004b2e:	e00f      	b.n	8004b50 <UART_SetConfig+0x210>
 8004b30:	2300      	movs	r3, #0
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b36:	e042      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3e:	e03e      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004b40:	2304      	movs	r3, #4
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b46:	e03a      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004b48:	2308      	movs	r3, #8
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4e:	e036      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004b50:	2310      	movs	r3, #16
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b56:	e032      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a30      	ldr	r2, [pc, #192]	; (8004c20 <UART_SetConfig+0x2e0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d12a      	bne.n	8004bb8 <UART_SetConfig+0x278>
 8004b62:	4b31      	ldr	r3, [pc, #196]	; (8004c28 <UART_SetConfig+0x2e8>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b70:	d01a      	beq.n	8004ba8 <UART_SetConfig+0x268>
 8004b72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b76:	d81b      	bhi.n	8004bb0 <UART_SetConfig+0x270>
 8004b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b7c:	d00c      	beq.n	8004b98 <UART_SetConfig+0x258>
 8004b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b82:	d815      	bhi.n	8004bb0 <UART_SetConfig+0x270>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <UART_SetConfig+0x250>
 8004b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8c:	d008      	beq.n	8004ba0 <UART_SetConfig+0x260>
 8004b8e:	e00f      	b.n	8004bb0 <UART_SetConfig+0x270>
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b96:	e012      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b9e:	e00e      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba6:	e00a      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004ba8:	2308      	movs	r3, #8
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bae:	e006      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb6:	e002      	b.n	8004bbe <UART_SetConfig+0x27e>
 8004bb8:	2310      	movs	r3, #16
 8004bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a17      	ldr	r2, [pc, #92]	; (8004c20 <UART_SetConfig+0x2e0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	f040 80a8 	bne.w	8004d1a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d834      	bhi.n	8004c3c <UART_SetConfig+0x2fc>
 8004bd2:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <UART_SetConfig+0x298>)
 8004bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd8:	08004bfd 	.word	0x08004bfd
 8004bdc:	08004c3d 	.word	0x08004c3d
 8004be0:	08004c05 	.word	0x08004c05
 8004be4:	08004c3d 	.word	0x08004c3d
 8004be8:	08004c0b 	.word	0x08004c0b
 8004bec:	08004c3d 	.word	0x08004c3d
 8004bf0:	08004c3d 	.word	0x08004c3d
 8004bf4:	08004c3d 	.word	0x08004c3d
 8004bf8:	08004c13 	.word	0x08004c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bfc:	f7fd feae 	bl	800295c <HAL_RCC_GetPCLK1Freq>
 8004c00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c02:	e021      	b.n	8004c48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c04:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <UART_SetConfig+0x2f8>)
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c08:	e01e      	b.n	8004c48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c0a:	f7fd fe39 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8004c0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c10:	e01a      	b.n	8004c48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c18:	e016      	b.n	8004c48 <UART_SetConfig+0x308>
 8004c1a:	bf00      	nop
 8004c1c:	cfff69f3 	.word	0xcfff69f3
 8004c20:	40008000 	.word	0x40008000
 8004c24:	40013800 	.word	0x40013800
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40004400 	.word	0x40004400
 8004c30:	40004800 	.word	0x40004800
 8004c34:	40004c00 	.word	0x40004c00
 8004c38:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c46:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 812a 	beq.w	8004ea4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	4a9e      	ldr	r2, [pc, #632]	; (8004ed0 <UART_SetConfig+0x590>)
 8004c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c62:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	4413      	add	r3, r2
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d305      	bcc.n	8004c80 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d903      	bls.n	8004c88 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c86:	e10d      	b.n	8004ea4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	60fa      	str	r2, [r7, #12]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	4a8e      	ldr	r2, [pc, #568]	; (8004ed0 <UART_SetConfig+0x590>)
 8004c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	607a      	str	r2, [r7, #4]
 8004ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ca6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004caa:	f7fb fab5 	bl	8000218 <__aeabi_uldivmod>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	020b      	lsls	r3, r1, #8
 8004cc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cc4:	0202      	lsls	r2, r0, #8
 8004cc6:	6979      	ldr	r1, [r7, #20]
 8004cc8:	6849      	ldr	r1, [r1, #4]
 8004cca:	0849      	lsrs	r1, r1, #1
 8004ccc:	2000      	movs	r0, #0
 8004cce:	460c      	mov	r4, r1
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	eb12 0804 	adds.w	r8, r2, r4
 8004cd6:	eb43 0905 	adc.w	r9, r3, r5
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	469a      	mov	sl, r3
 8004ce2:	4693      	mov	fp, r2
 8004ce4:	4652      	mov	r2, sl
 8004ce6:	465b      	mov	r3, fp
 8004ce8:	4640      	mov	r0, r8
 8004cea:	4649      	mov	r1, r9
 8004cec:	f7fb fa94 	bl	8000218 <__aeabi_uldivmod>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cfe:	d308      	bcc.n	8004d12 <UART_SetConfig+0x3d2>
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d06:	d204      	bcs.n	8004d12 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6a3a      	ldr	r2, [r7, #32]
 8004d0e:	60da      	str	r2, [r3, #12]
 8004d10:	e0c8      	b.n	8004ea4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d18:	e0c4      	b.n	8004ea4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d22:	d167      	bne.n	8004df4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004d24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d828      	bhi.n	8004d7e <UART_SetConfig+0x43e>
 8004d2c:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <UART_SetConfig+0x3f4>)
 8004d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d32:	bf00      	nop
 8004d34:	08004d59 	.word	0x08004d59
 8004d38:	08004d61 	.word	0x08004d61
 8004d3c:	08004d69 	.word	0x08004d69
 8004d40:	08004d7f 	.word	0x08004d7f
 8004d44:	08004d6f 	.word	0x08004d6f
 8004d48:	08004d7f 	.word	0x08004d7f
 8004d4c:	08004d7f 	.word	0x08004d7f
 8004d50:	08004d7f 	.word	0x08004d7f
 8004d54:	08004d77 	.word	0x08004d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d58:	f7fd fe00 	bl	800295c <HAL_RCC_GetPCLK1Freq>
 8004d5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d5e:	e014      	b.n	8004d8a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d60:	f7fd fe12 	bl	8002988 <HAL_RCC_GetPCLK2Freq>
 8004d64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d66:	e010      	b.n	8004d8a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d68:	4b5a      	ldr	r3, [pc, #360]	; (8004ed4 <UART_SetConfig+0x594>)
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d6c:	e00d      	b.n	8004d8a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d6e:	f7fd fd87 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8004d72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d74:	e009      	b.n	8004d8a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d7c:	e005      	b.n	8004d8a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8089 	beq.w	8004ea4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	4a4e      	ldr	r2, [pc, #312]	; (8004ed0 <UART_SetConfig+0x590>)
 8004d98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004da4:	005a      	lsls	r2, r3, #1
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	441a      	add	r2, r3
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	2b0f      	cmp	r3, #15
 8004dbc:	d916      	bls.n	8004dec <UART_SetConfig+0x4ac>
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc4:	d212      	bcs.n	8004dec <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f023 030f 	bic.w	r3, r3, #15
 8004dce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	085b      	lsrs	r3, r3, #1
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	8bfb      	ldrh	r3, [r7, #30]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	8bfa      	ldrh	r2, [r7, #30]
 8004de8:	60da      	str	r2, [r3, #12]
 8004dea:	e05b      	b.n	8004ea4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004df2:	e057      	b.n	8004ea4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004df4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d828      	bhi.n	8004e4e <UART_SetConfig+0x50e>
 8004dfc:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <UART_SetConfig+0x4c4>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e29 	.word	0x08004e29
 8004e08:	08004e31 	.word	0x08004e31
 8004e0c:	08004e39 	.word	0x08004e39
 8004e10:	08004e4f 	.word	0x08004e4f
 8004e14:	08004e3f 	.word	0x08004e3f
 8004e18:	08004e4f 	.word	0x08004e4f
 8004e1c:	08004e4f 	.word	0x08004e4f
 8004e20:	08004e4f 	.word	0x08004e4f
 8004e24:	08004e47 	.word	0x08004e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e28:	f7fd fd98 	bl	800295c <HAL_RCC_GetPCLK1Freq>
 8004e2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e2e:	e014      	b.n	8004e5a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e30:	f7fd fdaa 	bl	8002988 <HAL_RCC_GetPCLK2Freq>
 8004e34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e36:	e010      	b.n	8004e5a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e38:	4b26      	ldr	r3, [pc, #152]	; (8004ed4 <UART_SetConfig+0x594>)
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e3c:	e00d      	b.n	8004e5a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3e:	f7fd fd1f 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8004e42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e44:	e009      	b.n	8004e5a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e4c:	e005      	b.n	8004e5a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e58:	bf00      	nop
    }

    if (pclk != 0U)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d021      	beq.n	8004ea4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	4a1a      	ldr	r2, [pc, #104]	; (8004ed0 <UART_SetConfig+0x590>)
 8004e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	085b      	lsrs	r3, r3, #1
 8004e78:	441a      	add	r2, r3
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	2b0f      	cmp	r3, #15
 8004e88:	d909      	bls.n	8004e9e <UART_SetConfig+0x55e>
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e90:	d205      	bcs.n	8004e9e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60da      	str	r2, [r3, #12]
 8004e9c:	e002      	b.n	8004ea4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004ec0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3730      	adds	r7, #48	; 0x30
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ece:	bf00      	nop
 8004ed0:	080054d0 	.word	0x080054d0
 8004ed4:	00f42400 	.word	0x00f42400

08004ed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01a      	beq.n	8004fee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fd6:	d10a      	bne.n	8004fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	605a      	str	r2, [r3, #4]
  }
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af02      	add	r7, sp, #8
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800502c:	f7fc f994 	bl	8001358 <HAL_GetTick>
 8005030:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b08      	cmp	r3, #8
 800503e:	d10e      	bne.n	800505e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f82f 	bl	80050b2 <UART_WaitOnFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e025      	b.n	80050aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b04      	cmp	r3, #4
 800506a:	d10e      	bne.n	800508a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800506c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f819 	bl	80050b2 <UART_WaitOnFlagUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e00f      	b.n	80050aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b09c      	sub	sp, #112	; 0x70
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	603b      	str	r3, [r7, #0]
 80050be:	4613      	mov	r3, r2
 80050c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c2:	e0a9      	b.n	8005218 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ca:	f000 80a5 	beq.w	8005218 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ce:	f7fc f943 	bl	8001358 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050da:	429a      	cmp	r2, r3
 80050dc:	d302      	bcc.n	80050e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80050de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d140      	bne.n	8005166 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050f8:	667b      	str	r3, [r7, #100]	; 0x64
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005102:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005104:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005108:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e6      	bne.n	80050e4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3308      	adds	r3, #8
 800511c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	f023 0301 	bic.w	r3, r3, #1
 800512c:	663b      	str	r3, [r7, #96]	; 0x60
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3308      	adds	r3, #8
 8005134:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005136:	64ba      	str	r2, [r7, #72]	; 0x48
 8005138:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800513c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e5      	bne.n	8005116 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2220      	movs	r2, #32
 800514e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2220      	movs	r2, #32
 8005156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e069      	b.n	800523a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d051      	beq.n	8005218 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005182:	d149      	bne.n	8005218 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800518c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ac:	637b      	str	r3, [r7, #52]	; 0x34
 80051ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e6      	bne.n	800518e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3308      	adds	r3, #8
 80051c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	613b      	str	r3, [r7, #16]
   return(result);
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f023 0301 	bic.w	r3, r3, #1
 80051d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3308      	adds	r3, #8
 80051de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051e0:	623a      	str	r2, [r7, #32]
 80051e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	69f9      	ldr	r1, [r7, #28]
 80051e6:	6a3a      	ldr	r2, [r7, #32]
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e5      	bne.n	80051c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e010      	b.n	800523a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69da      	ldr	r2, [r3, #28]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4013      	ands	r3, r2
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	429a      	cmp	r2, r3
 8005226:	bf0c      	ite	eq
 8005228:	2301      	moveq	r3, #1
 800522a:	2300      	movne	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	461a      	mov	r2, r3
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	429a      	cmp	r2, r3
 8005234:	f43f af46 	beq.w	80050c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3770      	adds	r7, #112	; 0x70
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_UARTEx_DisableFifoMode+0x16>
 8005254:	2302      	movs	r3, #2
 8005256:	e027      	b.n	80052a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2224      	movs	r2, #36	; 0x24
 8005264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0201 	bic.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005286:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e02d      	b.n	8005328 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2224      	movs	r2, #36	; 0x24
 80052d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0201 	bic.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f84f 	bl	80053ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005344:	2302      	movs	r3, #2
 8005346:	e02d      	b.n	80053a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2224      	movs	r2, #36	; 0x24
 8005354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0201 	bic.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f811 	bl	80053ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2220      	movs	r2, #32
 8005396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d108      	bne.n	80053ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053cc:	e031      	b.n	8005432 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053ce:	2308      	movs	r3, #8
 80053d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053d2:	2308      	movs	r3, #8
 80053d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	0e5b      	lsrs	r3, r3, #25
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	0f5b      	lsrs	r3, r3, #29
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053f6:	7bbb      	ldrb	r3, [r7, #14]
 80053f8:	7b3a      	ldrb	r2, [r7, #12]
 80053fa:	4911      	ldr	r1, [pc, #68]	; (8005440 <UARTEx_SetNbDataToProcess+0x94>)
 80053fc:	5c8a      	ldrb	r2, [r1, r2]
 80053fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005402:	7b3a      	ldrb	r2, [r7, #12]
 8005404:	490f      	ldr	r1, [pc, #60]	; (8005444 <UARTEx_SetNbDataToProcess+0x98>)
 8005406:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005408:	fb93 f3f2 	sdiv	r3, r3, r2
 800540c:	b29a      	uxth	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	7b7a      	ldrb	r2, [r7, #13]
 8005418:	4909      	ldr	r1, [pc, #36]	; (8005440 <UARTEx_SetNbDataToProcess+0x94>)
 800541a:	5c8a      	ldrb	r2, [r1, r2]
 800541c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005420:	7b7a      	ldrb	r2, [r7, #13]
 8005422:	4908      	ldr	r1, [pc, #32]	; (8005444 <UARTEx_SetNbDataToProcess+0x98>)
 8005424:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005426:	fb93 f3f2 	sdiv	r3, r3, r2
 800542a:	b29a      	uxth	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005432:	bf00      	nop
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	080054e8 	.word	0x080054e8
 8005444:	080054f0 	.word	0x080054f0

08005448 <__libc_init_array>:
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	4d0d      	ldr	r5, [pc, #52]	; (8005480 <__libc_init_array+0x38>)
 800544c:	4c0d      	ldr	r4, [pc, #52]	; (8005484 <__libc_init_array+0x3c>)
 800544e:	1b64      	subs	r4, r4, r5
 8005450:	10a4      	asrs	r4, r4, #2
 8005452:	2600      	movs	r6, #0
 8005454:	42a6      	cmp	r6, r4
 8005456:	d109      	bne.n	800546c <__libc_init_array+0x24>
 8005458:	4d0b      	ldr	r5, [pc, #44]	; (8005488 <__libc_init_array+0x40>)
 800545a:	4c0c      	ldr	r4, [pc, #48]	; (800548c <__libc_init_array+0x44>)
 800545c:	f000 f820 	bl	80054a0 <_init>
 8005460:	1b64      	subs	r4, r4, r5
 8005462:	10a4      	asrs	r4, r4, #2
 8005464:	2600      	movs	r6, #0
 8005466:	42a6      	cmp	r6, r4
 8005468:	d105      	bne.n	8005476 <__libc_init_array+0x2e>
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005470:	4798      	blx	r3
 8005472:	3601      	adds	r6, #1
 8005474:	e7ee      	b.n	8005454 <__libc_init_array+0xc>
 8005476:	f855 3b04 	ldr.w	r3, [r5], #4
 800547a:	4798      	blx	r3
 800547c:	3601      	adds	r6, #1
 800547e:	e7f2      	b.n	8005466 <__libc_init_array+0x1e>
 8005480:	08005500 	.word	0x08005500
 8005484:	08005500 	.word	0x08005500
 8005488:	08005500 	.word	0x08005500
 800548c:	08005504 	.word	0x08005504

08005490 <memset>:
 8005490:	4402      	add	r2, r0
 8005492:	4603      	mov	r3, r0
 8005494:	4293      	cmp	r3, r2
 8005496:	d100      	bne.n	800549a <memset+0xa>
 8005498:	4770      	bx	lr
 800549a:	f803 1b01 	strb.w	r1, [r3], #1
 800549e:	e7f9      	b.n	8005494 <memset+0x4>

080054a0 <_init>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	bf00      	nop
 80054a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a6:	bc08      	pop	{r3}
 80054a8:	469e      	mov	lr, r3
 80054aa:	4770      	bx	lr

080054ac <_fini>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	bf00      	nop
 80054b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b2:	bc08      	pop	{r3}
 80054b4:	469e      	mov	lr, r3
 80054b6:	4770      	bx	lr
