
BLDC_test_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c98  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005e70  08005e70  00015e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed8  08005ed8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee0  08005ee0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000000c  08005ef4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08005ef4  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ee0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ad  00000000  00000000  00039f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  0003d0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001360  00000000  00000000  0003e528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039a0  00000000  00000000  0003f888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016836  00000000  00000000  00043228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0c0c  00000000  00000000  00059a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a66a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005818  00000000  00000000  0013a6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005e58 	.word	0x08005e58

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005e58 	.word	0x08005e58

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f001 f88f 	bl	8001642 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f81e 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 fa84 	bl	8000a34 <MX_GPIO_Init>
  MX_DMA_Init();
 800052c:	f000 fa48 	bl	80009c0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000530:	f000 f9fa 	bl	8000928 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000534:	f000 f8bc 	bl	80006b0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000538:	f000 f982 	bl	8000840 <MX_TIM3_Init>
  MX_ADC2_Init();
 800053c:	f000 f852 	bl	80005e4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  ADC_Enable(&hadc2);
 8000540:	4806      	ldr	r0, [pc, #24]	; (800055c <main+0x40>)
 8000542:	f002 f857 	bl	80025f4 <ADC_Enable>
  main_cpp();
 8000546:	f000 fe73 	bl	8001230 <main_cpp>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    damy++;
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <main+0x44>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	3301      	adds	r3, #1
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b02      	ldr	r3, [pc, #8]	; (8000560 <main+0x44>)
 8000556:	701a      	strb	r2, [r3, #0]
 8000558:	e7f7      	b.n	800054a <main+0x2e>
 800055a:	bf00      	nop
 800055c:	20000028 	.word	0x20000028
 8000560:	2000027c 	.word	0x2000027c

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0318 	add.w	r3, r7, #24
 800056e:	2238      	movs	r2, #56	; 0x38
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f005 fc68 	bl	8005e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000586:	f44f 7000 	mov.w	r0, #512	; 0x200
 800058a:	f002 fd4b 	bl	8003024 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058e:	2302      	movs	r3, #2
 8000590:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000596:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2340      	movs	r3, #64	; 0x40
 800059a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800059c:	2300      	movs	r3, #0
 800059e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0318 	add.w	r3, r7, #24
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fde1 	bl	800316c <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005b0:	f000 fa8c 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b8:	2301      	movs	r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 f8e5 	bl	800379c <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005d8:	f000 fa78 	bl	8000acc <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3750      	adds	r7, #80	; 0x50
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2220      	movs	r2, #32
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f005 fc29 	bl	8005e48 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80005f6:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <MX_ADC2_Init+0xc0>)
 80005f8:	4a2b      	ldr	r2, [pc, #172]	; (80006a8 <MX_ADC2_Init+0xc4>)
 80005fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005fc:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <MX_ADC2_Init+0xc0>)
 80005fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000602:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000604:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <MX_ADC2_Init+0xc0>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060a:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <MX_ADC2_Init+0xc0>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <MX_ADC2_Init+0xc0>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000616:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <MX_ADC2_Init+0xc0>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800061c:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <MX_ADC2_Init+0xc0>)
 800061e:	2204      	movs	r2, #4
 8000620:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000622:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_ADC2_Init+0xc0>)
 8000624:	2200      	movs	r2, #0
 8000626:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_ADC2_Init+0xc0>)
 800062a:	2200      	movs	r2, #0
 800062c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_ADC2_Init+0xc0>)
 8000630:	2201      	movs	r2, #1
 8000632:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_ADC2_Init+0xc0>)
 8000636:	2200      	movs	r2, #0
 8000638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_ADC2_Init+0xc0>)
 800063e:	2200      	movs	r2, #0
 8000640:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_ADC2_Init+0xc0>)
 8000644:	2200      	movs	r2, #0
 8000646:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_ADC2_Init+0xc0>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_ADC2_Init+0xc0>)
 8000652:	2200      	movs	r2, #0
 8000654:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_ADC2_Init+0xc0>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800065e:	4811      	ldr	r0, [pc, #68]	; (80006a4 <MX_ADC2_Init+0xc0>)
 8000660:	f001 fa4e 	bl	8001b00 <HAL_ADC_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800066a:	f000 fa2f 	bl	8000acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_ADC2_Init+0xc8>)
 8000670:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000672:	2306      	movs	r3, #6
 8000674:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800067a:	237f      	movs	r3, #127	; 0x7f
 800067c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800067e:	2304      	movs	r3, #4
 8000680:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000686:	463b      	mov	r3, r7
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <MX_ADC2_Init+0xc0>)
 800068c:	f001 fbc2 	bl	8001e14 <HAL_ADC_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000696:	f000 fa19 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	3720      	adds	r7, #32
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000028 	.word	0x20000028
 80006a8:	50000100 	.word	0x50000100
 80006ac:	04300002 	.word	0x04300002

080006b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b09c      	sub	sp, #112	; 0x70
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
 80006e0:	615a      	str	r2, [r3, #20]
 80006e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2234      	movs	r2, #52	; 0x34
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f005 fbac 	bl	8005e48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006f0:	4b51      	ldr	r3, [pc, #324]	; (8000838 <MX_TIM1_Init+0x188>)
 80006f2:	4a52      	ldr	r2, [pc, #328]	; (800083c <MX_TIM1_Init+0x18c>)
 80006f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 80006f6:	4b50      	ldr	r3, [pc, #320]	; (8000838 <MX_TIM1_Init+0x188>)
 80006f8:	220a      	movs	r2, #10
 80006fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fc:	4b4e      	ldr	r3, [pc, #312]	; (8000838 <MX_TIM1_Init+0x188>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000702:	4b4d      	ldr	r3, [pc, #308]	; (8000838 <MX_TIM1_Init+0x188>)
 8000704:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000708:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070a:	4b4b      	ldr	r3, [pc, #300]	; (8000838 <MX_TIM1_Init+0x188>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000710:	4b49      	ldr	r3, [pc, #292]	; (8000838 <MX_TIM1_Init+0x188>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000716:	4b48      	ldr	r3, [pc, #288]	; (8000838 <MX_TIM1_Init+0x188>)
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800071c:	4846      	ldr	r0, [pc, #280]	; (8000838 <MX_TIM1_Init+0x188>)
 800071e:	f003 fc49 	bl	8003fb4 <HAL_TIM_Base_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000728:	f000 f9d0 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000730:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000732:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000736:	4619      	mov	r1, r3
 8000738:	483f      	ldr	r0, [pc, #252]	; (8000838 <MX_TIM1_Init+0x188>)
 800073a:	f003 fe07 	bl	800434c <HAL_TIM_ConfigClockSource>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000744:	f000 f9c2 	bl	8000acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000748:	483b      	ldr	r0, [pc, #236]	; (8000838 <MX_TIM1_Init+0x188>)
 800074a:	f003 fc8a 	bl	8004062 <HAL_TIM_PWM_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000754:	f000 f9ba 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000764:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000768:	4619      	mov	r1, r3
 800076a:	4833      	ldr	r0, [pc, #204]	; (8000838 <MX_TIM1_Init+0x188>)
 800076c:	f004 fc2c 	bl	8004fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000776:	f000 f9a9 	bl	8000acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800077a:	2360      	movs	r3, #96	; 0x60
 800077c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000782:	2300      	movs	r3, #0
 8000784:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000786:	2300      	movs	r3, #0
 8000788:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800078e:	2300      	movs	r3, #0
 8000790:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000796:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800079a:	2200      	movs	r2, #0
 800079c:	4619      	mov	r1, r3
 800079e:	4826      	ldr	r0, [pc, #152]	; (8000838 <MX_TIM1_Init+0x188>)
 80007a0:	f003 fcc0 	bl	8004124 <HAL_TIM_PWM_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80007aa:	f000 f98f 	bl	8000acc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007b2:	2204      	movs	r2, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4820      	ldr	r0, [pc, #128]	; (8000838 <MX_TIM1_Init+0x188>)
 80007b8:	f003 fcb4 	bl	8004124 <HAL_TIM_PWM_ConfigChannel>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80007c2:	f000 f983 	bl	8000acc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007ca:	2208      	movs	r2, #8
 80007cc:	4619      	mov	r1, r3
 80007ce:	481a      	ldr	r0, [pc, #104]	; (8000838 <MX_TIM1_Init+0x188>)
 80007d0:	f003 fca8 	bl	8004124 <HAL_TIM_PWM_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80007da:	f000 f977 	bl	8000acc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000804:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	4807      	ldr	r0, [pc, #28]	; (8000838 <MX_TIM1_Init+0x188>)
 800081c:	f004 fc56 	bl	80050cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000826:	f000 f951 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800082a:	4803      	ldr	r0, [pc, #12]	; (8000838 <MX_TIM1_Init+0x188>)
 800082c:	f000 faa0 	bl	8000d70 <HAL_TIM_MspPostInit>

}
 8000830:	bf00      	nop
 8000832:	3770      	adds	r7, #112	; 0x70
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000094 	.word	0x20000094
 800083c:	40012c00 	.word	0x40012c00

08000840 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800086c:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <MX_TIM3_Init+0xe0>)
 800086e:	4a2d      	ldr	r2, [pc, #180]	; (8000924 <MX_TIM3_Init+0xe4>)
 8000870:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000872:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <MX_TIM3_Init+0xe0>)
 8000874:	2200      	movs	r2, #0
 8000876:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000878:	4b29      	ldr	r3, [pc, #164]	; (8000920 <MX_TIM3_Init+0xe0>)
 800087a:	2220      	movs	r2, #32
 800087c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800087e:	4b28      	ldr	r3, [pc, #160]	; (8000920 <MX_TIM3_Init+0xe0>)
 8000880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000884:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000886:	4b26      	ldr	r3, [pc, #152]	; (8000920 <MX_TIM3_Init+0xe0>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088c:	4b24      	ldr	r3, [pc, #144]	; (8000920 <MX_TIM3_Init+0xe0>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000892:	4823      	ldr	r0, [pc, #140]	; (8000920 <MX_TIM3_Init+0xe0>)
 8000894:	f003 fb8e 	bl	8003fb4 <HAL_TIM_Base_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800089e:	f000 f915 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80008a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a6:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sClockSourceConfig.ClockFilter = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008b4:	f107 0320 	add.w	r3, r7, #32
 80008b8:	4619      	mov	r1, r3
 80008ba:	4819      	ldr	r0, [pc, #100]	; (8000920 <MX_TIM3_Init+0xe0>)
 80008bc:	f003 fd46 	bl	800434c <HAL_TIM_ConfigClockSource>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80008c6:	f000 f901 	bl	8000acc <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	4619      	mov	r1, r3
 80008e0:	480f      	ldr	r0, [pc, #60]	; (8000920 <MX_TIM3_Init+0xe0>)
 80008e2:	f004 fab7 	bl	8004e54 <HAL_TIMEx_HallSensor_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80008ec:	f000 f8ee 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80008f0:	2350      	movs	r3, #80	; 0x50
 80008f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4619      	mov	r1, r3
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <MX_TIM3_Init+0xe0>)
 80008fe:	f004 fb63 	bl	8004fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8000908:	f000 f8e0 	bl	8000acc <Error_Handler>
  }
  HAL_TIMEx_RemapConfig(&htim3, TIM_TIM3_ETR_COMP1);
 800090c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000910:	4803      	ldr	r0, [pc, #12]	; (8000920 <MX_TIM3_Init+0xe0>)
 8000912:	f004 fc7b 	bl	800520c <HAL_TIMEx_RemapConfig>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	3730      	adds	r7, #48	; 0x30
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200000e0 	.word	0x200000e0
 8000924:	40000400 	.word	0x40000400

08000928 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <MX_USART2_UART_Init+0x90>)
 800092e:	4a23      	ldr	r2, [pc, #140]	; (80009bc <MX_USART2_UART_Init+0x94>)
 8000930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <MX_USART2_UART_Init+0x90>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_USART2_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <MX_USART2_UART_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_USART2_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_USART2_UART_Init+0x90>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <MX_USART2_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_USART2_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_USART2_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_USART2_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_USART2_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000970:	4811      	ldr	r0, [pc, #68]	; (80009b8 <MX_USART2_UART_Init+0x90>)
 8000972:	f004 fc70 	bl	8005256 <HAL_UART_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800097c:	f000 f8a6 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000980:	2100      	movs	r1, #0
 8000982:	480d      	ldr	r0, [pc, #52]	; (80009b8 <MX_USART2_UART_Init+0x90>)
 8000984:	f005 f972 	bl	8005c6c <HAL_UARTEx_SetTxFifoThreshold>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800098e:	f000 f89d 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000992:	2100      	movs	r1, #0
 8000994:	4808      	ldr	r0, [pc, #32]	; (80009b8 <MX_USART2_UART_Init+0x90>)
 8000996:	f005 f9a7 	bl	8005ce8 <HAL_UARTEx_SetRxFifoThreshold>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009a0:	f000 f894 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_USART2_UART_Init+0x90>)
 80009a6:	f005 f928 	bl	8005bfa <HAL_UARTEx_DisableFifoMode>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009b0:	f000 f88c 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200001ec 	.word	0x200001ec
 80009bc:	40004400 	.word	0x40004400

080009c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_DMA_Init+0x70>)
 80009c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ca:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <MX_DMA_Init+0x70>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6493      	str	r3, [r2, #72]	; 0x48
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_DMA_Init+0x70>)
 80009d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_DMA_Init+0x70>)
 80009e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009e2:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <MX_DMA_Init+0x70>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6493      	str	r3, [r2, #72]	; 0x48
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_DMA_Init+0x70>)
 80009ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	200b      	movs	r0, #11
 80009fc:	f001 ff37 	bl	800286e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a00:	200b      	movs	r0, #11
 8000a02:	f001 ff4e 	bl	80028a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	200c      	movs	r0, #12
 8000a0c:	f001 ff2f 	bl	800286e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a10:	200c      	movs	r0, #12
 8000a12:	f001 ff46 	bl	80028a2 <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	205e      	movs	r0, #94	; 0x5e
 8000a1c:	f001 ff27 	bl	800286e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8000a20:	205e      	movs	r0, #94	; 0x5e
 8000a22:	f001 ff3e 	bl	80028a2 <HAL_NVIC_EnableIRQ>

}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <MX_GPIO_Init+0x90>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a1d      	ldr	r2, [pc, #116]	; (8000ac4 <MX_GPIO_Init+0x90>)
 8000a50:	f043 0320 	orr.w	r3, r3, #32
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <MX_GPIO_Init+0x90>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0320 	and.w	r3, r3, #32
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_GPIO_Init+0x90>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a17      	ldr	r2, [pc, #92]	; (8000ac4 <MX_GPIO_Init+0x90>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <MX_GPIO_Init+0x90>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_GPIO_Init+0x90>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a11      	ldr	r2, [pc, #68]	; (8000ac4 <MX_GPIO_Init+0x90>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_GPIO_Init+0x90>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a98:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <MX_GPIO_Init+0x94>)
 8000a9a:	f002 faab 	bl	8002ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_GPIO_Init+0x94>)
 8000ab8:	f002 f91a 	bl	8002cf0 <HAL_GPIO_Init>

}
 8000abc:	bf00      	nop
 8000abe:	3720      	adds	r7, #32
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	48000400 	.word	0x48000400

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_MspInit+0x44>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x44>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x44>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6593      	str	r3, [r2, #88]	; 0x58
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x44>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b09a      	sub	sp, #104	; 0x68
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	2244      	movs	r2, #68	; 0x44
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f005 f981 	bl	8005e48 <memset>
  if(hadc->Instance==ADC2)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a1e      	ldr	r2, [pc, #120]	; (8000bc4 <HAL_ADC_MspInit+0xa4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d134      	bne.n	8000bba <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b54:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b56:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	4618      	mov	r0, r3
 8000b62:	f003 f837 	bl	8003bd4 <HAL_RCCEx_PeriphCLKConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b6c:	f7ff ffae 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_ADC_MspInit+0xa8>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b74:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <HAL_ADC_MspInit+0xa8>)
 8000b76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_ADC_MspInit+0xa8>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_ADC_MspInit+0xa8>)
 8000b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8c:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <HAL_ADC_MspInit+0xa8>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_ADC_MspInit+0xa8>)
 8000b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f002 f89b 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3768      	adds	r7, #104	; 0x68
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	50000100 	.word	0x50000100
 8000bc8:	40021000 	.word	0x40021000

08000bcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08c      	sub	sp, #48	; 0x30
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a59      	ldr	r2, [pc, #356]	; (8000d50 <HAL_TIM_Base_MspInit+0x184>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d162      	bne.n	8000cb4 <HAL_TIM_Base_MspInit+0xe8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bee:	4b59      	ldr	r3, [pc, #356]	; (8000d54 <HAL_TIM_Base_MspInit+0x188>)
 8000bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf2:	4a58      	ldr	r2, [pc, #352]	; (8000d54 <HAL_TIM_Base_MspInit+0x188>)
 8000bf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bf8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bfa:	4b56      	ldr	r3, [pc, #344]	; (8000d54 <HAL_TIM_Base_MspInit+0x188>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8000c06:	4b54      	ldr	r3, [pc, #336]	; (8000d58 <HAL_TIM_Base_MspInit+0x18c>)
 8000c08:	4a54      	ldr	r2, [pc, #336]	; (8000d5c <HAL_TIM_Base_MspInit+0x190>)
 8000c0a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8000c0c:	4b52      	ldr	r3, [pc, #328]	; (8000d58 <HAL_TIM_Base_MspInit+0x18c>)
 8000c0e:	222a      	movs	r2, #42	; 0x2a
 8000c10:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c12:	4b51      	ldr	r3, [pc, #324]	; (8000d58 <HAL_TIM_Base_MspInit+0x18c>)
 8000c14:	2210      	movs	r2, #16
 8000c16:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c18:	4b4f      	ldr	r3, [pc, #316]	; (8000d58 <HAL_TIM_Base_MspInit+0x18c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c1e:	4b4e      	ldr	r3, [pc, #312]	; (8000d58 <HAL_TIM_Base_MspInit+0x18c>)
 8000c20:	2280      	movs	r2, #128	; 0x80
 8000c22:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c24:	4b4c      	ldr	r3, [pc, #304]	; (8000d58 <HAL_TIM_Base_MspInit+0x18c>)
 8000c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c2a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c2c:	4b4a      	ldr	r3, [pc, #296]	; (8000d58 <HAL_TIM_Base_MspInit+0x18c>)
 8000c2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c32:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c34:	4b48      	ldr	r3, [pc, #288]	; (8000d58 <HAL_TIM_Base_MspInit+0x18c>)
 8000c36:	2220      	movs	r2, #32
 8000c38:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c3a:	4b47      	ldr	r3, [pc, #284]	; (8000d58 <HAL_TIM_Base_MspInit+0x18c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000c40:	4845      	ldr	r0, [pc, #276]	; (8000d58 <HAL_TIM_Base_MspInit+0x18c>)
 8000c42:	f001 fe49 	bl	80028d8 <HAL_DMA_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8000c4c:	f7ff ff3e 	bl	8000acc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a41      	ldr	r2, [pc, #260]	; (8000d58 <HAL_TIM_Base_MspInit+0x18c>)
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
 8000c56:	4a40      	ldr	r2, [pc, #256]	; (8000d58 <HAL_TIM_Base_MspInit+0x18c>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel2;
 8000c5c:	4b40      	ldr	r3, [pc, #256]	; (8000d60 <HAL_TIM_Base_MspInit+0x194>)
 8000c5e:	4a41      	ldr	r2, [pc, #260]	; (8000d64 <HAL_TIM_Base_MspInit+0x198>)
 8000c60:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 8000c62:	4b3f      	ldr	r3, [pc, #252]	; (8000d60 <HAL_TIM_Base_MspInit+0x194>)
 8000c64:	222b      	movs	r2, #43	; 0x2b
 8000c66:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c68:	4b3d      	ldr	r3, [pc, #244]	; (8000d60 <HAL_TIM_Base_MspInit+0x194>)
 8000c6a:	2210      	movs	r2, #16
 8000c6c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6e:	4b3c      	ldr	r3, [pc, #240]	; (8000d60 <HAL_TIM_Base_MspInit+0x194>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000c74:	4b3a      	ldr	r3, [pc, #232]	; (8000d60 <HAL_TIM_Base_MspInit+0x194>)
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c7a:	4b39      	ldr	r3, [pc, #228]	; (8000d60 <HAL_TIM_Base_MspInit+0x194>)
 8000c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c82:	4b37      	ldr	r3, [pc, #220]	; (8000d60 <HAL_TIM_Base_MspInit+0x194>)
 8000c84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8000c8a:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <HAL_TIM_Base_MspInit+0x194>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000c90:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <HAL_TIM_Base_MspInit+0x194>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8000c96:	4832      	ldr	r0, [pc, #200]	; (8000d60 <HAL_TIM_Base_MspInit+0x194>)
 8000c98:	f001 fe1e 	bl	80028d8 <HAL_DMA_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_TIM_Base_MspInit+0xda>
    {
      Error_Handler();
 8000ca2:	f7ff ff13 	bl	8000acc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a2d      	ldr	r2, [pc, #180]	; (8000d60 <HAL_TIM_Base_MspInit+0x194>)
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
 8000cac:	4a2c      	ldr	r2, [pc, #176]	; (8000d60 <HAL_TIM_Base_MspInit+0x194>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cb2:	e049      	b.n	8000d48 <HAL_TIM_Base_MspInit+0x17c>
  else if(htim_base->Instance==TIM3)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a2b      	ldr	r2, [pc, #172]	; (8000d68 <HAL_TIM_Base_MspInit+0x19c>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d144      	bne.n	8000d48 <HAL_TIM_Base_MspInit+0x17c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cbe:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <HAL_TIM_Base_MspInit+0x188>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc2:	4a24      	ldr	r2, [pc, #144]	; (8000d54 <HAL_TIM_Base_MspInit+0x188>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cca:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <HAL_TIM_Base_MspInit+0x188>)
 8000ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <HAL_TIM_Base_MspInit+0x188>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <HAL_TIM_Base_MspInit+0x188>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_TIM_Base_MspInit+0x188>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <HAL_TIM_Base_MspInit+0x188>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a18      	ldr	r2, [pc, #96]	; (8000d54 <HAL_TIM_Base_MspInit+0x188>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <HAL_TIM_Base_MspInit+0x188>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000d06:	2350      	movs	r3, #80	; 0x50
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f001 ffe4 	bl	8002cf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	480a      	ldr	r0, [pc, #40]	; (8000d6c <HAL_TIM_Base_MspInit+0x1a0>)
 8000d44:	f001 ffd4 	bl	8002cf0 <HAL_GPIO_Init>
}
 8000d48:	bf00      	nop
 8000d4a:	3730      	adds	r7, #48	; 0x30
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40012c00 	.word	0x40012c00
 8000d54:	40021000 	.word	0x40021000
 8000d58:	2000012c 	.word	0x2000012c
 8000d5c:	40020008 	.word	0x40020008
 8000d60:	2000018c 	.word	0x2000018c
 8000d64:	4002001c 	.word	0x4002001c
 8000d68:	40000400 	.word	0x40000400
 8000d6c:	48000400 	.word	0x48000400

08000d70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a20      	ldr	r2, [pc, #128]	; (8000e10 <HAL_TIM_MspPostInit+0xa0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d139      	bne.n	8000e06 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <HAL_TIM_MspPostInit+0xa4>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	4a1f      	ldr	r2, [pc, #124]	; (8000e14 <HAL_TIM_MspPostInit+0xa4>)
 8000d98:	f043 0320 	orr.w	r3, r3, #32
 8000d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <HAL_TIM_MspPostInit+0xa4>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	f003 0320 	and.w	r3, r3, #32
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <HAL_TIM_MspPostInit+0xa4>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <HAL_TIM_MspPostInit+0xa4>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <HAL_TIM_MspPostInit+0xa4>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000dd2:	2306      	movs	r3, #6
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480e      	ldr	r0, [pc, #56]	; (8000e18 <HAL_TIM_MspPostInit+0xa8>)
 8000dde:	f001 ff87 	bl	8002cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000de2:	f44f 53bc 	mov.w	r3, #6016	; 0x1780
 8000de6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000df4:	2306      	movs	r3, #6
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e02:	f001 ff75 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3728      	adds	r7, #40	; 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40012c00 	.word	0x40012c00
 8000e14:	40021000 	.word	0x40021000
 8000e18:	48001400 	.word	0x48001400

08000e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b09a      	sub	sp, #104	; 0x68
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	2244      	movs	r2, #68	; 0x44
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f005 f803 	bl	8005e48 <memset>
  if(huart->Instance==USART2)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a1f      	ldr	r2, [pc, #124]	; (8000ec4 <HAL_UART_MspInit+0xa8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d136      	bne.n	8000eba <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 febb 	bl	8003bd4 <HAL_RCCEx_PeriphCLKConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e64:	f7ff fe32 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_UART_MspInit+0xac>)
 8000e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6c:	4a16      	ldr	r2, [pc, #88]	; (8000ec8 <HAL_UART_MspInit+0xac>)
 8000e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e72:	6593      	str	r3, [r2, #88]	; 0x58
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_UART_MspInit+0xac>)
 8000e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_UART_MspInit+0xac>)
 8000e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e84:	4a10      	ldr	r2, [pc, #64]	; (8000ec8 <HAL_UART_MspInit+0xac>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_UART_MspInit+0xac>)
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000e98:	230c      	movs	r3, #12
 8000e9a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea8:	2307      	movs	r3, #7
 8000eaa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f001 ff1b 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3768      	adds	r7, #104	; 0x68
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40004400 	.word	0x40004400
 8000ec8:	40021000 	.word	0x40021000

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 fbe6 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <DMA1_Channel1_IRQHandler+0x10>)
 8000f26:	f001 fd7f 	bl	8002a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000012c 	.word	0x2000012c

08000f34 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <DMA1_Channel2_IRQHandler+0x10>)
 8000f3a:	f001 fd75 	bl	8002a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000018c 	.word	0x2000018c

08000f48 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_tim1_ch1);
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <DMAMUX_OVR_IRQHandler+0x14>)
 8000f4e:	f001 fe7d 	bl	8002c4c <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_tim1_ch2);
 8000f52:	4803      	ldr	r0, [pc, #12]	; (8000f60 <DMAMUX_OVR_IRQHandler+0x18>)
 8000f54:	f001 fe7a 	bl	8002c4c <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000012c 	.word	0x2000012c
 8000f60:	2000018c 	.word	0x2000018c

08000f64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <SystemInit+0x20>)
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6e:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <SystemInit+0x20>)
 8000f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	2203      	movs	r2, #3
 8001002:	4798      	blx	r3
    }
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2b00      	cmp	r3, #0
 800101c:	bf0c      	ite	eq
 800101e:	2301      	moveq	r3, #1
 8001020:	2300      	movne	r3, #0
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_ZNSt8functionIFvN3can13CallbackStateEEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ffd4 	bl	8000fe8 <_ZNSt14_Function_baseD1Ev>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <_ZN17three_phase_motor9MotorBaseC1ER17TIM_HandleTypeDefS2_R17ADC_HandleTypeDefNS_11MotorConfigESt8functionIFvN3can13CallbackStateEEE>:
        I'm sorry for my bad naming rule. If you have any idea, please tell me.
        */

    public:
        // Hall sensor tim has 16bit counter.??
        MotorBase(TIM_HandleTypeDef &pwm_timer, TIM_HandleTypeDef &hall_sensor, ADC_HandleTypeDef &hadc,
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	603b      	str	r3, [r7, #0]
                  MotorConfig config, std::function<void(CallbackState)> callback)
            : pwm_timer(&pwm_timer), hall_sensor(&hall_sensor), hadc(&hadc), callback(callback), config(config)
 800105a:	4a14      	ldr	r2, [pc, #80]	; (80010ac <_ZN17three_phase_motor9MotorBaseC1ER17TIM_HandleTypeDefS2_R17ADC_HandleTypeDefNS_11MotorConfigESt8functionIFvN3can13CallbackStateEEE+0x60>)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3310      	adds	r3, #16
 8001076:	461c      	mov	r4, r3
 8001078:	f107 0320 	add.w	r3, r7, #32
 800107c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001080:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	331c      	adds	r3, #28
 8001088:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f908 	bl	80012a0 <_ZNSt8functionIFvN3can13CallbackStateEEEC1ERKS3_>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        {
        }
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	08005ea4 	.word	0x08005ea4

080010b0 <_ZN17three_phase_motor9MotorBase13resetPositionEv>:
        void setTarget(MotorSettings &target)
        {
            this->target = target;
        }

        virtual void resetPosition(void) {}
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_ZN17three_phase_motor9MotorBase11getPositionEv>:
            break;
            }
        }

    protected:
        virtual uint32_t getPosition(void) {}
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	bf00      	nop
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <_ZN17three_phase_motor9MotorBase14updateVelocityEv>:

        virtual void updateVelocity(void) {}
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <_ZN17three_phase_motor9MotorBaseD1Ev>:
    class MotorBase
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <_ZN17three_phase_motor9MotorBaseD1Ev+0x24>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	331c      	adds	r3, #28
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff94 	bl	8001030 <_ZNSt8functionIFvN3can13CallbackStateEEED1Ev>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	08005ea4 	.word	0x08005ea4

08001118 <_ZN17three_phase_motor5MotorC1ER17TIM_HandleTypeDefS2_R17ADC_HandleTypeDefNS_11MotorConfigESt8functionIFvN3can13CallbackStateEEE>:

    class Motor : public MotorBase
    {

    public:
        Motor(TIM_HandleTypeDef &pwm_timer, TIM_HandleTypeDef &hall_sensor, ADC_HandleTypeDef &hadc,
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b08d      	sub	sp, #52	; 0x34
 800111c:	af04      	add	r7, sp, #16
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	603b      	str	r3, [r7, #0]
              MotorConfig config, std::function<void(CallbackState)> callback)
            : MotorBase(pwm_timer, hall_sensor, hadc, config, callback)
 8001126:	68fc      	ldr	r4, [r7, #12]
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f8b6 	bl	80012a0 <_ZNSt8functionIFvN3can13CallbackStateEEEC1ERKS3_>
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	9303      	str	r3, [sp, #12]
 800113a:	466b      	mov	r3, sp
 800113c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001140:	ca07      	ldmia	r2, {r0, r1, r2}
 8001142:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	68b9      	ldr	r1, [r7, #8]
 800114c:	4620      	mov	r0, r4
 800114e:	f7ff ff7d 	bl	800104c <_ZN17three_phase_motor9MotorBaseC1ER17TIM_HandleTypeDefS2_R17ADC_HandleTypeDefNS_11MotorConfigESt8functionIFvN3can13CallbackStateEEE>
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff6a 	bl	8001030 <_ZNSt8functionIFvN3can13CallbackStateEEED1Ev>
 800115c:	4a05      	ldr	r2, [pc, #20]	; (8001174 <_ZN17three_phase_motor5MotorC1ER17TIM_HandleTypeDefS2_R17ADC_HandleTypeDefNS_11MotorConfigESt8functionIFvN3can13CallbackStateEEE+0x5c>)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2200      	movs	r2, #0
 8001166:	64da      	str	r2, [r3, #76]	; 0x4c
        {
        }
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd90      	pop	{r4, r7, pc}
 8001172:	bf00      	nop
 8001174:	08005e90 	.word	0x08005e90

08001178 <_ZN17three_phase_motor5Motor13resetPositionEv>:
            }
        }

    private:
        int hall_overflow_count = 0;
        void resetPosition(void) override
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
        {
            hall_sensor->Instance->CNT = 0;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
            hall_overflow_count = 0;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <_ZN17three_phase_motor5Motor11getPositionEv>:

        // TODO: It will be overflow, so it is not good. how to fix it?
        uint32_t getPosition(void) override
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
        {
            return hall_sensor->Instance->CNT + hall_overflow_count * 0xFF;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011b0:	4613      	mov	r3, r2
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	1a9b      	subs	r3, r3, r2
 80011b6:	440b      	add	r3, r1
        }
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <_ZN17three_phase_motor5Motor14updateVelocityEv>:

        void updateVelocity(void) override
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
        {
        }
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <_Z8callbackN3can13CallbackStateE>:
extern ADC_HandleTypeDef hadc2;
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim3;

void callback(CallbackState state)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
    // Do something.
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <_ZN17three_phase_motor11MotorConfigC1Ev>:
    struct MotorConfig
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	721a      	strb	r2, [r3, #8]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <_ZN17three_phase_motor5MotorD1Ev>:
    class Motor : public MotorBase
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	4a05      	ldr	r2, [pc, #20]	; (800122c <_ZN17three_phase_motor5MotorD1Ev+0x20>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff67 	bl	80010f0 <_ZN17three_phase_motor9MotorBaseD1Ev>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	08005e90 	.word	0x08005e90

08001230 <main_cpp>:

void main_cpp(void)
{
 8001230:	b5b0      	push	{r4, r5, r7, lr}
 8001232:	b0a0      	sub	sp, #128	; 0x80
 8001234:	af04      	add	r7, sp, #16
    MotorConfig config;
 8001236:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ffd7 	bl	80011ee <_ZN17three_phase_motor11MotorConfigC1Ev>
    config.number_of_pole = 4;
 8001240:	2304      	movs	r3, #4
 8001242:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

    Motor motor = Motor(htim1, htim3, hadc2, config, callback);
 8001246:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800124a:	4911      	ldr	r1, [pc, #68]	; (8001290 <main_cpp+0x60>)
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f849 	bl	80012e4 <_ZNSt8functionIFvN3can13CallbackStateEEEC1IPS2_vvEET_>
 8001252:	1d3d      	adds	r5, r7, #4
 8001254:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001258:	9303      	str	r3, [sp, #12]
 800125a:	466c      	mov	r4, sp
 800125c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001260:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001264:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <main_cpp+0x64>)
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <main_cpp+0x68>)
 800126c:	490b      	ldr	r1, [pc, #44]	; (800129c <main_cpp+0x6c>)
 800126e:	4628      	mov	r0, r5
 8001270:	f7ff ff52 	bl	8001118 <_ZN17three_phase_motor5MotorC1ER17TIM_HandleTypeDefS2_R17ADC_HandleTypeDefNS_11MotorConfigESt8functionIFvN3can13CallbackStateEEE>
 8001274:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fed9 	bl	8001030 <_ZNSt8functionIFvN3can13CallbackStateEEED1Ev>
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ffc3 	bl	800120c <_ZN17three_phase_motor5MotorD1Ev>
 8001286:	bf00      	nop
 8001288:	3770      	adds	r7, #112	; 0x70
 800128a:	46bd      	mov	sp, r7
 800128c:	bdb0      	pop	{r4, r5, r7, pc}
 800128e:	bf00      	nop
 8001290:	080011d9 	.word	0x080011d9
 8001294:	20000028 	.word	0x20000028
 8001298:	200000e0 	.word	0x200000e0
 800129c:	20000094 	.word	0x20000094

080012a0 <_ZNSt8functionIFvN3can13CallbackStateEEEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fe8d 	bl	8000fcc <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 80012b2:	6838      	ldr	r0, [r7, #0]
 80012b4:	f000 f840 	bl	8001338 <_ZNKSt8functionIFvN3can13CallbackStateEEEcvbEv>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00d      	beq.n	80012da <_ZNSt8functionIFvN3can13CallbackStateEEEC1ERKS3_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	6839      	ldr	r1, [r7, #0]
 80012c6:	2202      	movs	r2, #2
 80012c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	609a      	str	r2, [r3, #8]
	}
    }
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_ZNSt8functionIFvN3can13CallbackStateEEEC1IPS2_vvEET_>:

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe6b 	bl	8000fcc <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f838 	bl	800136e <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE21_M_not_empty_functionIS3_EEbPT_>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00f      	beq.n	8001324 <_ZNSt8functionIFvN3can13CallbackStateEEEC1IPS2_vvEET_+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8001304:	687c      	ldr	r4, [r7, #4]
 8001306:	463b      	mov	r3, r7
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f840 	bl	800138e <_ZSt4moveIRPFvN3can13CallbackStateEEEONSt16remove_referenceIT_E4typeEOS6_>
 800130e:	4603      	mov	r3, r0
 8001310:	4619      	mov	r1, r3
 8001312:	4620      	mov	r0, r4
 8001314:	f000 f846 	bl	80013a4 <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <_ZNSt8functionIFvN3can13CallbackStateEEEC1IPS2_vvEET_+0x4c>)
 800131c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <_ZNSt8functionIFvN3can13CallbackStateEEEC1IPS2_vvEET_+0x50>)
 8001322:	609a      	str	r2, [r3, #8]
	  }
      }
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bd90      	pop	{r4, r7, pc}
 800132e:	bf00      	nop
 8001330:	080013c9 	.word	0x080013c9
 8001334:	080013f3 	.word	0x080013f3

08001338 <_ZNKSt8functionIFvN3can13CallbackStateEEEcvbEv>:
      explicit operator bool() const noexcept
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fe63 	bl	800100e <_ZNKSt14_Function_base8_M_emptyEv>
 8001348:	4603      	mov	r3, r0
 800134a:	f083 0301 	eor.w	r3, r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <_ZSt7forwardIN3can13CallbackStateEEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE21_M_not_empty_functionIS3_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	bf14      	ite	ne
 800137c:	2301      	movne	r3, #1
 800137e:	2300      	moveq	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <_ZSt4moveIRPFvN3can13CallbackStateEEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80013ae:	6838      	ldr	r0, [r7, #0]
 80013b0:	f7ff ffed 	bl	800138e <_ZSt4moveIRPFvN3can13CallbackStateEEEONSt16remove_referenceIT_E4typeEOS6_>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4622      	mov	r2, r4
 80013b8:	4619      	mov	r1, r3
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f838 	bl	8001430 <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}

080013c8 <_ZNSt17_Function_handlerIFvN3can13CallbackStateEEPS2_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 f845 	bl	8001462 <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE14_M_get_pointerERKSt9_Any_data>
 80013d8:	4604      	mov	r4, r0
 80013da:	6838      	ldr	r0, [r7, #0]
 80013dc:	f7ff ffbc 	bl	8001358 <_ZSt7forwardIN3can13CallbackStateEEOT_RNSt16remove_referenceIS2_E4typeE>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4619      	mov	r1, r3
 80013e4:	4620      	mov	r0, r4
 80013e6:	f000 f84d 	bl	8001484 <_ZSt10__invoke_rIvRPFvN3can13CallbackStateEEJS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 80013ea:	bf00      	nop
      }
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd90      	pop	{r4, r7, pc}

080013f2 <_ZNSt17_Function_handlerIFvN3can13CallbackStateEEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80013f2:	b590      	push	{r4, r7, lr}
 80013f4:	b085      	sub	sp, #20
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	4613      	mov	r3, r2
 80013fe:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d109      	bne.n	800141a <_ZNSt17_Function_handlerIFvN3can13CallbackStateEEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 f852 	bl	80014b0 <_ZNSt9_Any_data9_M_accessIPPFvN3can13CallbackStateEEEERT_v>
 800140c:	4604      	mov	r4, r0
 800140e:	68b8      	ldr	r0, [r7, #8]
 8001410:	f000 f827 	bl	8001462 <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE14_M_get_pointerERKSt9_Any_data>
 8001414:	4603      	mov	r3, r0
 8001416:	6023      	str	r3, [r4, #0]
	    break;
 8001418:	e005      	b.n	8001426 <_ZNSt17_Function_handlerIFvN3can13CallbackStateEEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	461a      	mov	r2, r3
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f000 f851 	bl	80014c8 <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 8001426:	2300      	movs	r3, #0
      }
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}

08001430 <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800143c:	68b8      	ldr	r0, [r7, #8]
 800143e:	f7ff ffa6 	bl	800138e <_ZSt4moveIRPFvN3can13CallbackStateEEEONSt16remove_referenceIT_E4typeEOS6_>
 8001442:	4603      	mov	r3, r0
 8001444:	681c      	ldr	r4, [r3, #0]
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff fdaa 	bl	8000fa0 <_ZNSt9_Any_data9_M_accessEv>
 800144c:	4603      	mov	r3, r0
 800144e:	4619      	mov	r1, r3
 8001450:	2004      	movs	r0, #4
 8001452:	f7ff fd99 	bl	8000f88 <_ZnwjPv>
 8001456:	4603      	mov	r3, r0
 8001458:	601c      	str	r4, [r3, #0]
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bd90      	pop	{r4, r7, pc}

08001462 <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8001462:	b580      	push	{r7, lr}
 8001464:	b084      	sub	sp, #16
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f857 	bl	800151e <_ZNKSt9_Any_data9_M_accessIPFvN3can13CallbackStateEEEERKT_v>
 8001470:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f000 f85f 	bl	8001536 <_ZSt11__addressofIKPFvN3can13CallbackStateEEEPT_RS5_>
 8001478:	4603      	mov	r3, r0
 800147a:	bf00      	nop
	}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_ZSt10__invoke_rIvRPFvN3can13CallbackStateEEJS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8001484:	b5b0      	push	{r4, r5, r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f85c 	bl	800154c <_ZSt7forwardIRPFvN3can13CallbackStateEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8001494:	4604      	mov	r4, r0
 8001496:	6838      	ldr	r0, [r7, #0]
 8001498:	f7ff ff5e 	bl	8001358 <_ZSt7forwardIN3can13CallbackStateEEOT_RNSt16remove_referenceIS2_E4typeE>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	4621      	mov	r1, r4
 80014a2:	4628      	mov	r0, r5
 80014a4:	f000 f85d 	bl	8001562 <_ZSt13__invoke_implIvRPFvN3can13CallbackStateEEJS1_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bdb0      	pop	{r4, r5, r7, pc}

080014b0 <_ZNSt9_Any_data9_M_accessIPPFvN3can13CallbackStateEEEERT_v>:
      _M_access()
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff fd71 	bl	8000fa0 <_ZNSt9_Any_data9_M_accessEv>
 80014be:	4603      	mov	r3, r0
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	4613      	mov	r3, r2
 80014d4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d016      	beq.n	800150a <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 80014dc:	2b03      	cmp	r3, #3
 80014de:	dc19      	bgt.n	8001514 <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d002      	beq.n	80014ea <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d00a      	beq.n	80014fe <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 80014e8:	e014      	b.n	8001514 <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f7ff ffe0 	bl	80014b0 <_ZNSt9_Any_data9_M_accessIPPFvN3can13CallbackStateEEEERT_v>
 80014f0:	4604      	mov	r4, r0
 80014f2:	68b8      	ldr	r0, [r7, #8]
 80014f4:	f7ff ffb5 	bl	8001462 <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE14_M_get_pointerERKSt9_Any_data>
 80014f8:	4603      	mov	r3, r0
 80014fa:	6023      	str	r3, [r4, #0]
	      break;
 80014fc:	e00a      	b.n	8001514 <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80014fe:	462a      	mov	r2, r5
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 f843 	bl	800158e <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 8001508:	e004      	b.n	8001514 <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800150a:	4621      	mov	r1, r4
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f000 f857 	bl	80015c0 <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8001512:	bf00      	nop
	  return false;
 8001514:	2300      	movs	r3, #0
	}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bdb0      	pop	{r4, r5, r7, pc}

0800151e <_ZNKSt9_Any_data9_M_accessIPFvN3can13CallbackStateEEEERKT_v>:
      _M_access() const
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff fd45 	bl	8000fb6 <_ZNKSt9_Any_data9_M_accessEv>
 800152c:	4603      	mov	r3, r0
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_ZSt11__addressofIKPFvN3can13CallbackStateEEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_ZSt7forwardIRPFvN3can13CallbackStateEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <_ZSt13__invoke_implIvRPFvN3can13CallbackStateEEJS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8001562:	b590      	push	{r4, r7, lr}
 8001564:	b085      	sub	sp, #20
 8001566:	af00      	add	r7, sp, #0
 8001568:	7338      	strb	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800156e:	68b8      	ldr	r0, [r7, #8]
 8001570:	f7ff ffec 	bl	800154c <_ZSt7forwardIRPFvN3can13CallbackStateEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8001574:	4603      	mov	r3, r0
 8001576:	681c      	ldr	r4, [r3, #0]
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff feed 	bl	8001358 <_ZSt7forwardIN3can13CallbackStateEEOT_RNSt16remove_referenceIS2_E4typeE>
 800157e:	4603      	mov	r3, r0
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	47a0      	blx	r4
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}

0800158e <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800158e:	b590      	push	{r4, r7, lr}
 8001590:	b085      	sub	sp, #20
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800159a:	68b8      	ldr	r0, [r7, #8]
 800159c:	f7ff ffbf 	bl	800151e <_ZNKSt9_Any_data9_M_accessIPFvN3can13CallbackStateEEEERKT_v>
 80015a0:	4603      	mov	r3, r0
 80015a2:	681c      	ldr	r4, [r3, #0]
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f7ff fcfb 	bl	8000fa0 <_ZNSt9_Any_data9_M_accessEv>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4619      	mov	r1, r3
 80015ae:	2004      	movs	r0, #4
 80015b0:	f7ff fcea 	bl	8000f88 <_ZnwjPv>
 80015b4:	4603      	mov	r3, r0
 80015b6:	601c      	str	r4, [r3, #0]
	}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd90      	pop	{r4, r7, pc}

080015c0 <_ZNSt14_Function_base13_Base_managerIPFvN3can13CallbackStateEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f804 	bl	80015d8 <_ZNSt9_Any_data9_M_accessIPFvN3can13CallbackStateEEEERT_v>
	}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_ZNSt9_Any_data9_M_accessIPFvN3can13CallbackStateEEEERT_v>:
      _M_access()
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fcdd 	bl	8000fa0 <_ZNSt9_Any_data9_M_accessEv>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <Reset_Handler>:
 80015f0:	480d      	ldr	r0, [pc, #52]	; (8001628 <LoopForever+0x2>)
 80015f2:	4685      	mov	sp, r0
 80015f4:	480d      	ldr	r0, [pc, #52]	; (800162c <LoopForever+0x6>)
 80015f6:	490e      	ldr	r1, [pc, #56]	; (8001630 <LoopForever+0xa>)
 80015f8:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <LoopForever+0xe>)
 80015fa:	2300      	movs	r3, #0
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:
 80015fe:	58d4      	ldr	r4, [r2, r3]
 8001600:	50c4      	str	r4, [r0, r3]
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:
 8001604:	18c4      	adds	r4, r0, r3
 8001606:	428c      	cmp	r4, r1
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
 800160a:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <LoopForever+0x12>)
 800160c:	4c0b      	ldr	r4, [pc, #44]	; (800163c <LoopForever+0x16>)
 800160e:	2300      	movs	r3, #0
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:
 8001616:	42a2      	cmp	r2, r4
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>
 800161a:	f7ff fca3 	bl	8000f64 <SystemInit>
 800161e:	f004 fbef 	bl	8005e00 <__libc_init_array>
 8001622:	f7fe ff7b 	bl	800051c <main>

08001626 <LoopForever>:
 8001626:	e7fe      	b.n	8001626 <LoopForever>
 8001628:	20008000 	.word	0x20008000
 800162c:	20000000 	.word	0x20000000
 8001630:	2000000c 	.word	0x2000000c
 8001634:	08005ee8 	.word	0x08005ee8
 8001638:	2000000c 	.word	0x2000000c
 800163c:	20000284 	.word	0x20000284

08001640 <ADC1_2_IRQHandler>:
 8001640:	e7fe      	b.n	8001640 <ADC1_2_IRQHandler>

08001642 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164c:	2003      	movs	r0, #3
 800164e:	f001 f903 	bl	8002858 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001652:	2000      	movs	r0, #0
 8001654:	f000 f80e 	bl	8001674 <HAL_InitTick>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	71fb      	strb	r3, [r7, #7]
 8001662:	e001      	b.n	8001668 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001664:	f7ff fa38 	bl	8000ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001668:	79fb      	ldrb	r3, [r7, #7]

}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_InitTick+0x68>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d022      	beq.n	80016ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_InitTick+0x6c>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_InitTick+0x68>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001694:	fbb1 f3f3 	udiv	r3, r1, r3
 8001698:	fbb2 f3f3 	udiv	r3, r2, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f001 f90e 	bl	80028be <HAL_SYSTICK_Config>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10f      	bne.n	80016c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b0f      	cmp	r3, #15
 80016ac:	d809      	bhi.n	80016c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ae:	2200      	movs	r2, #0
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	f04f 30ff 	mov.w	r0, #4294967295
 80016b6:	f001 f8da 	bl	800286e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <HAL_InitTick+0x70>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	e007      	b.n	80016d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	e004      	b.n	80016d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	e001      	b.n	80016d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_IncTick+0x1c>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_IncTick+0x20>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4413      	add	r3, r2
 80016f6:	4a03      	ldr	r2, [pc, #12]	; (8001704 <HAL_IncTick+0x1c>)
 80016f8:	6013      	str	r3, [r2, #0]
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	20000280 	.word	0x20000280
 8001708:	20000008 	.word	0x20000008

0800170c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_GetTick+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000280 	.word	0x20000280

08001724 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	609a      	str	r2, [r3, #8]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	609a      	str	r2, [r3, #8]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3360      	adds	r3, #96	; 0x60
 800179e:	461a      	mov	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <LL_ADC_SetOffset+0x44>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	4313      	orrs	r3, r2
 80017bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017c4:	bf00      	nop
 80017c6:	371c      	adds	r7, #28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	03fff000 	.word	0x03fff000

080017d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3360      	adds	r3, #96	; 0x60
 80017e2:	461a      	mov	r2, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3360      	adds	r3, #96	; 0x60
 8001810:	461a      	mov	r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	431a      	orrs	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800182a:	bf00      	nop
 800182c:	371c      	adds	r7, #28
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001836:	b480      	push	{r7}
 8001838:	b087      	sub	sp, #28
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3360      	adds	r3, #96	; 0x60
 8001846:	461a      	mov	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	431a      	orrs	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001860:	bf00      	nop
 8001862:	371c      	adds	r7, #28
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3360      	adds	r3, #96	; 0x60
 800187c:	461a      	mov	r2, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	431a      	orrs	r2, r3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001896:	bf00      	nop
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	615a      	str	r2, [r3, #20]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3330      	adds	r3, #48	; 0x30
 80018d8:	461a      	mov	r2, r3
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	4413      	add	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f003 031f 	and.w	r3, r3, #31
 80018f2:	211f      	movs	r1, #31
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	0e9b      	lsrs	r3, r3, #26
 8001900:	f003 011f 	and.w	r1, r3, #31
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	431a      	orrs	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001914:	bf00      	nop
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3314      	adds	r3, #20
 8001930:	461a      	mov	r2, r3
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	0e5b      	lsrs	r3, r3, #25
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	4413      	add	r3, r2
 800193e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	0d1b      	lsrs	r3, r3, #20
 8001948:	f003 031f 	and.w	r3, r3, #31
 800194c:	2107      	movs	r1, #7
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	401a      	ands	r2, r3
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	0d1b      	lsrs	r3, r3, #20
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	431a      	orrs	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800196a:	bf00      	nop
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d10a      	bne.n	80019a2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001998:	431a      	orrs	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80019a0:	e00a      	b.n	80019b8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ae:	43db      	mvns	r3, r3
 80019b0:	401a      	ands	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	407f0000 	.word	0x407f0000

080019c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6093      	str	r3, [r2, #8]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a00:	d101      	bne.n	8001a06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a50:	d101      	bne.n	8001a56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a78:	f043 0201 	orr.w	r2, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <LL_ADC_IsEnabled+0x18>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <LL_ADC_IsEnabled+0x1a>
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d101      	bne.n	8001aca <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d101      	bne.n	8001af0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e177      	b.n	8001e0a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d109      	bne.n	8001b3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7fe fff9 	bl	8000b20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff53 	bl	80019ec <LL_ADC_IsDeepPowerDownEnabled>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff39 	bl	80019c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff6e 	bl	8001a3c <LL_ADC_IsInternalRegulatorEnabled>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d115      	bne.n	8001b92 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff52 	bl	8001a14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b70:	4b9c      	ldr	r3, [pc, #624]	; (8001de4 <HAL_ADC_Init+0x2e4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	099b      	lsrs	r3, r3, #6
 8001b76:	4a9c      	ldr	r2, [pc, #624]	; (8001de8 <HAL_ADC_Init+0x2e8>)
 8001b78:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7c:	099b      	lsrs	r3, r3, #6
 8001b7e:	3301      	adds	r3, #1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b84:	e002      	b.n	8001b8c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f9      	bne.n	8001b86 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff50 	bl	8001a3c <LL_ADC_IsInternalRegulatorEnabled>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10d      	bne.n	8001bbe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba6:	f043 0210 	orr.w	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb2:	f043 0201 	orr.w	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff75 	bl	8001ab2 <LL_ADC_REG_IsConversionOngoing>
 8001bc8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f040 8110 	bne.w	8001df8 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f040 810c 	bne.w	8001df8 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001be8:	f043 0202 	orr.w	r2, r3, #2
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff49 	bl	8001a8c <LL_ADC_IsEnabled>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d111      	bne.n	8001c24 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c00:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c04:	f7ff ff42 	bl	8001a8c <LL_ADC_IsEnabled>
 8001c08:	4604      	mov	r4, r0
 8001c0a:	4878      	ldr	r0, [pc, #480]	; (8001dec <HAL_ADC_Init+0x2ec>)
 8001c0c:	f7ff ff3e 	bl	8001a8c <LL_ADC_IsEnabled>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4323      	orrs	r3, r4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d105      	bne.n	8001c24 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4874      	ldr	r0, [pc, #464]	; (8001df0 <HAL_ADC_Init+0x2f0>)
 8001c20:	f7ff fd80 	bl	8001724 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7f5b      	ldrb	r3, [r3, #29]
 8001c28:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c2e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c34:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c3a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c42:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d106      	bne.n	8001c60 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	3b01      	subs	r3, #1
 8001c58:	045b      	lsls	r3, r3, #17
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d009      	beq.n	8001c7c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	4b5c      	ldr	r3, [pc, #368]	; (8001df4 <HAL_ADC_Init+0x2f4>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	69b9      	ldr	r1, [r7, #24]
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff01 	bl	8001ab2 <LL_ADC_REG_IsConversionOngoing>
 8001cb0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff ff0e 	bl	8001ad8 <LL_ADC_INJ_IsConversionOngoing>
 8001cbc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d16d      	bne.n	8001da0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d16a      	bne.n	8001da0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cce:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cd6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ce6:	f023 0302 	bic.w	r3, r3, #2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	69b9      	ldr	r1, [r7, #24]
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d017      	beq.n	8001d2c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d0a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d14:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6911      	ldr	r1, [r2, #16]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	430b      	orrs	r3, r1
 8001d26:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001d2a:	e013      	b.n	8001d54 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691a      	ldr	r2, [r3, #16]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d3a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d50:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d118      	bne.n	8001d90 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d68:	f023 0304 	bic.w	r3, r3, #4
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d74:	4311      	orrs	r1, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d7a:	4311      	orrs	r1, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d80:	430a      	orrs	r2, r1
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 0201 	orr.w	r2, r2, #1
 8001d8c:	611a      	str	r2, [r3, #16]
 8001d8e:	e007      	b.n	8001da0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0201 	bic.w	r2, r2, #1
 8001d9e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d10c      	bne.n	8001dc2 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f023 010f 	bic.w	r1, r3, #15
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	1e5a      	subs	r2, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8001dc0:	e007      	b.n	8001dd2 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 020f 	bic.w	r2, r2, #15
 8001dd0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	f023 0303 	bic.w	r3, r3, #3
 8001dda:	f043 0201 	orr.w	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001de2:	e011      	b.n	8001e08 <HAL_ADC_Init+0x308>
 8001de4:	20000000 	.word	0x20000000
 8001de8:	053e2d63 	.word	0x053e2d63
 8001dec:	50000100 	.word	0x50000100
 8001df0:	50000300 	.word	0x50000300
 8001df4:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfc:	f043 0210 	orr.w	r2, r3, #16
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e08:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd90      	pop	{r4, r7, pc}
 8001e12:	bf00      	nop

08001e14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b0b6      	sub	sp, #216	; 0xd8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x22>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e3c8      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x7b4>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fe35 	bl	8001ab2 <LL_ADC_REG_IsConversionOngoing>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f040 83ad 	bne.w	80025aa <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f7ff fd33 	bl	80018c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fe23 	bl	8001ab2 <LL_ADC_REG_IsConversionOngoing>
 8001e6c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fe2f 	bl	8001ad8 <LL_ADC_INJ_IsConversionOngoing>
 8001e7a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 81d9 	bne.w	800223a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f040 81d4 	bne.w	800223a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e9a:	d10f      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f7ff fd3a 	bl	8001920 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fcf4 	bl	80018a2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001eba:	e00e      	b.n	8001eda <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f7ff fd29 	bl	8001920 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fce4 	bl	80018a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d022      	beq.n	8001f42 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6919      	ldr	r1, [r3, #16]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f0c:	f7ff fc3e 	bl	800178c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6919      	ldr	r1, [r3, #16]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f7ff fc8a 	bl	8001836 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	6919      	ldr	r1, [r3, #16]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	7f1b      	ldrb	r3, [r3, #28]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d102      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x124>
 8001f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f36:	e000      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x126>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f7ff fc96 	bl	800186c <LL_ADC_SetOffsetSaturation>
 8001f40:	e17b      	b.n	800223a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fc43 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10a      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x15a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fc38 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	0e9b      	lsrs	r3, r3, #26
 8001f68:	f003 021f 	and.w	r2, r3, #31
 8001f6c:	e01e      	b.n	8001fac <HAL_ADC_ConfigChannel+0x198>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fc2d 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001f9c:	2320      	movs	r3, #32
 8001f9e:	e004      	b.n	8001faa <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001fa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fa4:	fab3 f383 	clz	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d105      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x1b0>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	0e9b      	lsrs	r3, r3, #26
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	e018      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x1e2>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001fe0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	e004      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001fec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d106      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fbfc 	bl	8001800 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fbe0 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 8002014:	4603      	mov	r3, r0
 8002016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10a      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x220>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2101      	movs	r1, #1
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fbd5 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 800202a:	4603      	mov	r3, r0
 800202c:	0e9b      	lsrs	r3, r3, #26
 800202e:	f003 021f 	and.w	r2, r3, #31
 8002032:	e01e      	b.n	8002072 <HAL_ADC_ConfigChannel+0x25e>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2101      	movs	r1, #1
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fbca 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800205a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002062:	2320      	movs	r3, #32
 8002064:	e004      	b.n	8002070 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002066:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207a:	2b00      	cmp	r3, #0
 800207c:	d105      	bne.n	800208a <HAL_ADC_ConfigChannel+0x276>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0e9b      	lsrs	r3, r3, #26
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	e018      	b.n	80020bc <HAL_ADC_ConfigChannel+0x2a8>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800209e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80020a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80020ae:	2320      	movs	r3, #32
 80020b0:	e004      	b.n	80020bc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80020b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020bc:	429a      	cmp	r2, r3
 80020be:	d106      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2200      	movs	r2, #0
 80020c6:	2101      	movs	r1, #1
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fb99 	bl	8001800 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2102      	movs	r1, #2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fb7d 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10a      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x2e6>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2102      	movs	r1, #2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fb72 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 80020f0:	4603      	mov	r3, r0
 80020f2:	0e9b      	lsrs	r3, r3, #26
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	e01e      	b.n	8002138 <HAL_ADC_ConfigChannel+0x324>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2102      	movs	r1, #2
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fb67 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 8002106:	4603      	mov	r3, r0
 8002108:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002118:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800211c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002120:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002128:	2320      	movs	r3, #32
 800212a:	e004      	b.n	8002136 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800212c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x33c>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0e9b      	lsrs	r3, r3, #26
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	e016      	b.n	800217e <HAL_ADC_ConfigChannel+0x36a>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002162:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002170:	2320      	movs	r3, #32
 8002172:	e004      	b.n	800217e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002174:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002178:	fab3 f383 	clz	r3, r3
 800217c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800217e:	429a      	cmp	r2, r3
 8002180:	d106      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2200      	movs	r2, #0
 8002188:	2102      	movs	r1, #2
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fb38 	bl	8001800 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2103      	movs	r1, #3
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fb1c 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 800219c:	4603      	mov	r3, r0
 800219e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10a      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x3a8>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2103      	movs	r1, #3
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fb11 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	0e9b      	lsrs	r3, r3, #26
 80021b6:	f003 021f 	and.w	r2, r3, #31
 80021ba:	e017      	b.n	80021ec <HAL_ADC_ConfigChannel+0x3d8>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2103      	movs	r1, #3
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fb06 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80021d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021d6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80021d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80021de:	2320      	movs	r3, #32
 80021e0:	e003      	b.n	80021ea <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80021e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d105      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x3f0>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	e011      	b.n	8002228 <HAL_ADC_ConfigChannel+0x414>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002212:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002214:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800221c:	2320      	movs	r3, #32
 800221e:	e003      	b.n	8002228 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002228:	429a      	cmp	r2, r3
 800222a:	d106      	bne.n	800223a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2200      	movs	r2, #0
 8002232:	2103      	movs	r1, #3
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fae3 	bl	8001800 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fc24 	bl	8001a8c <LL_ADC_IsEnabled>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 8140 	bne.w	80024cc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	461a      	mov	r2, r3
 800225a:	f7ff fb8d 	bl	8001978 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	4a8f      	ldr	r2, [pc, #572]	; (80024a0 <HAL_ADC_ConfigChannel+0x68c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	f040 8131 	bne.w	80024cc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10b      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x47e>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0e9b      	lsrs	r3, r3, #26
 8002280:	3301      	adds	r3, #1
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	2b09      	cmp	r3, #9
 8002288:	bf94      	ite	ls
 800228a:	2301      	movls	r3, #1
 800228c:	2300      	movhi	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	e019      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x4b2>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80022a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022a2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80022a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80022aa:	2320      	movs	r3, #32
 80022ac:	e003      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80022ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	2b09      	cmp	r3, #9
 80022be:	bf94      	ite	ls
 80022c0:	2301      	movls	r3, #1
 80022c2:	2300      	movhi	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d079      	beq.n	80023be <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d107      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x4d2>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	0e9b      	lsrs	r3, r3, #26
 80022dc:	3301      	adds	r3, #1
 80022de:	069b      	lsls	r3, r3, #26
 80022e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022e4:	e015      	b.n	8002312 <HAL_ADC_ConfigChannel+0x4fe>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80022f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80022fe:	2320      	movs	r3, #32
 8002300:	e003      	b.n	800230a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	3301      	adds	r3, #1
 800230c:	069b      	lsls	r3, r3, #26
 800230e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x51e>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	0e9b      	lsrs	r3, r3, #26
 8002324:	3301      	adds	r3, #1
 8002326:	f003 031f 	and.w	r3, r3, #31
 800232a:	2101      	movs	r1, #1
 800232c:	fa01 f303 	lsl.w	r3, r1, r3
 8002330:	e017      	b.n	8002362 <HAL_ADC_ConfigChannel+0x54e>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002342:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800234a:	2320      	movs	r3, #32
 800234c:	e003      	b.n	8002356 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800234e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	b2db      	uxtb	r3, r3
 8002356:	3301      	adds	r3, #1
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	2101      	movs	r1, #1
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	ea42 0103 	orr.w	r1, r2, r3
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10a      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x574>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	0e9b      	lsrs	r3, r3, #26
 8002378:	3301      	adds	r3, #1
 800237a:	f003 021f 	and.w	r2, r3, #31
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	051b      	lsls	r3, r3, #20
 8002386:	e018      	b.n	80023ba <HAL_ADC_ConfigChannel+0x5a6>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002398:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800239a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80023a0:	2320      	movs	r3, #32
 80023a2:	e003      	b.n	80023ac <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80023a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	f003 021f 	and.w	r2, r3, #31
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ba:	430b      	orrs	r3, r1
 80023bc:	e081      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d107      	bne.n	80023da <HAL_ADC_ConfigChannel+0x5c6>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	0e9b      	lsrs	r3, r3, #26
 80023d0:	3301      	adds	r3, #1
 80023d2:	069b      	lsls	r3, r3, #26
 80023d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023d8:	e015      	b.n	8002406 <HAL_ADC_ConfigChannel+0x5f2>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80023ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80023f2:	2320      	movs	r3, #32
 80023f4:	e003      	b.n	80023fe <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f8:	fab3 f383 	clz	r3, r3
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	3301      	adds	r3, #1
 8002400:	069b      	lsls	r3, r3, #26
 8002402:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x612>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	0e9b      	lsrs	r3, r3, #26
 8002418:	3301      	adds	r3, #1
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	2101      	movs	r1, #1
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	e017      	b.n	8002456 <HAL_ADC_ConfigChannel+0x642>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	61fb      	str	r3, [r7, #28]
  return result;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800243e:	2320      	movs	r3, #32
 8002440:	e003      	b.n	800244a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	fab3 f383 	clz	r3, r3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	3301      	adds	r3, #1
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	2101      	movs	r1, #1
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	ea42 0103 	orr.w	r1, r2, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10d      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x66e>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	3301      	adds	r3, #1
 800246e:	f003 021f 	and.w	r2, r3, #31
 8002472:	4613      	mov	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4413      	add	r3, r2
 8002478:	3b1e      	subs	r3, #30
 800247a:	051b      	lsls	r3, r3, #20
 800247c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002480:	e01e      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x6ac>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	613b      	str	r3, [r7, #16]
  return result;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d104      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800249a:	2320      	movs	r3, #32
 800249c:	e006      	b.n	80024ac <HAL_ADC_ConfigChannel+0x698>
 800249e:	bf00      	nop
 80024a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	3301      	adds	r3, #1
 80024ae:	f003 021f 	and.w	r2, r3, #31
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	3b1e      	subs	r3, #30
 80024ba:	051b      	lsls	r3, r3, #20
 80024bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c0:	430b      	orrs	r3, r1
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	6892      	ldr	r2, [r2, #8]
 80024c6:	4619      	mov	r1, r3
 80024c8:	f7ff fa2a 	bl	8001920 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b3f      	ldr	r3, [pc, #252]	; (80025d0 <HAL_ADC_ConfigChannel+0x7bc>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d071      	beq.n	80025bc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024d8:	483e      	ldr	r0, [pc, #248]	; (80025d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80024da:	f7ff f949 	bl	8001770 <LL_ADC_GetCommonPathInternalCh>
 80024de:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a3c      	ldr	r2, [pc, #240]	; (80025d8 <HAL_ADC_ConfigChannel+0x7c4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d004      	beq.n	80024f6 <HAL_ADC_ConfigChannel+0x6e2>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a3a      	ldr	r2, [pc, #232]	; (80025dc <HAL_ADC_ConfigChannel+0x7c8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d127      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d121      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800250a:	d157      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800250c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002510:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002514:	4619      	mov	r1, r3
 8002516:	482f      	ldr	r0, [pc, #188]	; (80025d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002518:	f7ff f917 	bl	800174a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800251c:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <HAL_ADC_ConfigChannel+0x7cc>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	099b      	lsrs	r3, r3, #6
 8002522:	4a30      	ldr	r2, [pc, #192]	; (80025e4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002524:	fba2 2303 	umull	r2, r3, r2, r3
 8002528:	099b      	lsrs	r3, r3, #6
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002536:	e002      	b.n	800253e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3b01      	subs	r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f9      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002544:	e03a      	b.n	80025bc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a27      	ldr	r2, [pc, #156]	; (80025e8 <HAL_ADC_ConfigChannel+0x7d4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d113      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x764>
 8002550:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10d      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a22      	ldr	r2, [pc, #136]	; (80025ec <HAL_ADC_ConfigChannel+0x7d8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d02a      	beq.n	80025bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002566:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800256a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800256e:	4619      	mov	r1, r3
 8002570:	4818      	ldr	r0, [pc, #96]	; (80025d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002572:	f7ff f8ea 	bl	800174a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002576:	e021      	b.n	80025bc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1c      	ldr	r2, [pc, #112]	; (80025f0 <HAL_ADC_ConfigChannel+0x7dc>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d11c      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002582:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d116      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a16      	ldr	r2, [pc, #88]	; (80025ec <HAL_ADC_ConfigChannel+0x7d8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d011      	beq.n	80025bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002598:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800259c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025a0:	4619      	mov	r1, r3
 80025a2:	480c      	ldr	r0, [pc, #48]	; (80025d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80025a4:	f7ff f8d1 	bl	800174a <LL_ADC_SetCommonPathInternalCh>
 80025a8:	e008      	b.n	80025bc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	f043 0220 	orr.w	r2, r3, #32
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80025c4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	37d8      	adds	r7, #216	; 0xd8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	80080000 	.word	0x80080000
 80025d4:	50000300 	.word	0x50000300
 80025d8:	c3210000 	.word	0xc3210000
 80025dc:	90c00010 	.word	0x90c00010
 80025e0:	20000000 	.word	0x20000000
 80025e4:	053e2d63 	.word	0x053e2d63
 80025e8:	c7520000 	.word	0xc7520000
 80025ec:	50000100 	.word	0x50000100
 80025f0:	cb840000 	.word	0xcb840000

080025f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fa43 	bl	8001a8c <LL_ADC_IsEnabled>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d14d      	bne.n	80026a8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <ADC_Enable+0xc0>)
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	f043 0210 	orr.w	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e039      	b.n	80026aa <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fa12 	bl	8001a64 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002640:	f7ff f864 	bl	800170c <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002646:	e028      	b.n	800269a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fa1d 	bl	8001a8c <LL_ADC_IsEnabled>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d104      	bne.n	8002662 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fa01 	bl	8001a64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002662:	f7ff f853 	bl	800170c <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d914      	bls.n	800269a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b01      	cmp	r3, #1
 800267c:	d00d      	beq.n	800269a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002682:	f043 0210 	orr.w	r2, r3, #16
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e007      	b.n	80026aa <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d1cf      	bne.n	8002648 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	8000003f 	.word	0x8000003f

080026b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <__NVIC_SetPriorityGrouping+0x44>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d4:	4013      	ands	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ea:	4a04      	ldr	r2, [pc, #16]	; (80026fc <__NVIC_SetPriorityGrouping+0x44>)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	60d3      	str	r3, [r2, #12]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <__NVIC_GetPriorityGrouping+0x18>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	f003 0307 	and.w	r3, r3, #7
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	2b00      	cmp	r3, #0
 800272c:	db0b      	blt.n	8002746 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	f003 021f 	and.w	r2, r3, #31
 8002734:	4907      	ldr	r1, [pc, #28]	; (8002754 <__NVIC_EnableIRQ+0x38>)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	2001      	movs	r0, #1
 800273e:	fa00 f202 	lsl.w	r2, r0, r2
 8002742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000e100 	.word	0xe000e100

08002758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	6039      	str	r1, [r7, #0]
 8002762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	2b00      	cmp	r3, #0
 800276a:	db0a      	blt.n	8002782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	490c      	ldr	r1, [pc, #48]	; (80027a4 <__NVIC_SetPriority+0x4c>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	0112      	lsls	r2, r2, #4
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	440b      	add	r3, r1
 800277c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002780:	e00a      	b.n	8002798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4908      	ldr	r1, [pc, #32]	; (80027a8 <__NVIC_SetPriority+0x50>)
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	3b04      	subs	r3, #4
 8002790:	0112      	lsls	r2, r2, #4
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	440b      	add	r3, r1
 8002796:	761a      	strb	r2, [r3, #24]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000e100 	.word	0xe000e100
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	; 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f1c3 0307 	rsb	r3, r3, #7
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	bf28      	it	cs
 80027ca:	2304      	movcs	r3, #4
 80027cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3304      	adds	r3, #4
 80027d2:	2b06      	cmp	r3, #6
 80027d4:	d902      	bls.n	80027dc <NVIC_EncodePriority+0x30>
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3b03      	subs	r3, #3
 80027da:	e000      	b.n	80027de <NVIC_EncodePriority+0x32>
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	f04f 32ff 	mov.w	r2, #4294967295
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43da      	mvns	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	401a      	ands	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f4:	f04f 31ff 	mov.w	r1, #4294967295
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	fa01 f303 	lsl.w	r3, r1, r3
 80027fe:	43d9      	mvns	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	4313      	orrs	r3, r2
         );
}
 8002806:	4618      	mov	r0, r3
 8002808:	3724      	adds	r7, #36	; 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002824:	d301      	bcc.n	800282a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002826:	2301      	movs	r3, #1
 8002828:	e00f      	b.n	800284a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <SysTick_Config+0x40>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3b01      	subs	r3, #1
 8002830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002832:	210f      	movs	r1, #15
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
 8002838:	f7ff ff8e 	bl	8002758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <SysTick_Config+0x40>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <SysTick_Config+0x40>)
 8002844:	2207      	movs	r2, #7
 8002846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	e000e010 	.word	0xe000e010

08002858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ff29 	bl	80026b8 <__NVIC_SetPriorityGrouping>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b086      	sub	sp, #24
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
 800287a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800287c:	f7ff ff40 	bl	8002700 <__NVIC_GetPriorityGrouping>
 8002880:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	6978      	ldr	r0, [r7, #20]
 8002888:	f7ff ff90 	bl	80027ac <NVIC_EncodePriority>
 800288c:	4602      	mov	r2, r0
 800288e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff5f 	bl	8002758 <__NVIC_SetPriority>
}
 800289a:	bf00      	nop
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff33 	bl	800271c <__NVIC_EnableIRQ>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ffa4 	bl	8002814 <SysTick_Config>
 80028cc:	4603      	mov	r3, r0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e08d      	b.n	8002a06 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <HAL_DMA_Init+0x138>)
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d80f      	bhi.n	8002916 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b45      	ldr	r3, [pc, #276]	; (8002a14 <HAL_DMA_Init+0x13c>)
 80028fe:	4413      	add	r3, r2
 8002900:	4a45      	ldr	r2, [pc, #276]	; (8002a18 <HAL_DMA_Init+0x140>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	009a      	lsls	r2, r3, #2
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a42      	ldr	r2, [pc, #264]	; (8002a1c <HAL_DMA_Init+0x144>)
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
 8002914:	e00e      	b.n	8002934 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	4b40      	ldr	r3, [pc, #256]	; (8002a20 <HAL_DMA_Init+0x148>)
 800291e:	4413      	add	r3, r2
 8002920:	4a3d      	ldr	r2, [pc, #244]	; (8002a18 <HAL_DMA_Init+0x140>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	009a      	lsls	r2, r3, #2
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a3c      	ldr	r2, [pc, #240]	; (8002a24 <HAL_DMA_Init+0x14c>)
 8002932:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800294a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002958:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002964:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002970:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f8fe 	bl	8002b88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002994:	d102      	bne.n	800299c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029b0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d010      	beq.n	80029dc <HAL_DMA_Init+0x104>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d80c      	bhi.n	80029dc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f91e 	bl	8002c04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	e008      	b.n	80029ee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40020407 	.word	0x40020407
 8002a14:	bffdfff8 	.word	0xbffdfff8
 8002a18:	cccccccd 	.word	0xcccccccd
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	bffdfbf8 	.word	0xbffdfbf8
 8002a24:	40020400 	.word	0x40020400

08002a28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	2204      	movs	r2, #4
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d026      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x7a>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d021      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d107      	bne.n	8002a7c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0204 	bic.w	r2, r2, #4
 8002a7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	f003 021f 	and.w	r2, r3, #31
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	2104      	movs	r1, #4
 8002a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d071      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002aa0:	e06c      	b.n	8002b7c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	2202      	movs	r2, #2
 8002aac:	409a      	lsls	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d02e      	beq.n	8002b14 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d029      	beq.n	8002b14 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10b      	bne.n	8002ae6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 020a 	bic.w	r2, r2, #10
 8002adc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f003 021f 	and.w	r2, r3, #31
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2102      	movs	r1, #2
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d038      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b12:	e033      	b.n	8002b7c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	2208      	movs	r2, #8
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d02a      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d025      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 020e 	bic.w	r2, r2, #14
 8002b40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	f003 021f 	and.w	r2, r3, #31
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	2101      	movs	r1, #1
 8002b50:	fa01 f202 	lsl.w	r2, r1, r2
 8002b54:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
}
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d802      	bhi.n	8002ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002b9c:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	e001      	b.n	8002ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002ba2:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002ba4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	3b08      	subs	r3, #8
 8002bb2:	4a12      	ldr	r2, [pc, #72]	; (8002bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	009a      	lsls	r2, r3, #2
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002bd2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2201      	movs	r2, #1
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002be2:	bf00      	nop
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40020407 	.word	0x40020407
 8002bf4:	40020800 	.word	0x40020800
 8002bf8:	40020820 	.word	0x40020820
 8002bfc:	cccccccd 	.word	0xcccccccd
 8002c00:	40020880 	.word	0x40020880

08002c04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c26:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	2201      	movs	r2, #1
 8002c32:	409a      	lsls	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	1000823f 	.word	0x1000823f
 8002c48:	40020940 	.word	0x40020940

08002c4c <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01a      	beq.n	8002c9a <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c7c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d022      	beq.n	8002ce8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01a      	beq.n	8002ce8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cc0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002cca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
      }
    }
  }
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002cfe:	e15a      	b.n	8002fb6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	2101      	movs	r1, #1
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 814c 	beq.w	8002fb0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d005      	beq.n	8002d30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d130      	bne.n	8002d92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d66:	2201      	movs	r2, #1
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	f003 0201 	and.w	r2, r3, #1
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d017      	beq.n	8002dce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	2203      	movs	r2, #3
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d123      	bne.n	8002e22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	08da      	lsrs	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3208      	adds	r2, #8
 8002de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	220f      	movs	r2, #15
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	08da      	lsrs	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3208      	adds	r2, #8
 8002e1c:	6939      	ldr	r1, [r7, #16]
 8002e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0203 	and.w	r2, r3, #3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80a6 	beq.w	8002fb0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e64:	4b5b      	ldr	r3, [pc, #364]	; (8002fd4 <HAL_GPIO_Init+0x2e4>)
 8002e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e68:	4a5a      	ldr	r2, [pc, #360]	; (8002fd4 <HAL_GPIO_Init+0x2e4>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6613      	str	r3, [r2, #96]	; 0x60
 8002e70:	4b58      	ldr	r3, [pc, #352]	; (8002fd4 <HAL_GPIO_Init+0x2e4>)
 8002e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e7c:	4a56      	ldr	r2, [pc, #344]	; (8002fd8 <HAL_GPIO_Init+0x2e8>)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	3302      	adds	r3, #2
 8002e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	220f      	movs	r2, #15
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ea6:	d01f      	beq.n	8002ee8 <HAL_GPIO_Init+0x1f8>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a4c      	ldr	r2, [pc, #304]	; (8002fdc <HAL_GPIO_Init+0x2ec>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d019      	beq.n	8002ee4 <HAL_GPIO_Init+0x1f4>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a4b      	ldr	r2, [pc, #300]	; (8002fe0 <HAL_GPIO_Init+0x2f0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d013      	beq.n	8002ee0 <HAL_GPIO_Init+0x1f0>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a4a      	ldr	r2, [pc, #296]	; (8002fe4 <HAL_GPIO_Init+0x2f4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00d      	beq.n	8002edc <HAL_GPIO_Init+0x1ec>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a49      	ldr	r2, [pc, #292]	; (8002fe8 <HAL_GPIO_Init+0x2f8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <HAL_GPIO_Init+0x1e8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a48      	ldr	r2, [pc, #288]	; (8002fec <HAL_GPIO_Init+0x2fc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d101      	bne.n	8002ed4 <HAL_GPIO_Init+0x1e4>
 8002ed0:	2305      	movs	r3, #5
 8002ed2:	e00a      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ed4:	2306      	movs	r3, #6
 8002ed6:	e008      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ed8:	2304      	movs	r3, #4
 8002eda:	e006      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002edc:	2303      	movs	r3, #3
 8002ede:	e004      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e002      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	f002 0203 	and.w	r2, r2, #3
 8002ef0:	0092      	lsls	r2, r2, #2
 8002ef2:	4093      	lsls	r3, r2
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002efa:	4937      	ldr	r1, [pc, #220]	; (8002fd8 <HAL_GPIO_Init+0x2e8>)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	089b      	lsrs	r3, r3, #2
 8002f00:	3302      	adds	r3, #2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f08:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f2c:	4a30      	ldr	r2, [pc, #192]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f32:	4b2f      	ldr	r3, [pc, #188]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f56:	4a26      	ldr	r2, [pc, #152]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002f5c:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f80:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f86:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4013      	ands	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002faa:	4a11      	ldr	r2, [pc, #68]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f47f ae9d 	bne.w	8002d00 <HAL_GPIO_Init+0x10>
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	48000400 	.word	0x48000400
 8002fe0:	48000800 	.word	0x48000800
 8002fe4:	48000c00 	.word	0x48000c00
 8002fe8:	48001000 	.word	0x48001000
 8002fec:	48001400 	.word	0x48001400
 8002ff0:	40010400 	.word	0x40010400

08002ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	807b      	strh	r3, [r7, #2]
 8003000:	4613      	mov	r3, r2
 8003002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003004:	787b      	ldrb	r3, [r7, #1]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800300a:	887a      	ldrh	r2, [r7, #2]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003010:	e002      	b.n	8003018 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003012:	887a      	ldrh	r2, [r7, #2]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d141      	bne.n	80030b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003032:	4b4b      	ldr	r3, [pc, #300]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800303a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303e:	d131      	bne.n	80030a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003040:	4b47      	ldr	r3, [pc, #284]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003046:	4a46      	ldr	r2, [pc, #280]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800304c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003050:	4b43      	ldr	r3, [pc, #268]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003058:	4a41      	ldr	r2, [pc, #260]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800305e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003060:	4b40      	ldr	r3, [pc, #256]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2232      	movs	r2, #50	; 0x32
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	4a3f      	ldr	r2, [pc, #252]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	0c9b      	lsrs	r3, r3, #18
 8003072:	3301      	adds	r3, #1
 8003074:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003076:	e002      	b.n	800307e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3b01      	subs	r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800307e:	4b38      	ldr	r3, [pc, #224]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308a:	d102      	bne.n	8003092 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f2      	bne.n	8003078 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003092:	4b33      	ldr	r3, [pc, #204]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309e:	d158      	bne.n	8003152 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e057      	b.n	8003154 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030a4:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030aa:	4a2d      	ldr	r2, [pc, #180]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80030b4:	e04d      	b.n	8003152 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030bc:	d141      	bne.n	8003142 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030be:	4b28      	ldr	r3, [pc, #160]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ca:	d131      	bne.n	8003130 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030cc:	4b24      	ldr	r3, [pc, #144]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030d2:	4a23      	ldr	r2, [pc, #140]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030dc:	4b20      	ldr	r3, [pc, #128]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030e4:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030ec:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2232      	movs	r2, #50	; 0x32
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	4a1c      	ldr	r2, [pc, #112]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	0c9b      	lsrs	r3, r3, #18
 80030fe:	3301      	adds	r3, #1
 8003100:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003102:	e002      	b.n	800310a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3b01      	subs	r3, #1
 8003108:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800310a:	4b15      	ldr	r3, [pc, #84]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003116:	d102      	bne.n	800311e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f2      	bne.n	8003104 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312a:	d112      	bne.n	8003152 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e011      	b.n	8003154 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003136:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003140:	e007      	b.n	8003152 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003142:	4b07      	ldr	r3, [pc, #28]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800314a:	4a05      	ldr	r2, [pc, #20]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800314c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003150:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	40007000 	.word	0x40007000
 8003164:	20000000 	.word	0x20000000
 8003168:	431bde83 	.word	0x431bde83

0800316c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e306      	b.n	800378c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d075      	beq.n	8003276 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800318a:	4b97      	ldr	r3, [pc, #604]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003194:	4b94      	ldr	r3, [pc, #592]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b0c      	cmp	r3, #12
 80031a2:	d102      	bne.n	80031aa <HAL_RCC_OscConfig+0x3e>
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d002      	beq.n	80031b0 <HAL_RCC_OscConfig+0x44>
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d10b      	bne.n	80031c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b0:	4b8d      	ldr	r3, [pc, #564]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d05b      	beq.n	8003274 <HAL_RCC_OscConfig+0x108>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d157      	bne.n	8003274 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e2e1      	b.n	800378c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d0:	d106      	bne.n	80031e0 <HAL_RCC_OscConfig+0x74>
 80031d2:	4b85      	ldr	r3, [pc, #532]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a84      	ldr	r2, [pc, #528]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	e01d      	b.n	800321c <HAL_RCC_OscConfig+0xb0>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0x98>
 80031ea:	4b7f      	ldr	r3, [pc, #508]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a7e      	ldr	r2, [pc, #504]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 80031f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	4b7c      	ldr	r3, [pc, #496]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a7b      	ldr	r2, [pc, #492]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e00b      	b.n	800321c <HAL_RCC_OscConfig+0xb0>
 8003204:	4b78      	ldr	r3, [pc, #480]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a77      	ldr	r2, [pc, #476]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 800320a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	4b75      	ldr	r3, [pc, #468]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a74      	ldr	r2, [pc, #464]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 8003216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800321a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d013      	beq.n	800324c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fe fa72 	bl	800170c <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800322c:	f7fe fa6e 	bl	800170c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e2a6      	b.n	800378c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800323e:	4b6a      	ldr	r3, [pc, #424]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0xc0>
 800324a:	e014      	b.n	8003276 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324c:	f7fe fa5e 	bl	800170c <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003254:	f7fe fa5a 	bl	800170c <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	; 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e292      	b.n	800378c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003266:	4b60      	ldr	r3, [pc, #384]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0xe8>
 8003272:	e000      	b.n	8003276 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d075      	beq.n	800336e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003282:	4b59      	ldr	r3, [pc, #356]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800328c:	4b56      	ldr	r3, [pc, #344]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2b0c      	cmp	r3, #12
 800329a:	d102      	bne.n	80032a2 <HAL_RCC_OscConfig+0x136>
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d002      	beq.n	80032a8 <HAL_RCC_OscConfig+0x13c>
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d11f      	bne.n	80032e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a8:	4b4f      	ldr	r3, [pc, #316]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_OscConfig+0x154>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e265      	b.n	800378c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c0:	4b49      	ldr	r3, [pc, #292]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	061b      	lsls	r3, r3, #24
 80032ce:	4946      	ldr	r1, [pc, #280]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032d4:	4b45      	ldr	r3, [pc, #276]	; (80033ec <HAL_RCC_OscConfig+0x280>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fe f9cb 	bl	8001674 <HAL_InitTick>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d043      	beq.n	800336c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e251      	b.n	800378c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d023      	beq.n	8003338 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f0:	4b3d      	ldr	r3, [pc, #244]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a3c      	ldr	r2, [pc, #240]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 80032f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fe fa06 	bl	800170c <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003304:	f7fe fa02 	bl	800170c <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e23a      	b.n	800378c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003316:	4b34      	ldr	r3, [pc, #208]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003322:	4b31      	ldr	r3, [pc, #196]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	061b      	lsls	r3, r3, #24
 8003330:	492d      	ldr	r1, [pc, #180]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 8003332:	4313      	orrs	r3, r2
 8003334:	604b      	str	r3, [r1, #4]
 8003336:	e01a      	b.n	800336e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003338:	4b2b      	ldr	r3, [pc, #172]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a2a      	ldr	r2, [pc, #168]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 800333e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fe f9e2 	bl	800170c <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334c:	f7fe f9de 	bl	800170c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e216      	b.n	800378c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800335e:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x1e0>
 800336a:	e000      	b.n	800336e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800336c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d041      	beq.n	80033fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d01c      	beq.n	80033bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003382:	4b19      	ldr	r3, [pc, #100]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 8003384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003388:	4a17      	ldr	r2, [pc, #92]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003392:	f7fe f9bb 	bl	800170c <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339a:	f7fe f9b7 	bl	800170c <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e1ef      	b.n	800378c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033ac:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 80033ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0ef      	beq.n	800339a <HAL_RCC_OscConfig+0x22e>
 80033ba:	e020      	b.n	80033fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 80033be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c2:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <HAL_RCC_OscConfig+0x27c>)
 80033c4:	f023 0301 	bic.w	r3, r3, #1
 80033c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fe f99e 	bl	800170c <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d2:	e00d      	b.n	80033f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d4:	f7fe f99a 	bl	800170c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d906      	bls.n	80033f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e1d2      	b.n	800378c <HAL_RCC_OscConfig+0x620>
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000
 80033ec:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033f0:	4b8c      	ldr	r3, [pc, #560]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 80033f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1ea      	bne.n	80033d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 80a6 	beq.w	8003558 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340c:	2300      	movs	r3, #0
 800340e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003410:	4b84      	ldr	r3, [pc, #528]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_RCC_OscConfig+0x2b4>
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <HAL_RCC_OscConfig+0x2b6>
 8003420:	2300      	movs	r3, #0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	4b7f      	ldr	r3, [pc, #508]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	4a7e      	ldr	r2, [pc, #504]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 800342c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003430:	6593      	str	r3, [r2, #88]	; 0x58
 8003432:	4b7c      	ldr	r3, [pc, #496]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800343e:	2301      	movs	r3, #1
 8003440:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003442:	4b79      	ldr	r3, [pc, #484]	; (8003628 <HAL_RCC_OscConfig+0x4bc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d118      	bne.n	8003480 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800344e:	4b76      	ldr	r3, [pc, #472]	; (8003628 <HAL_RCC_OscConfig+0x4bc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a75      	ldr	r2, [pc, #468]	; (8003628 <HAL_RCC_OscConfig+0x4bc>)
 8003454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345a:	f7fe f957 	bl	800170c <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003462:	f7fe f953 	bl	800170c <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e18b      	b.n	800378c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003474:	4b6c      	ldr	r3, [pc, #432]	; (8003628 <HAL_RCC_OscConfig+0x4bc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d108      	bne.n	800349a <HAL_RCC_OscConfig+0x32e>
 8003488:	4b66      	ldr	r3, [pc, #408]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348e:	4a65      	ldr	r2, [pc, #404]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003498:	e024      	b.n	80034e4 <HAL_RCC_OscConfig+0x378>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d110      	bne.n	80034c4 <HAL_RCC_OscConfig+0x358>
 80034a2:	4b60      	ldr	r3, [pc, #384]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a8:	4a5e      	ldr	r2, [pc, #376]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 80034aa:	f043 0304 	orr.w	r3, r3, #4
 80034ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034b2:	4b5c      	ldr	r3, [pc, #368]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b8:	4a5a      	ldr	r2, [pc, #360]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034c2:	e00f      	b.n	80034e4 <HAL_RCC_OscConfig+0x378>
 80034c4:	4b57      	ldr	r3, [pc, #348]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	4a56      	ldr	r2, [pc, #344]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034d4:	4b53      	ldr	r3, [pc, #332]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	4a52      	ldr	r2, [pc, #328]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 80034dc:	f023 0304 	bic.w	r3, r3, #4
 80034e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d016      	beq.n	800351a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ec:	f7fe f90e 	bl	800170c <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f2:	e00a      	b.n	800350a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f4:	f7fe f90a 	bl	800170c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e140      	b.n	800378c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800350a:	4b46      	ldr	r3, [pc, #280]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0ed      	beq.n	80034f4 <HAL_RCC_OscConfig+0x388>
 8003518:	e015      	b.n	8003546 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351a:	f7fe f8f7 	bl	800170c <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003520:	e00a      	b.n	8003538 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003522:	f7fe f8f3 	bl	800170c <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003530:	4293      	cmp	r3, r2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e129      	b.n	800378c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003538:	4b3a      	ldr	r3, [pc, #232]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1ed      	bne.n	8003522 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003546:	7ffb      	ldrb	r3, [r7, #31]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d105      	bne.n	8003558 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354c:	4b35      	ldr	r3, [pc, #212]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	4a34      	ldr	r2, [pc, #208]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 8003552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003556:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0320 	and.w	r3, r3, #32
 8003560:	2b00      	cmp	r3, #0
 8003562:	d03c      	beq.n	80035de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01c      	beq.n	80035a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800356c:	4b2d      	ldr	r3, [pc, #180]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 800356e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003572:	4a2c      	ldr	r2, [pc, #176]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fe f8c6 	bl	800170c <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003584:	f7fe f8c2 	bl	800170c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e0fa      	b.n	800378c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003596:	4b23      	ldr	r3, [pc, #140]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 8003598:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ef      	beq.n	8003584 <HAL_RCC_OscConfig+0x418>
 80035a4:	e01b      	b.n	80035de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035a6:	4b1f      	ldr	r3, [pc, #124]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 80035a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035ac:	4a1d      	ldr	r2, [pc, #116]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b6:	f7fe f8a9 	bl	800170c <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035be:	f7fe f8a5 	bl	800170c <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e0dd      	b.n	800378c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035d0:	4b14      	ldr	r3, [pc, #80]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 80035d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1ef      	bne.n	80035be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 80d1 	beq.w	800378a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035e8:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	f000 808b 	beq.w	800370c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d15e      	bne.n	80036bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a08      	ldr	r2, [pc, #32]	; (8003624 <HAL_RCC_OscConfig+0x4b8>)
 8003604:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360a:	f7fe f87f 	bl	800170c <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003610:	e00c      	b.n	800362c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003612:	f7fe f87b 	bl	800170c <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d905      	bls.n	800362c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e0b3      	b.n	800378c <HAL_RCC_OscConfig+0x620>
 8003624:	40021000 	.word	0x40021000
 8003628:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800362c:	4b59      	ldr	r3, [pc, #356]	; (8003794 <HAL_RCC_OscConfig+0x628>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ec      	bne.n	8003612 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003638:	4b56      	ldr	r3, [pc, #344]	; (8003794 <HAL_RCC_OscConfig+0x628>)
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	4b56      	ldr	r3, [pc, #344]	; (8003798 <HAL_RCC_OscConfig+0x62c>)
 800363e:	4013      	ands	r3, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6a11      	ldr	r1, [r2, #32]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003648:	3a01      	subs	r2, #1
 800364a:	0112      	lsls	r2, r2, #4
 800364c:	4311      	orrs	r1, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003652:	0212      	lsls	r2, r2, #8
 8003654:	4311      	orrs	r1, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800365a:	0852      	lsrs	r2, r2, #1
 800365c:	3a01      	subs	r2, #1
 800365e:	0552      	lsls	r2, r2, #21
 8003660:	4311      	orrs	r1, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003666:	0852      	lsrs	r2, r2, #1
 8003668:	3a01      	subs	r2, #1
 800366a:	0652      	lsls	r2, r2, #25
 800366c:	4311      	orrs	r1, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003672:	06d2      	lsls	r2, r2, #27
 8003674:	430a      	orrs	r2, r1
 8003676:	4947      	ldr	r1, [pc, #284]	; (8003794 <HAL_RCC_OscConfig+0x628>)
 8003678:	4313      	orrs	r3, r2
 800367a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800367c:	4b45      	ldr	r3, [pc, #276]	; (8003794 <HAL_RCC_OscConfig+0x628>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a44      	ldr	r2, [pc, #272]	; (8003794 <HAL_RCC_OscConfig+0x628>)
 8003682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003686:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003688:	4b42      	ldr	r3, [pc, #264]	; (8003794 <HAL_RCC_OscConfig+0x628>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4a41      	ldr	r2, [pc, #260]	; (8003794 <HAL_RCC_OscConfig+0x628>)
 800368e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003692:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fe f83a 	bl	800170c <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369c:	f7fe f836 	bl	800170c <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e06e      	b.n	800378c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ae:	4b39      	ldr	r3, [pc, #228]	; (8003794 <HAL_RCC_OscConfig+0x628>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x530>
 80036ba:	e066      	b.n	800378a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036bc:	4b35      	ldr	r3, [pc, #212]	; (8003794 <HAL_RCC_OscConfig+0x628>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a34      	ldr	r2, [pc, #208]	; (8003794 <HAL_RCC_OscConfig+0x628>)
 80036c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036c8:	4b32      	ldr	r3, [pc, #200]	; (8003794 <HAL_RCC_OscConfig+0x628>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4a31      	ldr	r2, [pc, #196]	; (8003794 <HAL_RCC_OscConfig+0x628>)
 80036ce:	f023 0303 	bic.w	r3, r3, #3
 80036d2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80036d4:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <HAL_RCC_OscConfig+0x628>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4a2e      	ldr	r2, [pc, #184]	; (8003794 <HAL_RCC_OscConfig+0x628>)
 80036da:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe f812 	bl	800170c <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fe f80e 	bl	800170c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e046      	b.n	800378c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036fe:	4b25      	ldr	r3, [pc, #148]	; (8003794 <HAL_RCC_OscConfig+0x628>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x580>
 800370a:	e03e      	b.n	800378a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e039      	b.n	800378c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003718:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <HAL_RCC_OscConfig+0x628>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f003 0203 	and.w	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	429a      	cmp	r2, r3
 800372a:	d12c      	bne.n	8003786 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	3b01      	subs	r3, #1
 8003738:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d123      	bne.n	8003786 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d11b      	bne.n	8003786 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d113      	bne.n	8003786 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	085b      	lsrs	r3, r3, #1
 800376a:	3b01      	subs	r3, #1
 800376c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800376e:	429a      	cmp	r2, r3
 8003770:	d109      	bne.n	8003786 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	3b01      	subs	r3, #1
 8003780:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003782:	429a      	cmp	r2, r3
 8003784:	d001      	beq.n	800378a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	019f800c 	.word	0x019f800c

0800379c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e11e      	b.n	80039f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b4:	4b91      	ldr	r3, [pc, #580]	; (80039fc <HAL_RCC_ClockConfig+0x260>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d910      	bls.n	80037e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c2:	4b8e      	ldr	r3, [pc, #568]	; (80039fc <HAL_RCC_ClockConfig+0x260>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 020f 	bic.w	r2, r3, #15
 80037ca:	498c      	ldr	r1, [pc, #560]	; (80039fc <HAL_RCC_ClockConfig+0x260>)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b8a      	ldr	r3, [pc, #552]	; (80039fc <HAL_RCC_ClockConfig+0x260>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e106      	b.n	80039f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d073      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d129      	bne.n	800384c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f8:	4b81      	ldr	r3, [pc, #516]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0f4      	b.n	80039f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003808:	f000 f99e 	bl	8003b48 <RCC_GetSysClockFreqFromPLLSource>
 800380c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4a7c      	ldr	r2, [pc, #496]	; (8003a04 <HAL_RCC_ClockConfig+0x268>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d93f      	bls.n	8003896 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003816:	4b7a      	ldr	r3, [pc, #488]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800382a:	2b00      	cmp	r3, #0
 800382c:	d033      	beq.n	8003896 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003832:	2b00      	cmp	r3, #0
 8003834:	d12f      	bne.n	8003896 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003836:	4b72      	ldr	r3, [pc, #456]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800383e:	4a70      	ldr	r2, [pc, #448]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003844:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	e024      	b.n	8003896 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d107      	bne.n	8003864 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003854:	4b6a      	ldr	r3, [pc, #424]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d109      	bne.n	8003874 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0c6      	b.n	80039f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003864:	4b66      	ldr	r3, [pc, #408]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0be      	b.n	80039f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003874:	f000 f8ce 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 8003878:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4a61      	ldr	r2, [pc, #388]	; (8003a04 <HAL_RCC_ClockConfig+0x268>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d909      	bls.n	8003896 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003882:	4b5f      	ldr	r3, [pc, #380]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800388a:	4a5d      	ldr	r2, [pc, #372]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 800388c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003890:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003896:	4b5a      	ldr	r3, [pc, #360]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f023 0203 	bic.w	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	4957      	ldr	r1, [pc, #348]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a8:	f7fd ff30 	bl	800170c <HAL_GetTick>
 80038ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b0:	f7fd ff2c 	bl	800170c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e095      	b.n	80039f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c6:	4b4e      	ldr	r3, [pc, #312]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 020c 	and.w	r2, r3, #12
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d1eb      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d023      	beq.n	800392c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f0:	4b43      	ldr	r3, [pc, #268]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4a42      	ldr	r2, [pc, #264]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80038f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003908:	4b3d      	ldr	r3, [pc, #244]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003910:	4a3b      	ldr	r2, [pc, #236]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003912:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003916:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003918:	4b39      	ldr	r3, [pc, #228]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	4936      	ldr	r1, [pc, #216]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
 800392a:	e008      	b.n	800393e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2b80      	cmp	r3, #128	; 0x80
 8003930:	d105      	bne.n	800393e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003932:	4b33      	ldr	r3, [pc, #204]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	4a32      	ldr	r2, [pc, #200]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003938:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800393c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800393e:	4b2f      	ldr	r3, [pc, #188]	; (80039fc <HAL_RCC_ClockConfig+0x260>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d21d      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394c:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <HAL_RCC_ClockConfig+0x260>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f023 020f 	bic.w	r2, r3, #15
 8003954:	4929      	ldr	r1, [pc, #164]	; (80039fc <HAL_RCC_ClockConfig+0x260>)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	4313      	orrs	r3, r2
 800395a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800395c:	f7fd fed6 	bl	800170c <HAL_GetTick>
 8003960:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003962:	e00a      	b.n	800397a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003964:	f7fd fed2 	bl	800170c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e03b      	b.n	80039f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b20      	ldr	r3, [pc, #128]	; (80039fc <HAL_RCC_ClockConfig+0x260>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d1ed      	bne.n	8003964 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003994:	4b1a      	ldr	r3, [pc, #104]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4917      	ldr	r1, [pc, #92]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b2:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	490f      	ldr	r1, [pc, #60]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039c6:	f000 f825 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 80039ca:	4602      	mov	r2, r0
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <HAL_RCC_ClockConfig+0x264>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	490c      	ldr	r1, [pc, #48]	; (8003a08 <HAL_RCC_ClockConfig+0x26c>)
 80039d8:	5ccb      	ldrb	r3, [r1, r3]
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	fa22 f303 	lsr.w	r3, r2, r3
 80039e2:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <HAL_RCC_ClockConfig+0x270>)
 80039e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <HAL_RCC_ClockConfig+0x274>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fd fe42 	bl	8001674 <HAL_InitTick>
 80039f0:	4603      	mov	r3, r0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40022000 	.word	0x40022000
 8003a00:	40021000 	.word	0x40021000
 8003a04:	04c4b400 	.word	0x04c4b400
 8003a08:	08005e70 	.word	0x08005e70
 8003a0c:	20000000 	.word	0x20000000
 8003a10:	20000004 	.word	0x20000004

08003a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a1a:	4b2c      	ldr	r3, [pc, #176]	; (8003acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d102      	bne.n	8003a2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a26:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	e047      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a2c:	4b27      	ldr	r3, [pc, #156]	; (8003acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 030c 	and.w	r3, r3, #12
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d102      	bne.n	8003a3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a38:	4b26      	ldr	r3, [pc, #152]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	e03e      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a3e:	4b23      	ldr	r3, [pc, #140]	; (8003acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	2b0c      	cmp	r3, #12
 8003a48:	d136      	bne.n	8003ab8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a54:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	3301      	adds	r3, #1
 8003a60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d10c      	bne.n	8003a82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a68:	4a1a      	ldr	r2, [pc, #104]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	4a16      	ldr	r2, [pc, #88]	; (8003acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a72:	68d2      	ldr	r2, [r2, #12]
 8003a74:	0a12      	lsrs	r2, r2, #8
 8003a76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a7a:	fb02 f303 	mul.w	r3, r2, r3
 8003a7e:	617b      	str	r3, [r7, #20]
      break;
 8003a80:	e00c      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a82:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8a:	4a10      	ldr	r2, [pc, #64]	; (8003acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a8c:	68d2      	ldr	r2, [r2, #12]
 8003a8e:	0a12      	lsrs	r2, r2, #8
 8003a90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a94:	fb02 f303 	mul.w	r3, r2, r3
 8003a98:	617b      	str	r3, [r7, #20]
      break;
 8003a9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	0e5b      	lsrs	r3, r3, #25
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	e001      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003abc:	693b      	ldr	r3, [r7, #16]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	00f42400 	.word	0x00f42400
 8003ad4:	007a1200 	.word	0x007a1200

08003ad8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <HAL_RCC_GetHCLKFreq+0x14>)
 8003ade:	681b      	ldr	r3, [r3, #0]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20000000 	.word	0x20000000

08003af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003af4:	f7ff fff0 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	4904      	ldr	r1, [pc, #16]	; (8003b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b06:	5ccb      	ldrb	r3, [r1, r3]
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000
 8003b18:	08005e80 	.word	0x08005e80

08003b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b20:	f7ff ffda 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	0adb      	lsrs	r3, r3, #11
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	4904      	ldr	r1, [pc, #16]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b32:	5ccb      	ldrb	r3, [r1, r3]
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	08005e80 	.word	0x08005e80

08003b48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b58:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	3301      	adds	r3, #1
 8003b64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d10c      	bne.n	8003b86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b6c:	4a17      	ldr	r2, [pc, #92]	; (8003bcc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	4a14      	ldr	r2, [pc, #80]	; (8003bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b76:	68d2      	ldr	r2, [r2, #12]
 8003b78:	0a12      	lsrs	r2, r2, #8
 8003b7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b7e:	fb02 f303 	mul.w	r3, r2, r3
 8003b82:	617b      	str	r3, [r7, #20]
    break;
 8003b84:	e00c      	b.n	8003ba0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b86:	4a12      	ldr	r2, [pc, #72]	; (8003bd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	4a0e      	ldr	r2, [pc, #56]	; (8003bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b90:	68d2      	ldr	r2, [r2, #12]
 8003b92:	0a12      	lsrs	r2, r2, #8
 8003b94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b98:	fb02 f303 	mul.w	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]
    break;
 8003b9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ba0:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	0e5b      	lsrs	r3, r3, #25
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	3301      	adds	r3, #1
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003bba:	687b      	ldr	r3, [r7, #4]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	007a1200 	.word	0x007a1200
 8003bd0:	00f42400 	.word	0x00f42400

08003bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bdc:	2300      	movs	r3, #0
 8003bde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003be0:	2300      	movs	r3, #0
 8003be2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8098 	beq.w	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf6:	4b43      	ldr	r3, [pc, #268]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10d      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c02:	4b40      	ldr	r3, [pc, #256]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c06:	4a3f      	ldr	r2, [pc, #252]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c0e:	4b3d      	ldr	r3, [pc, #244]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c1e:	4b3a      	ldr	r3, [pc, #232]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a39      	ldr	r2, [pc, #228]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c2a:	f7fd fd6f 	bl	800170c <HAL_GetTick>
 8003c2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c30:	e009      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c32:	f7fd fd6b 	bl	800170c <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d902      	bls.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	74fb      	strb	r3, [r7, #19]
        break;
 8003c44:	e005      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c46:	4b30      	ldr	r3, [pc, #192]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0ef      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c52:	7cfb      	ldrb	r3, [r7, #19]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d159      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c58:	4b2a      	ldr	r3, [pc, #168]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d01e      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d019      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c74:	4b23      	ldr	r3, [pc, #140]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c80:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c86:	4a1f      	ldr	r2, [pc, #124]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c90:	4b1c      	ldr	r3, [pc, #112]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	4a1b      	ldr	r2, [pc, #108]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ca0:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d016      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fd fd2b 	bl	800170c <HAL_GetTick>
 8003cb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb8:	e00b      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cba:	f7fd fd27 	bl	800170c <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d902      	bls.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	74fb      	strb	r3, [r7, #19]
            break;
 8003cd0:	e006      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ec      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ce0:	7cfb      	ldrb	r3, [r7, #19]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10b      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce6:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	4903      	ldr	r1, [pc, #12]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cfc:	e008      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cfe:	7cfb      	ldrb	r3, [r7, #19]
 8003d00:	74bb      	strb	r3, [r7, #18]
 8003d02:	e005      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
 8003d0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d10:	7c7b      	ldrb	r3, [r7, #17]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d105      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d16:	4ba6      	ldr	r3, [pc, #664]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1a:	4aa5      	ldr	r2, [pc, #660]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d2e:	4ba0      	ldr	r3, [pc, #640]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d34:	f023 0203 	bic.w	r2, r3, #3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	499c      	ldr	r1, [pc, #624]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d50:	4b97      	ldr	r3, [pc, #604]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d56:	f023 020c 	bic.w	r2, r3, #12
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	4994      	ldr	r1, [pc, #592]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d72:	4b8f      	ldr	r3, [pc, #572]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	498b      	ldr	r1, [pc, #556]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d94:	4b86      	ldr	r3, [pc, #536]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	4983      	ldr	r1, [pc, #524]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003db6:	4b7e      	ldr	r3, [pc, #504]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	497a      	ldr	r1, [pc, #488]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dd8:	4b75      	ldr	r3, [pc, #468]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dde:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	4972      	ldr	r1, [pc, #456]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dfa:	4b6d      	ldr	r3, [pc, #436]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	4969      	ldr	r1, [pc, #420]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e1c:	4b64      	ldr	r3, [pc, #400]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4961      	ldr	r1, [pc, #388]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e3e:	4b5c      	ldr	r3, [pc, #368]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	4958      	ldr	r1, [pc, #352]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d015      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e60:	4b53      	ldr	r3, [pc, #332]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	4950      	ldr	r1, [pc, #320]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e7e:	d105      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e80:	4b4b      	ldr	r3, [pc, #300]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4a4a      	ldr	r2, [pc, #296]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d015      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e98:	4b45      	ldr	r3, [pc, #276]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	4942      	ldr	r1, [pc, #264]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eb6:	d105      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb8:	4b3d      	ldr	r3, [pc, #244]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a3c      	ldr	r2, [pc, #240]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ec2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d015      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ed0:	4b37      	ldr	r3, [pc, #220]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	4934      	ldr	r1, [pc, #208]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eee:	d105      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef0:	4b2f      	ldr	r3, [pc, #188]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a2e      	ldr	r2, [pc, #184]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003efa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d015      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f08:	4b29      	ldr	r3, [pc, #164]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f16:	4926      	ldr	r1, [pc, #152]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f26:	d105      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f28:	4b21      	ldr	r3, [pc, #132]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4a20      	ldr	r2, [pc, #128]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f32:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d015      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f40:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	4918      	ldr	r1, [pc, #96]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f5e:	d105      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f60:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4a12      	ldr	r2, [pc, #72]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d015      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f78:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	490a      	ldr	r1, [pc, #40]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f96:	d105      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f98:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003fa4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000

08003fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e049      	b.n	800405a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fc fdf6 	bl	8000bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	f000 faa4 	bl	8004540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e049      	b.n	8004108 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d106      	bne.n	800408e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f841 	bl	8004110 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f000 fa4d 	bl	8004540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800413e:	2302      	movs	r3, #2
 8004140:	e0ff      	b.n	8004342 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b14      	cmp	r3, #20
 800414e:	f200 80f0 	bhi.w	8004332 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	080041ad 	.word	0x080041ad
 800415c:	08004333 	.word	0x08004333
 8004160:	08004333 	.word	0x08004333
 8004164:	08004333 	.word	0x08004333
 8004168:	080041ed 	.word	0x080041ed
 800416c:	08004333 	.word	0x08004333
 8004170:	08004333 	.word	0x08004333
 8004174:	08004333 	.word	0x08004333
 8004178:	0800422f 	.word	0x0800422f
 800417c:	08004333 	.word	0x08004333
 8004180:	08004333 	.word	0x08004333
 8004184:	08004333 	.word	0x08004333
 8004188:	0800426f 	.word	0x0800426f
 800418c:	08004333 	.word	0x08004333
 8004190:	08004333 	.word	0x08004333
 8004194:	08004333 	.word	0x08004333
 8004198:	080042b1 	.word	0x080042b1
 800419c:	08004333 	.word	0x08004333
 80041a0:	08004333 	.word	0x08004333
 80041a4:	08004333 	.word	0x08004333
 80041a8:	080042f1 	.word	0x080042f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fa54 	bl	8004660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0208 	orr.w	r2, r2, #8
 80041c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0204 	bic.w	r2, r2, #4
 80041d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6999      	ldr	r1, [r3, #24]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	619a      	str	r2, [r3, #24]
      break;
 80041ea:	e0a5      	b.n	8004338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fac4 	bl	8004780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6999      	ldr	r1, [r3, #24]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	021a      	lsls	r2, r3, #8
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	619a      	str	r2, [r3, #24]
      break;
 800422c:	e084      	b.n	8004338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fb2d 	bl	8004894 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69da      	ldr	r2, [r3, #28]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0208 	orr.w	r2, r2, #8
 8004248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0204 	bic.w	r2, r2, #4
 8004258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69d9      	ldr	r1, [r3, #28]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	61da      	str	r2, [r3, #28]
      break;
 800426c:	e064      	b.n	8004338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68b9      	ldr	r1, [r7, #8]
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fb95 	bl	80049a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69da      	ldr	r2, [r3, #28]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69d9      	ldr	r1, [r3, #28]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	021a      	lsls	r2, r3, #8
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	61da      	str	r2, [r3, #28]
      break;
 80042ae:	e043      	b.n	8004338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68b9      	ldr	r1, [r7, #8]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fbfe 	bl	8004ab8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0208 	orr.w	r2, r2, #8
 80042ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0204 	bic.w	r2, r2, #4
 80042da:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80042ee:	e023      	b.n	8004338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fc42 	bl	8004b80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800430a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	021a      	lsls	r2, r3, #8
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004330:	e002      	b.n	8004338 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	75fb      	strb	r3, [r7, #23]
      break;
 8004336:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004340:	7dfb      	ldrb	r3, [r7, #23]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop

0800434c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_TIM_ConfigClockSource+0x1c>
 8004364:	2302      	movs	r3, #2
 8004366:	e0de      	b.n	8004526 <HAL_TIM_ConfigClockSource+0x1da>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004386:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800438a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004392:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a63      	ldr	r2, [pc, #396]	; (8004530 <HAL_TIM_ConfigClockSource+0x1e4>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	f000 80a9 	beq.w	80044fa <HAL_TIM_ConfigClockSource+0x1ae>
 80043a8:	4a61      	ldr	r2, [pc, #388]	; (8004530 <HAL_TIM_ConfigClockSource+0x1e4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	f200 80ae 	bhi.w	800450c <HAL_TIM_ConfigClockSource+0x1c0>
 80043b0:	4a60      	ldr	r2, [pc, #384]	; (8004534 <HAL_TIM_ConfigClockSource+0x1e8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	f000 80a1 	beq.w	80044fa <HAL_TIM_ConfigClockSource+0x1ae>
 80043b8:	4a5e      	ldr	r2, [pc, #376]	; (8004534 <HAL_TIM_ConfigClockSource+0x1e8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	f200 80a6 	bhi.w	800450c <HAL_TIM_ConfigClockSource+0x1c0>
 80043c0:	4a5d      	ldr	r2, [pc, #372]	; (8004538 <HAL_TIM_ConfigClockSource+0x1ec>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	f000 8099 	beq.w	80044fa <HAL_TIM_ConfigClockSource+0x1ae>
 80043c8:	4a5b      	ldr	r2, [pc, #364]	; (8004538 <HAL_TIM_ConfigClockSource+0x1ec>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	f200 809e 	bhi.w	800450c <HAL_TIM_ConfigClockSource+0x1c0>
 80043d0:	4a5a      	ldr	r2, [pc, #360]	; (800453c <HAL_TIM_ConfigClockSource+0x1f0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	f000 8091 	beq.w	80044fa <HAL_TIM_ConfigClockSource+0x1ae>
 80043d8:	4a58      	ldr	r2, [pc, #352]	; (800453c <HAL_TIM_ConfigClockSource+0x1f0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	f200 8096 	bhi.w	800450c <HAL_TIM_ConfigClockSource+0x1c0>
 80043e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80043e4:	f000 8089 	beq.w	80044fa <HAL_TIM_ConfigClockSource+0x1ae>
 80043e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80043ec:	f200 808e 	bhi.w	800450c <HAL_TIM_ConfigClockSource+0x1c0>
 80043f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f4:	d03e      	beq.n	8004474 <HAL_TIM_ConfigClockSource+0x128>
 80043f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043fa:	f200 8087 	bhi.w	800450c <HAL_TIM_ConfigClockSource+0x1c0>
 80043fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004402:	f000 8086 	beq.w	8004512 <HAL_TIM_ConfigClockSource+0x1c6>
 8004406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440a:	d87f      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x1c0>
 800440c:	2b70      	cmp	r3, #112	; 0x70
 800440e:	d01a      	beq.n	8004446 <HAL_TIM_ConfigClockSource+0xfa>
 8004410:	2b70      	cmp	r3, #112	; 0x70
 8004412:	d87b      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x1c0>
 8004414:	2b60      	cmp	r3, #96	; 0x60
 8004416:	d050      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0x16e>
 8004418:	2b60      	cmp	r3, #96	; 0x60
 800441a:	d877      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x1c0>
 800441c:	2b50      	cmp	r3, #80	; 0x50
 800441e:	d03c      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x14e>
 8004420:	2b50      	cmp	r3, #80	; 0x50
 8004422:	d873      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x1c0>
 8004424:	2b40      	cmp	r3, #64	; 0x40
 8004426:	d058      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x18e>
 8004428:	2b40      	cmp	r3, #64	; 0x40
 800442a:	d86f      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x1c0>
 800442c:	2b30      	cmp	r3, #48	; 0x30
 800442e:	d064      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0x1ae>
 8004430:	2b30      	cmp	r3, #48	; 0x30
 8004432:	d86b      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x1c0>
 8004434:	2b20      	cmp	r3, #32
 8004436:	d060      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0x1ae>
 8004438:	2b20      	cmp	r3, #32
 800443a:	d867      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x1c0>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d05c      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0x1ae>
 8004440:	2b10      	cmp	r3, #16
 8004442:	d05a      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0x1ae>
 8004444:	e062      	b.n	800450c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	6899      	ldr	r1, [r3, #8]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f000 fcdd 	bl	8004e14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004468:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	609a      	str	r2, [r3, #8]
      break;
 8004472:	e04f      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	6899      	ldr	r1, [r3, #8]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f000 fcc6 	bl	8004e14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004496:	609a      	str	r2, [r3, #8]
      break;
 8004498:	e03c      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6859      	ldr	r1, [r3, #4]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	461a      	mov	r2, r3
 80044a8:	f000 fc38 	bl	8004d1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2150      	movs	r1, #80	; 0x50
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fc91 	bl	8004dda <TIM_ITRx_SetConfig>
      break;
 80044b8:	e02c      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6859      	ldr	r1, [r3, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	461a      	mov	r2, r3
 80044c8:	f000 fc57 	bl	8004d7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2160      	movs	r1, #96	; 0x60
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fc81 	bl	8004dda <TIM_ITRx_SetConfig>
      break;
 80044d8:	e01c      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6859      	ldr	r1, [r3, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	461a      	mov	r2, r3
 80044e8:	f000 fc18 	bl	8004d1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2140      	movs	r1, #64	; 0x40
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fc71 	bl	8004dda <TIM_ITRx_SetConfig>
      break;
 80044f8:	e00c      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4619      	mov	r1, r3
 8004504:	4610      	mov	r0, r2
 8004506:	f000 fc68 	bl	8004dda <TIM_ITRx_SetConfig>
      break;
 800450a:	e003      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
      break;
 8004510:	e000      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004512:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004524:	7bfb      	ldrb	r3, [r7, #15]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	00100070 	.word	0x00100070
 8004534:	00100040 	.word	0x00100040
 8004538:	00100030 	.word	0x00100030
 800453c:	00100020 	.word	0x00100020

08004540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a3c      	ldr	r2, [pc, #240]	; (8004644 <TIM_Base_SetConfig+0x104>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00f      	beq.n	8004578 <TIM_Base_SetConfig+0x38>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455e:	d00b      	beq.n	8004578 <TIM_Base_SetConfig+0x38>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a39      	ldr	r2, [pc, #228]	; (8004648 <TIM_Base_SetConfig+0x108>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d007      	beq.n	8004578 <TIM_Base_SetConfig+0x38>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a38      	ldr	r2, [pc, #224]	; (800464c <TIM_Base_SetConfig+0x10c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_Base_SetConfig+0x38>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a37      	ldr	r2, [pc, #220]	; (8004650 <TIM_Base_SetConfig+0x110>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d108      	bne.n	800458a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a2d      	ldr	r2, [pc, #180]	; (8004644 <TIM_Base_SetConfig+0x104>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d01b      	beq.n	80045ca <TIM_Base_SetConfig+0x8a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004598:	d017      	beq.n	80045ca <TIM_Base_SetConfig+0x8a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a2a      	ldr	r2, [pc, #168]	; (8004648 <TIM_Base_SetConfig+0x108>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <TIM_Base_SetConfig+0x8a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a29      	ldr	r2, [pc, #164]	; (800464c <TIM_Base_SetConfig+0x10c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00f      	beq.n	80045ca <TIM_Base_SetConfig+0x8a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a28      	ldr	r2, [pc, #160]	; (8004650 <TIM_Base_SetConfig+0x110>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00b      	beq.n	80045ca <TIM_Base_SetConfig+0x8a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a27      	ldr	r2, [pc, #156]	; (8004654 <TIM_Base_SetConfig+0x114>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d007      	beq.n	80045ca <TIM_Base_SetConfig+0x8a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a26      	ldr	r2, [pc, #152]	; (8004658 <TIM_Base_SetConfig+0x118>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_Base_SetConfig+0x8a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a25      	ldr	r2, [pc, #148]	; (800465c <TIM_Base_SetConfig+0x11c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d108      	bne.n	80045dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a10      	ldr	r2, [pc, #64]	; (8004644 <TIM_Base_SetConfig+0x104>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00f      	beq.n	8004628 <TIM_Base_SetConfig+0xe8>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a11      	ldr	r2, [pc, #68]	; (8004650 <TIM_Base_SetConfig+0x110>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00b      	beq.n	8004628 <TIM_Base_SetConfig+0xe8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a10      	ldr	r2, [pc, #64]	; (8004654 <TIM_Base_SetConfig+0x114>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d007      	beq.n	8004628 <TIM_Base_SetConfig+0xe8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a0f      	ldr	r2, [pc, #60]	; (8004658 <TIM_Base_SetConfig+0x118>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d003      	beq.n	8004628 <TIM_Base_SetConfig+0xe8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a0e      	ldr	r2, [pc, #56]	; (800465c <TIM_Base_SetConfig+0x11c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d103      	bne.n	8004630 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	615a      	str	r2, [r3, #20]
}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40012c00 	.word	0x40012c00
 8004648:	40000400 	.word	0x40000400
 800464c:	40000800 	.word	0x40000800
 8004650:	40013400 	.word	0x40013400
 8004654:	40014000 	.word	0x40014000
 8004658:	40014400 	.word	0x40014400
 800465c:	40014800 	.word	0x40014800

08004660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	f023 0201 	bic.w	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800468e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f023 0302 	bic.w	r3, r3, #2
 80046ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a2c      	ldr	r2, [pc, #176]	; (800476c <TIM_OC1_SetConfig+0x10c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00f      	beq.n	80046e0 <TIM_OC1_SetConfig+0x80>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a2b      	ldr	r2, [pc, #172]	; (8004770 <TIM_OC1_SetConfig+0x110>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00b      	beq.n	80046e0 <TIM_OC1_SetConfig+0x80>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a2a      	ldr	r2, [pc, #168]	; (8004774 <TIM_OC1_SetConfig+0x114>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d007      	beq.n	80046e0 <TIM_OC1_SetConfig+0x80>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a29      	ldr	r2, [pc, #164]	; (8004778 <TIM_OC1_SetConfig+0x118>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_OC1_SetConfig+0x80>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a28      	ldr	r2, [pc, #160]	; (800477c <TIM_OC1_SetConfig+0x11c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10c      	bne.n	80046fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f023 0308 	bic.w	r3, r3, #8
 80046e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f023 0304 	bic.w	r3, r3, #4
 80046f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a1b      	ldr	r2, [pc, #108]	; (800476c <TIM_OC1_SetConfig+0x10c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00f      	beq.n	8004722 <TIM_OC1_SetConfig+0xc2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a1a      	ldr	r2, [pc, #104]	; (8004770 <TIM_OC1_SetConfig+0x110>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00b      	beq.n	8004722 <TIM_OC1_SetConfig+0xc2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a19      	ldr	r2, [pc, #100]	; (8004774 <TIM_OC1_SetConfig+0x114>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d007      	beq.n	8004722 <TIM_OC1_SetConfig+0xc2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a18      	ldr	r2, [pc, #96]	; (8004778 <TIM_OC1_SetConfig+0x118>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d003      	beq.n	8004722 <TIM_OC1_SetConfig+0xc2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a17      	ldr	r2, [pc, #92]	; (800477c <TIM_OC1_SetConfig+0x11c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d111      	bne.n	8004746 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	621a      	str	r2, [r3, #32]
}
 8004760:	bf00      	nop
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	40012c00 	.word	0x40012c00
 8004770:	40013400 	.word	0x40013400
 8004774:	40014000 	.word	0x40014000
 8004778:	40014400 	.word	0x40014400
 800477c:	40014800 	.word	0x40014800

08004780 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f023 0210 	bic.w	r2, r3, #16
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0320 	bic.w	r3, r3, #32
 80047ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a28      	ldr	r2, [pc, #160]	; (8004880 <TIM_OC2_SetConfig+0x100>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d003      	beq.n	80047ec <TIM_OC2_SetConfig+0x6c>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a27      	ldr	r2, [pc, #156]	; (8004884 <TIM_OC2_SetConfig+0x104>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d10d      	bne.n	8004808 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004806:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a1d      	ldr	r2, [pc, #116]	; (8004880 <TIM_OC2_SetConfig+0x100>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00f      	beq.n	8004830 <TIM_OC2_SetConfig+0xb0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <TIM_OC2_SetConfig+0x104>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00b      	beq.n	8004830 <TIM_OC2_SetConfig+0xb0>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <TIM_OC2_SetConfig+0x108>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d007      	beq.n	8004830 <TIM_OC2_SetConfig+0xb0>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a1a      	ldr	r2, [pc, #104]	; (800488c <TIM_OC2_SetConfig+0x10c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d003      	beq.n	8004830 <TIM_OC2_SetConfig+0xb0>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a19      	ldr	r2, [pc, #100]	; (8004890 <TIM_OC2_SetConfig+0x110>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d113      	bne.n	8004858 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800483e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40012c00 	.word	0x40012c00
 8004884:	40013400 	.word	0x40013400
 8004888:	40014000 	.word	0x40014000
 800488c:	40014400 	.word	0x40014400
 8004890:	40014800 	.word	0x40014800

08004894 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0303 	bic.w	r3, r3, #3
 80048ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	021b      	lsls	r3, r3, #8
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a27      	ldr	r2, [pc, #156]	; (8004990 <TIM_OC3_SetConfig+0xfc>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d003      	beq.n	80048fe <TIM_OC3_SetConfig+0x6a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a26      	ldr	r2, [pc, #152]	; (8004994 <TIM_OC3_SetConfig+0x100>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d10d      	bne.n	800491a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004904:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a1c      	ldr	r2, [pc, #112]	; (8004990 <TIM_OC3_SetConfig+0xfc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00f      	beq.n	8004942 <TIM_OC3_SetConfig+0xae>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a1b      	ldr	r2, [pc, #108]	; (8004994 <TIM_OC3_SetConfig+0x100>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00b      	beq.n	8004942 <TIM_OC3_SetConfig+0xae>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a1a      	ldr	r2, [pc, #104]	; (8004998 <TIM_OC3_SetConfig+0x104>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d007      	beq.n	8004942 <TIM_OC3_SetConfig+0xae>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a19      	ldr	r2, [pc, #100]	; (800499c <TIM_OC3_SetConfig+0x108>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d003      	beq.n	8004942 <TIM_OC3_SetConfig+0xae>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a18      	ldr	r2, [pc, #96]	; (80049a0 <TIM_OC3_SetConfig+0x10c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d113      	bne.n	800496a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	621a      	str	r2, [r3, #32]
}
 8004984:	bf00      	nop
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	40012c00 	.word	0x40012c00
 8004994:	40013400 	.word	0x40013400
 8004998:	40014000 	.word	0x40014000
 800499c:	40014400 	.word	0x40014400
 80049a0:	40014800 	.word	0x40014800

080049a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	031b      	lsls	r3, r3, #12
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a28      	ldr	r2, [pc, #160]	; (8004aa4 <TIM_OC4_SetConfig+0x100>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d003      	beq.n	8004a10 <TIM_OC4_SetConfig+0x6c>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a27      	ldr	r2, [pc, #156]	; (8004aa8 <TIM_OC4_SetConfig+0x104>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d10d      	bne.n	8004a2c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	031b      	lsls	r3, r3, #12
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <TIM_OC4_SetConfig+0x100>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00f      	beq.n	8004a54 <TIM_OC4_SetConfig+0xb0>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a1c      	ldr	r2, [pc, #112]	; (8004aa8 <TIM_OC4_SetConfig+0x104>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00b      	beq.n	8004a54 <TIM_OC4_SetConfig+0xb0>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a1b      	ldr	r2, [pc, #108]	; (8004aac <TIM_OC4_SetConfig+0x108>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d007      	beq.n	8004a54 <TIM_OC4_SetConfig+0xb0>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a1a      	ldr	r2, [pc, #104]	; (8004ab0 <TIM_OC4_SetConfig+0x10c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <TIM_OC4_SetConfig+0xb0>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a19      	ldr	r2, [pc, #100]	; (8004ab4 <TIM_OC4_SetConfig+0x110>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d113      	bne.n	8004a7c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a5a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a62:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	019b      	lsls	r3, r3, #6
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	019b      	lsls	r3, r3, #6
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	621a      	str	r2, [r3, #32]
}
 8004a96:	bf00      	nop
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40012c00 	.word	0x40012c00
 8004aa8:	40013400 	.word	0x40013400
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40014400 	.word	0x40014400
 8004ab4:	40014800 	.word	0x40014800

08004ab8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004afc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	041b      	lsls	r3, r3, #16
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <TIM_OC5_SetConfig+0xb4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00f      	beq.n	8004b32 <TIM_OC5_SetConfig+0x7a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a16      	ldr	r2, [pc, #88]	; (8004b70 <TIM_OC5_SetConfig+0xb8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00b      	beq.n	8004b32 <TIM_OC5_SetConfig+0x7a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a15      	ldr	r2, [pc, #84]	; (8004b74 <TIM_OC5_SetConfig+0xbc>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d007      	beq.n	8004b32 <TIM_OC5_SetConfig+0x7a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a14      	ldr	r2, [pc, #80]	; (8004b78 <TIM_OC5_SetConfig+0xc0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d003      	beq.n	8004b32 <TIM_OC5_SetConfig+0x7a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a13      	ldr	r2, [pc, #76]	; (8004b7c <TIM_OC5_SetConfig+0xc4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d109      	bne.n	8004b46 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	021b      	lsls	r3, r3, #8
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	621a      	str	r2, [r3, #32]
}
 8004b60:	bf00      	nop
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40013400 	.word	0x40013400
 8004b74:	40014000 	.word	0x40014000
 8004b78:	40014400 	.word	0x40014400
 8004b7c:	40014800 	.word	0x40014800

08004b80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	021b      	lsls	r3, r3, #8
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	051b      	lsls	r3, r3, #20
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a18      	ldr	r2, [pc, #96]	; (8004c38 <TIM_OC6_SetConfig+0xb8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00f      	beq.n	8004bfc <TIM_OC6_SetConfig+0x7c>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a17      	ldr	r2, [pc, #92]	; (8004c3c <TIM_OC6_SetConfig+0xbc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00b      	beq.n	8004bfc <TIM_OC6_SetConfig+0x7c>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <TIM_OC6_SetConfig+0xc0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d007      	beq.n	8004bfc <TIM_OC6_SetConfig+0x7c>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <TIM_OC6_SetConfig+0xc4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d003      	beq.n	8004bfc <TIM_OC6_SetConfig+0x7c>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <TIM_OC6_SetConfig+0xc8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d109      	bne.n	8004c10 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	029b      	lsls	r3, r3, #10
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	621a      	str	r2, [r3, #32]
}
 8004c2a:	bf00      	nop
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40012c00 	.word	0x40012c00
 8004c3c:	40013400 	.word	0x40013400
 8004c40:	40014000 	.word	0x40014000
 8004c44:	40014400 	.word	0x40014400
 8004c48:	40014800 	.word	0x40014800

08004c4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	f023 0201 	bic.w	r2, r3, #1
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a24      	ldr	r2, [pc, #144]	; (8004d08 <TIM_TI1_SetConfig+0xbc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <TIM_TI1_SetConfig+0x56>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c80:	d00f      	beq.n	8004ca2 <TIM_TI1_SetConfig+0x56>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4a21      	ldr	r2, [pc, #132]	; (8004d0c <TIM_TI1_SetConfig+0xc0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00b      	beq.n	8004ca2 <TIM_TI1_SetConfig+0x56>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4a20      	ldr	r2, [pc, #128]	; (8004d10 <TIM_TI1_SetConfig+0xc4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d007      	beq.n	8004ca2 <TIM_TI1_SetConfig+0x56>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <TIM_TI1_SetConfig+0xc8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d003      	beq.n	8004ca2 <TIM_TI1_SetConfig+0x56>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <TIM_TI1_SetConfig+0xcc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d101      	bne.n	8004ca6 <TIM_TI1_SetConfig+0x5a>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <TIM_TI1_SetConfig+0x5c>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e003      	b.n	8004cc6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f043 0301 	orr.w	r3, r3, #1
 8004cc4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ccc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f023 030a 	bic.w	r3, r3, #10
 8004ce0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f003 030a 	and.w	r3, r3, #10
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	621a      	str	r2, [r3, #32]
}
 8004cfa:	bf00      	nop
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40012c00 	.word	0x40012c00
 8004d0c:	40000400 	.word	0x40000400
 8004d10:	40000800 	.word	0x40000800
 8004d14:	40013400 	.word	0x40013400
 8004d18:	40014000 	.word	0x40014000

08004d1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	f023 0201 	bic.w	r2, r3, #1
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f023 030a 	bic.w	r3, r3, #10
 8004d58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b087      	sub	sp, #28
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f023 0210 	bic.w	r2, r3, #16
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004da4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	031b      	lsls	r3, r3, #12
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004db6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	621a      	str	r2, [r3, #32]
}
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f043 0307 	orr.w	r3, r3, #7
 8004e00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	609a      	str	r2, [r3, #8]
}
 8004e08:	bf00      	nop
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	021a      	lsls	r2, r3, #8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	609a      	str	r2, [r3, #8]
}
 8004e48:	bf00      	nop
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08a      	sub	sp, #40	; 0x28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0a0      	b.n	8004faa <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f898 	bl	8004fb2 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3304      	adds	r3, #4
 8004e92:	4619      	mov	r1, r3
 8004e94:	4610      	mov	r0, r2
 8004e96:	f7ff fb53 	bl	8004540 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6819      	ldr	r1, [r3, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	f7ff fed0 	bl	8004c4c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 020c 	bic.w	r2, r2, #12
 8004eba:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6999      	ldr	r1, [r3, #24]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004edc:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef0:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f00:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f10:	f023 0307 	bic.w	r3, r3, #7
 8004f14:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0204 	orr.w	r2, r2, #4
 8004f24:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004f2e:	2370      	movs	r3, #112	; 0x70
 8004f30:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004f32:	2300      	movs	r3, #0
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f107 020c 	add.w	r2, r7, #12
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff fc16 	bl	8004780 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f66:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8004f76:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3728      	adds	r7, #40	; 0x28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e065      	b.n	80050ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a2c      	ldr	r2, [pc, #176]	; (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d004      	beq.n	8005014 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a2b      	ldr	r2, [pc, #172]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d108      	bne.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800501a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800502c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005030:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a1b      	ldr	r2, [pc, #108]	; (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d018      	beq.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005056:	d013      	beq.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a18      	ldr	r2, [pc, #96]	; (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00e      	beq.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a17      	ldr	r2, [pc, #92]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d009      	beq.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a12      	ldr	r2, [pc, #72]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a13      	ldr	r2, [pc, #76]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d10c      	bne.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005086:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	4313      	orrs	r3, r2
 8005090:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	40012c00 	.word	0x40012c00
 80050bc:	40013400 	.word	0x40013400
 80050c0:	40000400 	.word	0x40000400
 80050c4:	40000800 	.word	0x40000800
 80050c8:	40014000 	.word	0x40014000

080050cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e087      	b.n	80051f8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	4313      	orrs	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	041b      	lsls	r3, r3, #16
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a27      	ldr	r2, [pc, #156]	; (8005204 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d004      	beq.n	8005176 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a25      	ldr	r2, [pc, #148]	; (8005208 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d106      	bne.n	8005184 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1e      	ldr	r2, [pc, #120]	; (8005204 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d004      	beq.n	8005198 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1d      	ldr	r2, [pc, #116]	; (8005208 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d126      	bne.n	80051e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	051b      	lsls	r3, r3, #20
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a0e      	ldr	r2, [pc, #56]	; (8005204 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d004      	beq.n	80051d8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a0d      	ldr	r2, [pc, #52]	; (8005208 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d106      	bne.n	80051e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	40012c00 	.word	0x40012c00
 8005208:	40013400 	.word	0x40013400

0800520c <HAL_TIMEx_RemapConfig>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  __HAL_LOCK(htim);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <HAL_TIMEx_RemapConfig+0x18>
 8005220:	2302      	movs	r3, #2
 8005222:	e012      	b.n	800524a <HAL_TIMEx_RemapConfig+0x3e>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  MODIFY_REG(htim->Instance->AF1, TIM1_AF1_ETRSEL_Msk, Remap);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005232:	f423 3170 	bic.w	r1, r3, #245760	; 0x3c000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(htim);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b082      	sub	sp, #8
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e042      	b.n	80052ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fb fdce 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2224      	movs	r2, #36	; 0x24
 8005284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f82d 	bl	80052f8 <UART_SetConfig>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e022      	b.n	80052ee <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 faed 	bl	8005890 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fb74 	bl	80059d4 <UART_CheckIdleState>
 80052ec:	4603      	mov	r3, r0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052fc:	b08c      	sub	sp, #48	; 0x30
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	431a      	orrs	r2, r3
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	431a      	orrs	r2, r3
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	4313      	orrs	r3, r2
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	4bab      	ldr	r3, [pc, #684]	; (80055d4 <UART_SetConfig+0x2dc>)
 8005328:	4013      	ands	r3, r2
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	6812      	ldr	r2, [r2, #0]
 800532e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005330:	430b      	orrs	r3, r1
 8005332:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4aa0      	ldr	r2, [pc, #640]	; (80055d8 <UART_SetConfig+0x2e0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d004      	beq.n	8005364 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005360:	4313      	orrs	r3, r2
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800536e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	6812      	ldr	r2, [r2, #0]
 8005376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005378:	430b      	orrs	r3, r1
 800537a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	f023 010f 	bic.w	r1, r3, #15
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a91      	ldr	r2, [pc, #580]	; (80055dc <UART_SetConfig+0x2e4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d125      	bne.n	80053e8 <UART_SetConfig+0xf0>
 800539c:	4b90      	ldr	r3, [pc, #576]	; (80055e0 <UART_SetConfig+0x2e8>)
 800539e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d81a      	bhi.n	80053e0 <UART_SetConfig+0xe8>
 80053aa:	a201      	add	r2, pc, #4	; (adr r2, 80053b0 <UART_SetConfig+0xb8>)
 80053ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b0:	080053c1 	.word	0x080053c1
 80053b4:	080053d1 	.word	0x080053d1
 80053b8:	080053c9 	.word	0x080053c9
 80053bc:	080053d9 	.word	0x080053d9
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053c6:	e0d6      	b.n	8005576 <UART_SetConfig+0x27e>
 80053c8:	2302      	movs	r3, #2
 80053ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ce:	e0d2      	b.n	8005576 <UART_SetConfig+0x27e>
 80053d0:	2304      	movs	r3, #4
 80053d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053d6:	e0ce      	b.n	8005576 <UART_SetConfig+0x27e>
 80053d8:	2308      	movs	r3, #8
 80053da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053de:	e0ca      	b.n	8005576 <UART_SetConfig+0x27e>
 80053e0:	2310      	movs	r3, #16
 80053e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053e6:	e0c6      	b.n	8005576 <UART_SetConfig+0x27e>
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a7d      	ldr	r2, [pc, #500]	; (80055e4 <UART_SetConfig+0x2ec>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d138      	bne.n	8005464 <UART_SetConfig+0x16c>
 80053f2:	4b7b      	ldr	r3, [pc, #492]	; (80055e0 <UART_SetConfig+0x2e8>)
 80053f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f8:	f003 030c 	and.w	r3, r3, #12
 80053fc:	2b0c      	cmp	r3, #12
 80053fe:	d82d      	bhi.n	800545c <UART_SetConfig+0x164>
 8005400:	a201      	add	r2, pc, #4	; (adr r2, 8005408 <UART_SetConfig+0x110>)
 8005402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005406:	bf00      	nop
 8005408:	0800543d 	.word	0x0800543d
 800540c:	0800545d 	.word	0x0800545d
 8005410:	0800545d 	.word	0x0800545d
 8005414:	0800545d 	.word	0x0800545d
 8005418:	0800544d 	.word	0x0800544d
 800541c:	0800545d 	.word	0x0800545d
 8005420:	0800545d 	.word	0x0800545d
 8005424:	0800545d 	.word	0x0800545d
 8005428:	08005445 	.word	0x08005445
 800542c:	0800545d 	.word	0x0800545d
 8005430:	0800545d 	.word	0x0800545d
 8005434:	0800545d 	.word	0x0800545d
 8005438:	08005455 	.word	0x08005455
 800543c:	2300      	movs	r3, #0
 800543e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005442:	e098      	b.n	8005576 <UART_SetConfig+0x27e>
 8005444:	2302      	movs	r3, #2
 8005446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800544a:	e094      	b.n	8005576 <UART_SetConfig+0x27e>
 800544c:	2304      	movs	r3, #4
 800544e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005452:	e090      	b.n	8005576 <UART_SetConfig+0x27e>
 8005454:	2308      	movs	r3, #8
 8005456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800545a:	e08c      	b.n	8005576 <UART_SetConfig+0x27e>
 800545c:	2310      	movs	r3, #16
 800545e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005462:	e088      	b.n	8005576 <UART_SetConfig+0x27e>
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a5f      	ldr	r2, [pc, #380]	; (80055e8 <UART_SetConfig+0x2f0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d125      	bne.n	80054ba <UART_SetConfig+0x1c2>
 800546e:	4b5c      	ldr	r3, [pc, #368]	; (80055e0 <UART_SetConfig+0x2e8>)
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005474:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005478:	2b30      	cmp	r3, #48	; 0x30
 800547a:	d016      	beq.n	80054aa <UART_SetConfig+0x1b2>
 800547c:	2b30      	cmp	r3, #48	; 0x30
 800547e:	d818      	bhi.n	80054b2 <UART_SetConfig+0x1ba>
 8005480:	2b20      	cmp	r3, #32
 8005482:	d00a      	beq.n	800549a <UART_SetConfig+0x1a2>
 8005484:	2b20      	cmp	r3, #32
 8005486:	d814      	bhi.n	80054b2 <UART_SetConfig+0x1ba>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <UART_SetConfig+0x19a>
 800548c:	2b10      	cmp	r3, #16
 800548e:	d008      	beq.n	80054a2 <UART_SetConfig+0x1aa>
 8005490:	e00f      	b.n	80054b2 <UART_SetConfig+0x1ba>
 8005492:	2300      	movs	r3, #0
 8005494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005498:	e06d      	b.n	8005576 <UART_SetConfig+0x27e>
 800549a:	2302      	movs	r3, #2
 800549c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054a0:	e069      	b.n	8005576 <UART_SetConfig+0x27e>
 80054a2:	2304      	movs	r3, #4
 80054a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054a8:	e065      	b.n	8005576 <UART_SetConfig+0x27e>
 80054aa:	2308      	movs	r3, #8
 80054ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054b0:	e061      	b.n	8005576 <UART_SetConfig+0x27e>
 80054b2:	2310      	movs	r3, #16
 80054b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054b8:	e05d      	b.n	8005576 <UART_SetConfig+0x27e>
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a4b      	ldr	r2, [pc, #300]	; (80055ec <UART_SetConfig+0x2f4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d125      	bne.n	8005510 <UART_SetConfig+0x218>
 80054c4:	4b46      	ldr	r3, [pc, #280]	; (80055e0 <UART_SetConfig+0x2e8>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054ce:	2bc0      	cmp	r3, #192	; 0xc0
 80054d0:	d016      	beq.n	8005500 <UART_SetConfig+0x208>
 80054d2:	2bc0      	cmp	r3, #192	; 0xc0
 80054d4:	d818      	bhi.n	8005508 <UART_SetConfig+0x210>
 80054d6:	2b80      	cmp	r3, #128	; 0x80
 80054d8:	d00a      	beq.n	80054f0 <UART_SetConfig+0x1f8>
 80054da:	2b80      	cmp	r3, #128	; 0x80
 80054dc:	d814      	bhi.n	8005508 <UART_SetConfig+0x210>
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <UART_SetConfig+0x1f0>
 80054e2:	2b40      	cmp	r3, #64	; 0x40
 80054e4:	d008      	beq.n	80054f8 <UART_SetConfig+0x200>
 80054e6:	e00f      	b.n	8005508 <UART_SetConfig+0x210>
 80054e8:	2300      	movs	r3, #0
 80054ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ee:	e042      	b.n	8005576 <UART_SetConfig+0x27e>
 80054f0:	2302      	movs	r3, #2
 80054f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054f6:	e03e      	b.n	8005576 <UART_SetConfig+0x27e>
 80054f8:	2304      	movs	r3, #4
 80054fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054fe:	e03a      	b.n	8005576 <UART_SetConfig+0x27e>
 8005500:	2308      	movs	r3, #8
 8005502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005506:	e036      	b.n	8005576 <UART_SetConfig+0x27e>
 8005508:	2310      	movs	r3, #16
 800550a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800550e:	e032      	b.n	8005576 <UART_SetConfig+0x27e>
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a30      	ldr	r2, [pc, #192]	; (80055d8 <UART_SetConfig+0x2e0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d12a      	bne.n	8005570 <UART_SetConfig+0x278>
 800551a:	4b31      	ldr	r3, [pc, #196]	; (80055e0 <UART_SetConfig+0x2e8>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005520:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005524:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005528:	d01a      	beq.n	8005560 <UART_SetConfig+0x268>
 800552a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800552e:	d81b      	bhi.n	8005568 <UART_SetConfig+0x270>
 8005530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005534:	d00c      	beq.n	8005550 <UART_SetConfig+0x258>
 8005536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800553a:	d815      	bhi.n	8005568 <UART_SetConfig+0x270>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <UART_SetConfig+0x250>
 8005540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005544:	d008      	beq.n	8005558 <UART_SetConfig+0x260>
 8005546:	e00f      	b.n	8005568 <UART_SetConfig+0x270>
 8005548:	2300      	movs	r3, #0
 800554a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800554e:	e012      	b.n	8005576 <UART_SetConfig+0x27e>
 8005550:	2302      	movs	r3, #2
 8005552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005556:	e00e      	b.n	8005576 <UART_SetConfig+0x27e>
 8005558:	2304      	movs	r3, #4
 800555a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800555e:	e00a      	b.n	8005576 <UART_SetConfig+0x27e>
 8005560:	2308      	movs	r3, #8
 8005562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005566:	e006      	b.n	8005576 <UART_SetConfig+0x27e>
 8005568:	2310      	movs	r3, #16
 800556a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800556e:	e002      	b.n	8005576 <UART_SetConfig+0x27e>
 8005570:	2310      	movs	r3, #16
 8005572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a17      	ldr	r2, [pc, #92]	; (80055d8 <UART_SetConfig+0x2e0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	f040 80a8 	bne.w	80056d2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005582:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005586:	2b08      	cmp	r3, #8
 8005588:	d834      	bhi.n	80055f4 <UART_SetConfig+0x2fc>
 800558a:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <UART_SetConfig+0x298>)
 800558c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005590:	080055b5 	.word	0x080055b5
 8005594:	080055f5 	.word	0x080055f5
 8005598:	080055bd 	.word	0x080055bd
 800559c:	080055f5 	.word	0x080055f5
 80055a0:	080055c3 	.word	0x080055c3
 80055a4:	080055f5 	.word	0x080055f5
 80055a8:	080055f5 	.word	0x080055f5
 80055ac:	080055f5 	.word	0x080055f5
 80055b0:	080055cb 	.word	0x080055cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055b4:	f7fe fa9c 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 80055b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055ba:	e021      	b.n	8005600 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055bc:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <UART_SetConfig+0x2f8>)
 80055be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055c0:	e01e      	b.n	8005600 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055c2:	f7fe fa27 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 80055c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055c8:	e01a      	b.n	8005600 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055d0:	e016      	b.n	8005600 <UART_SetConfig+0x308>
 80055d2:	bf00      	nop
 80055d4:	cfff69f3 	.word	0xcfff69f3
 80055d8:	40008000 	.word	0x40008000
 80055dc:	40013800 	.word	0x40013800
 80055e0:	40021000 	.word	0x40021000
 80055e4:	40004400 	.word	0x40004400
 80055e8:	40004800 	.word	0x40004800
 80055ec:	40004c00 	.word	0x40004c00
 80055f0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80055fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 812a 	beq.w	800585c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	4a9e      	ldr	r2, [pc, #632]	; (8005888 <UART_SetConfig+0x590>)
 800560e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005612:	461a      	mov	r2, r3
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	fbb3 f3f2 	udiv	r3, r3, r2
 800561a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	4613      	mov	r3, r2
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	4413      	add	r3, r2
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	429a      	cmp	r2, r3
 800562a:	d305      	bcc.n	8005638 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	429a      	cmp	r2, r3
 8005636:	d903      	bls.n	8005640 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800563e:	e10d      	b.n	800585c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	2200      	movs	r2, #0
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	60fa      	str	r2, [r7, #12]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	4a8e      	ldr	r2, [pc, #568]	; (8005888 <UART_SetConfig+0x590>)
 800564e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005652:	b29b      	uxth	r3, r3
 8005654:	2200      	movs	r2, #0
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	607a      	str	r2, [r7, #4]
 800565a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800565e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005662:	f7fa fdd9 	bl	8000218 <__aeabi_uldivmod>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4610      	mov	r0, r2
 800566c:	4619      	mov	r1, r3
 800566e:	f04f 0200 	mov.w	r2, #0
 8005672:	f04f 0300 	mov.w	r3, #0
 8005676:	020b      	lsls	r3, r1, #8
 8005678:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800567c:	0202      	lsls	r2, r0, #8
 800567e:	6979      	ldr	r1, [r7, #20]
 8005680:	6849      	ldr	r1, [r1, #4]
 8005682:	0849      	lsrs	r1, r1, #1
 8005684:	2000      	movs	r0, #0
 8005686:	460c      	mov	r4, r1
 8005688:	4605      	mov	r5, r0
 800568a:	eb12 0804 	adds.w	r8, r2, r4
 800568e:	eb43 0905 	adc.w	r9, r3, r5
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	469a      	mov	sl, r3
 800569a:	4693      	mov	fp, r2
 800569c:	4652      	mov	r2, sl
 800569e:	465b      	mov	r3, fp
 80056a0:	4640      	mov	r0, r8
 80056a2:	4649      	mov	r1, r9
 80056a4:	f7fa fdb8 	bl	8000218 <__aeabi_uldivmod>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4613      	mov	r3, r2
 80056ae:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b6:	d308      	bcc.n	80056ca <UART_SetConfig+0x3d2>
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056be:	d204      	bcs.n	80056ca <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6a3a      	ldr	r2, [r7, #32]
 80056c6:	60da      	str	r2, [r3, #12]
 80056c8:	e0c8      	b.n	800585c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80056d0:	e0c4      	b.n	800585c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056da:	d167      	bne.n	80057ac <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80056dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d828      	bhi.n	8005736 <UART_SetConfig+0x43e>
 80056e4:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <UART_SetConfig+0x3f4>)
 80056e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ea:	bf00      	nop
 80056ec:	08005711 	.word	0x08005711
 80056f0:	08005719 	.word	0x08005719
 80056f4:	08005721 	.word	0x08005721
 80056f8:	08005737 	.word	0x08005737
 80056fc:	08005727 	.word	0x08005727
 8005700:	08005737 	.word	0x08005737
 8005704:	08005737 	.word	0x08005737
 8005708:	08005737 	.word	0x08005737
 800570c:	0800572f 	.word	0x0800572f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005710:	f7fe f9ee 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8005714:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005716:	e014      	b.n	8005742 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005718:	f7fe fa00 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 800571c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800571e:	e010      	b.n	8005742 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005720:	4b5a      	ldr	r3, [pc, #360]	; (800588c <UART_SetConfig+0x594>)
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005724:	e00d      	b.n	8005742 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005726:	f7fe f975 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 800572a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800572c:	e009      	b.n	8005742 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800572e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005734:	e005      	b.n	8005742 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005740:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8089 	beq.w	800585c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	4a4e      	ldr	r2, [pc, #312]	; (8005888 <UART_SetConfig+0x590>)
 8005750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005754:	461a      	mov	r2, r3
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	fbb3 f3f2 	udiv	r3, r3, r2
 800575c:	005a      	lsls	r2, r3, #1
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	085b      	lsrs	r3, r3, #1
 8005764:	441a      	add	r2, r3
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	fbb2 f3f3 	udiv	r3, r2, r3
 800576e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	2b0f      	cmp	r3, #15
 8005774:	d916      	bls.n	80057a4 <UART_SetConfig+0x4ac>
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800577c:	d212      	bcs.n	80057a4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	b29b      	uxth	r3, r3
 8005782:	f023 030f 	bic.w	r3, r3, #15
 8005786:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	085b      	lsrs	r3, r3, #1
 800578c:	b29b      	uxth	r3, r3
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	b29a      	uxth	r2, r3
 8005794:	8bfb      	ldrh	r3, [r7, #30]
 8005796:	4313      	orrs	r3, r2
 8005798:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	8bfa      	ldrh	r2, [r7, #30]
 80057a0:	60da      	str	r2, [r3, #12]
 80057a2:	e05b      	b.n	800585c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80057aa:	e057      	b.n	800585c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d828      	bhi.n	8005806 <UART_SetConfig+0x50e>
 80057b4:	a201      	add	r2, pc, #4	; (adr r2, 80057bc <UART_SetConfig+0x4c4>)
 80057b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ba:	bf00      	nop
 80057bc:	080057e1 	.word	0x080057e1
 80057c0:	080057e9 	.word	0x080057e9
 80057c4:	080057f1 	.word	0x080057f1
 80057c8:	08005807 	.word	0x08005807
 80057cc:	080057f7 	.word	0x080057f7
 80057d0:	08005807 	.word	0x08005807
 80057d4:	08005807 	.word	0x08005807
 80057d8:	08005807 	.word	0x08005807
 80057dc:	080057ff 	.word	0x080057ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e0:	f7fe f986 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 80057e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057e6:	e014      	b.n	8005812 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057e8:	f7fe f998 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 80057ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057ee:	e010      	b.n	8005812 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057f0:	4b26      	ldr	r3, [pc, #152]	; (800588c <UART_SetConfig+0x594>)
 80057f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057f4:	e00d      	b.n	8005812 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057f6:	f7fe f90d 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 80057fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057fc:	e009      	b.n	8005812 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005804:	e005      	b.n	8005812 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005810:	bf00      	nop
    }

    if (pclk != 0U)
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	2b00      	cmp	r3, #0
 8005816:	d021      	beq.n	800585c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	4a1a      	ldr	r2, [pc, #104]	; (8005888 <UART_SetConfig+0x590>)
 800581e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005822:	461a      	mov	r2, r3
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	fbb3 f2f2 	udiv	r2, r3, r2
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	085b      	lsrs	r3, r3, #1
 8005830:	441a      	add	r2, r3
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	fbb2 f3f3 	udiv	r3, r2, r3
 800583a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	2b0f      	cmp	r3, #15
 8005840:	d909      	bls.n	8005856 <UART_SetConfig+0x55e>
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005848:	d205      	bcs.n	8005856 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	b29a      	uxth	r2, r3
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60da      	str	r2, [r3, #12]
 8005854:	e002      	b.n	800585c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2201      	movs	r2, #1
 8005860:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2201      	movs	r2, #1
 8005868:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2200      	movs	r2, #0
 8005870:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2200      	movs	r2, #0
 8005876:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005878:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800587c:	4618      	mov	r0, r3
 800587e:	3730      	adds	r7, #48	; 0x30
 8005880:	46bd      	mov	sp, r7
 8005882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005886:	bf00      	nop
 8005888:	08005eb0 	.word	0x08005eb0
 800588c:	00f42400 	.word	0x00f42400

08005890 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005924:	f003 0310 	and.w	r3, r3, #16
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01a      	beq.n	80059a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800598e:	d10a      	bne.n	80059a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	605a      	str	r2, [r3, #4]
  }
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af02      	add	r7, sp, #8
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059e4:	f7fb fe92 	bl	800170c <HAL_GetTick>
 80059e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d10e      	bne.n	8005a16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f82f 	bl	8005a6a <UART_WaitOnFlagUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e025      	b.n	8005a62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d10e      	bne.n	8005a42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f819 	bl	8005a6a <UART_WaitOnFlagUntilTimeout>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e00f      	b.n	8005a62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b09c      	sub	sp, #112	; 0x70
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	603b      	str	r3, [r7, #0]
 8005a76:	4613      	mov	r3, r2
 8005a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7a:	e0a9      	b.n	8005bd0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a82:	f000 80a5 	beq.w	8005bd0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a86:	f7fb fe41 	bl	800170c <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d302      	bcc.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x32>
 8005a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d140      	bne.n	8005b1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ab0:	667b      	str	r3, [r7, #100]	; 0x64
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005abc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ac0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e6      	bne.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae0:	f023 0301 	bic.w	r3, r3, #1
 8005ae4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3308      	adds	r3, #8
 8005aec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005aee:	64ba      	str	r2, [r7, #72]	; 0x48
 8005af0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e5      	bne.n	8005ace <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e069      	b.n	8005bf2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d051      	beq.n	8005bd0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b3a:	d149      	bne.n	8005bd0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b64:	637b      	str	r3, [r7, #52]	; 0x34
 8005b66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e6      	bne.n	8005b46 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	613b      	str	r3, [r7, #16]
   return(result);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f023 0301 	bic.w	r3, r3, #1
 8005b8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3308      	adds	r3, #8
 8005b96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b98:	623a      	str	r2, [r7, #32]
 8005b9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	69f9      	ldr	r1, [r7, #28]
 8005b9e:	6a3a      	ldr	r2, [r7, #32]
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e5      	bne.n	8005b78 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e010      	b.n	8005bf2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69da      	ldr	r2, [r3, #28]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	bf0c      	ite	eq
 8005be0:	2301      	moveq	r3, #1
 8005be2:	2300      	movne	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	461a      	mov	r2, r3
 8005be8:	79fb      	ldrb	r3, [r7, #7]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	f43f af46 	beq.w	8005a7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3770      	adds	r7, #112	; 0x70
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e027      	b.n	8005c60 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2224      	movs	r2, #36	; 0x24
 8005c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0201 	bic.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e02d      	b.n	8005ce0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2224      	movs	r2, #36	; 0x24
 8005c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0201 	bic.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f84f 	bl	8005d64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e02d      	b.n	8005d5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2224      	movs	r2, #36	; 0x24
 8005d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0201 	bic.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f811 	bl	8005d64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d108      	bne.n	8005d86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d84:	e031      	b.n	8005dea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d86:	2308      	movs	r3, #8
 8005d88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d8a:	2308      	movs	r3, #8
 8005d8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	0e5b      	lsrs	r3, r3, #25
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	0f5b      	lsrs	r3, r3, #29
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dae:	7bbb      	ldrb	r3, [r7, #14]
 8005db0:	7b3a      	ldrb	r2, [r7, #12]
 8005db2:	4911      	ldr	r1, [pc, #68]	; (8005df8 <UARTEx_SetNbDataToProcess+0x94>)
 8005db4:	5c8a      	ldrb	r2, [r1, r2]
 8005db6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005dba:	7b3a      	ldrb	r2, [r7, #12]
 8005dbc:	490f      	ldr	r1, [pc, #60]	; (8005dfc <UARTEx_SetNbDataToProcess+0x98>)
 8005dbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	7b7a      	ldrb	r2, [r7, #13]
 8005dd0:	4909      	ldr	r1, [pc, #36]	; (8005df8 <UARTEx_SetNbDataToProcess+0x94>)
 8005dd2:	5c8a      	ldrb	r2, [r1, r2]
 8005dd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005dd8:	7b7a      	ldrb	r2, [r7, #13]
 8005dda:	4908      	ldr	r1, [pc, #32]	; (8005dfc <UARTEx_SetNbDataToProcess+0x98>)
 8005ddc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dde:	fb93 f3f2 	sdiv	r3, r3, r2
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005dea:	bf00      	nop
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	08005ec8 	.word	0x08005ec8
 8005dfc:	08005ed0 	.word	0x08005ed0

08005e00 <__libc_init_array>:
 8005e00:	b570      	push	{r4, r5, r6, lr}
 8005e02:	4d0d      	ldr	r5, [pc, #52]	; (8005e38 <__libc_init_array+0x38>)
 8005e04:	4c0d      	ldr	r4, [pc, #52]	; (8005e3c <__libc_init_array+0x3c>)
 8005e06:	1b64      	subs	r4, r4, r5
 8005e08:	10a4      	asrs	r4, r4, #2
 8005e0a:	2600      	movs	r6, #0
 8005e0c:	42a6      	cmp	r6, r4
 8005e0e:	d109      	bne.n	8005e24 <__libc_init_array+0x24>
 8005e10:	4d0b      	ldr	r5, [pc, #44]	; (8005e40 <__libc_init_array+0x40>)
 8005e12:	4c0c      	ldr	r4, [pc, #48]	; (8005e44 <__libc_init_array+0x44>)
 8005e14:	f000 f820 	bl	8005e58 <_init>
 8005e18:	1b64      	subs	r4, r4, r5
 8005e1a:	10a4      	asrs	r4, r4, #2
 8005e1c:	2600      	movs	r6, #0
 8005e1e:	42a6      	cmp	r6, r4
 8005e20:	d105      	bne.n	8005e2e <__libc_init_array+0x2e>
 8005e22:	bd70      	pop	{r4, r5, r6, pc}
 8005e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e28:	4798      	blx	r3
 8005e2a:	3601      	adds	r6, #1
 8005e2c:	e7ee      	b.n	8005e0c <__libc_init_array+0xc>
 8005e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e32:	4798      	blx	r3
 8005e34:	3601      	adds	r6, #1
 8005e36:	e7f2      	b.n	8005e1e <__libc_init_array+0x1e>
 8005e38:	08005ee0 	.word	0x08005ee0
 8005e3c:	08005ee0 	.word	0x08005ee0
 8005e40:	08005ee0 	.word	0x08005ee0
 8005e44:	08005ee4 	.word	0x08005ee4

08005e48 <memset>:
 8005e48:	4402      	add	r2, r0
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d100      	bne.n	8005e52 <memset+0xa>
 8005e50:	4770      	bx	lr
 8005e52:	f803 1b01 	strb.w	r1, [r3], #1
 8005e56:	e7f9      	b.n	8005e4c <memset+0x4>

08005e58 <_init>:
 8005e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5a:	bf00      	nop
 8005e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5e:	bc08      	pop	{r3}
 8005e60:	469e      	mov	lr, r3
 8005e62:	4770      	bx	lr

08005e64 <_fini>:
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	bf00      	nop
 8005e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6a:	bc08      	pop	{r3}
 8005e6c:	469e      	mov	lr, r3
 8005e6e:	4770      	bx	lr
