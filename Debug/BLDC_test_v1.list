
BLDC_test_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005128  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005300  08005300  00015300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005340  08005340  000202dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005340  08005340  00015340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005348  08005348  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005348  08005348  00015348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  08005350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200002dc  0800562c  000202dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  0800562c  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013372  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f7  00000000  00000000  0003367e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00035b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00036c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8d1  00000000  00000000  00037bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012df4  00000000  00000000  00055491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2460  00000000  00000000  00068285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a6e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004654  00000000  00000000  0012a738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002dc 	.word	0x200002dc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080052e8 	.word	0x080052e8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002e0 	.word	0x200002e0
 8000214:	080052e8 	.word	0x080052e8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <DMA_SetConfig>:

#include "main.h"

//WETな関数です。すいません。
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	603b      	str	r3, [r7, #0]
//
//  /* Clear all flags */
//  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	2b10      	cmp	r3, #16
 8000538:	d108      	bne.n	800054c <DMA_SetConfig+0x30>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	68ba      	ldr	r2, [r7, #8]
 8000548:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800054a:	e007      	b.n	800055c <DMA_SetConfig+0x40>
    hdma->Instance->CPAR = SrcAddress;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	68ba      	ldr	r2, [r7, #8]
 8000552:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	60da      	str	r2, [r3, #12]
}
 800055c:	bf00      	nop
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <PWM_DMA_Start>:



//強制的にPWMのDMAを利用し、さらに強制的にメモリーのポインタを変更しています。
//TODO:HALを利用することなく最適化する必要があるが、応急的に利用します。
void PWM_DMA_Start(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length){
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
 8000574:	807b      	strh	r3, [r7, #2]
//	HAL_TIM_PWM_Start_DMA(htim,Channel,pData, Length);
//	__HAL_LOCK(htim->hdma[TIM_DMA_ID_CC1]);
    /* Disable the peripheral */
//    __HAL_DMA_DISABLE(htim->hdma[TIM_DMA_ID_CC1]);
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,Length);
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3334      	adds	r3, #52	; 0x34
 8000582:	461a      	mov	r2, r3
 8000584:	887b      	ldrh	r3, [r7, #2]
 8000586:	f7ff ffc9 	bl	800051c <DMA_SetConfig>
//    __HAL_DMA_ENABLE(htim->hdma[TIM_DMA_ID_CC1]);
//	__HAL_UNLOCK(htim->hdma[TIM_DMA_ID_CC1]);
}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <set_prescalar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//htim1
void set_prescalar(int freq){
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	//170MHz

	__HAL_TIM_SET_PRESCALER(&htim1, 1000000/180*16/freq);
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <set_prescalar+0x24>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	fb92 f2f3 	sdiv	r2, r2, r3
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <set_prescalar+0x28>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	00015b30 	.word	0x00015b30
 80005bc:	200002f8 	.word	0x200002f8

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fd43 	bl	800104e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f828 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 fa92 	bl	8000af4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d0:	f000 fa56 	bl	8000a80 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 fa08 	bl	80009e8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005d8:	f000 f860 	bl	800069c <MX_TIM1_Init>
  MX_TIM2_Init();
 80005dc:	f000 f926 	bl	800082c <MX_TIM2_Init>
  MX_TIM3_Init();
 80005e0:	f000 f98e 	bl	8000900 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_1,(uint32_t*)pwmlist1, sizeof (pwmlist1) / sizeof (uint16_t));
 80005e4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <main+0x54>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	480a      	ldr	r0, [pc, #40]	; (8000618 <main+0x58>)
 80005ee:	f002 fbaf 	bl	8002d50 <HAL_TIM_PWM_Start_DMA>

  set_prescalar(1000);
 80005f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f6:	f7ff ffcd 	bl	8000594 <set_prescalar>
  {
//	  for(int i = 4; i<2000;i++){
//		  set_prescalar(i);
//		  HAL_Delay(100);
//	  }
	  HAL_Delay(1000);
 80005fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fe:	f000 fd97 	bl	8001130 <HAL_Delay>
	  PWM_DMA_Start(&htim1,TIM_CHANNEL_1,(uint32_t*)pwmlist1, sizeof (pwmlist1) / sizeof (uint16_t));
 8000602:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000606:	4a03      	ldr	r2, [pc, #12]	; (8000614 <main+0x54>)
 8000608:	2100      	movs	r1, #0
 800060a:	4803      	ldr	r0, [pc, #12]	; (8000618 <main+0x58>)
 800060c:	f7ff ffac 	bl	8000568 <PWM_DMA_Start>
	  HAL_Delay(1000);
 8000610:	e7f3      	b.n	80005fa <main+0x3a>
 8000612:	bf00      	nop
 8000614:	20000000 	.word	0x20000000
 8000618:	200002f8 	.word	0x200002f8

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	2238      	movs	r2, #56	; 0x38
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fe54 	bl	80052d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000642:	f001 fb05 	bl	8001c50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000646:	2302      	movs	r3, #2
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2340      	movs	r3, #64	; 0x40
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000654:	2300      	movs	r3, #0
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0318 	add.w	r3, r7, #24
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fb9b 	bl	8001d98 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000668:	f000 fa90 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000670:	2301      	movs	r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fe9f 	bl	80023c8 <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000690:	f000 fa7c 	bl	8000b8c <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	3750      	adds	r7, #80	; 0x50
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b09c      	sub	sp, #112	; 0x70
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
 80006cc:	615a      	str	r2, [r3, #20]
 80006ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2234      	movs	r2, #52	; 0x34
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 fdfe 	bl	80052d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006dc:	4b51      	ldr	r3, [pc, #324]	; (8000824 <MX_TIM1_Init+0x188>)
 80006de:	4a52      	ldr	r2, [pc, #328]	; (8000828 <MX_TIM1_Init+0x18c>)
 80006e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 80006e2:	4b50      	ldr	r3, [pc, #320]	; (8000824 <MX_TIM1_Init+0x188>)
 80006e4:	220a      	movs	r2, #10
 80006e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <MX_TIM1_Init+0x188>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80006ee:	4b4d      	ldr	r3, [pc, #308]	; (8000824 <MX_TIM1_Init+0x188>)
 80006f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f6:	4b4b      	ldr	r3, [pc, #300]	; (8000824 <MX_TIM1_Init+0x188>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006fc:	4b49      	ldr	r3, [pc, #292]	; (8000824 <MX_TIM1_Init+0x188>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000702:	4b48      	ldr	r3, [pc, #288]	; (8000824 <MX_TIM1_Init+0x188>)
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000708:	4846      	ldr	r0, [pc, #280]	; (8000824 <MX_TIM1_Init+0x188>)
 800070a:	f002 fa69 	bl	8002be0 <HAL_TIM_Base_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000714:	f000 fa3a 	bl	8000b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800071e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000722:	4619      	mov	r1, r3
 8000724:	483f      	ldr	r0, [pc, #252]	; (8000824 <MX_TIM1_Init+0x188>)
 8000726:	f002 fe3f 	bl	80033a8 <HAL_TIM_ConfigClockSource>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000730:	f000 fa2c 	bl	8000b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000734:	483b      	ldr	r0, [pc, #236]	; (8000824 <MX_TIM1_Init+0x188>)
 8000736:	f002 faaa 	bl	8002c8e <HAL_TIM_PWM_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000740:	f000 fa24 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000744:	2300      	movs	r3, #0
 8000746:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000750:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000754:	4619      	mov	r1, r3
 8000756:	4833      	ldr	r0, [pc, #204]	; (8000824 <MX_TIM1_Init+0x188>)
 8000758:	f003 fe7e 	bl	8004458 <HAL_TIMEx_MasterConfigSynchronization>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000762:	f000 fa13 	bl	8000b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000766:	2360      	movs	r3, #96	; 0x60
 8000768:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076e:	2300      	movs	r3, #0
 8000770:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000772:	2300      	movs	r3, #0
 8000774:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800077e:	2300      	movs	r3, #0
 8000780:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000782:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000786:	2200      	movs	r2, #0
 8000788:	4619      	mov	r1, r3
 800078a:	4826      	ldr	r0, [pc, #152]	; (8000824 <MX_TIM1_Init+0x188>)
 800078c:	f002 fcf8 	bl	8003180 <HAL_TIM_PWM_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000796:	f000 f9f9 	bl	8000b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800079a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800079e:	2204      	movs	r2, #4
 80007a0:	4619      	mov	r1, r3
 80007a2:	4820      	ldr	r0, [pc, #128]	; (8000824 <MX_TIM1_Init+0x188>)
 80007a4:	f002 fcec 	bl	8003180 <HAL_TIM_PWM_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80007ae:	f000 f9ed 	bl	8000b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007b6:	2208      	movs	r2, #8
 80007b8:	4619      	mov	r1, r3
 80007ba:	481a      	ldr	r0, [pc, #104]	; (8000824 <MX_TIM1_Init+0x188>)
 80007bc:	f002 fce0 	bl	8003180 <HAL_TIM_PWM_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80007c6:	f000 f9e1 	bl	8000b8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4619      	mov	r1, r3
 8000806:	4807      	ldr	r0, [pc, #28]	; (8000824 <MX_TIM1_Init+0x188>)
 8000808:	f003 fea8 	bl	800455c <HAL_TIMEx_ConfigBreakDeadTime>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000812:	f000 f9bb 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <MX_TIM1_Init+0x188>)
 8000818:	f000 fae4 	bl	8000de4 <HAL_TIM_MspPostInit>

}
 800081c:	bf00      	nop
 800081e:	3770      	adds	r7, #112	; 0x70
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200002f8 	.word	0x200002f8
 8000828:	40012c00 	.word	0x40012c00

0800082c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000832:	f107 0320 	add.w	r3, r7, #32
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <MX_TIM2_Init+0xd0>)
 800085c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000860:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_TIM2_Init+0xd0>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000868:	4b24      	ldr	r3, [pc, #144]	; (80008fc <MX_TIM2_Init+0xd0>)
 800086a:	2220      	movs	r2, #32
 800086c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <MX_TIM2_Init+0xd0>)
 8000870:	f04f 32ff 	mov.w	r2, #4294967295
 8000874:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000876:	4b21      	ldr	r3, [pc, #132]	; (80008fc <MX_TIM2_Init+0xd0>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_TIM2_Init+0xd0>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000882:	481e      	ldr	r0, [pc, #120]	; (80008fc <MX_TIM2_Init+0xd0>)
 8000884:	f002 f9ac 	bl	8002be0 <HAL_TIM_Base_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800088e:	f000 f97d 	bl	8000b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000896:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  sClockSourceConfig.ClockFilter = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	4619      	mov	r1, r3
 80008aa:	4814      	ldr	r0, [pc, #80]	; (80008fc <MX_TIM2_Init+0xd0>)
 80008ac:	f002 fd7c 	bl	80033a8 <HAL_TIM_ConfigClockSource>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008b6:	f000 f969 	bl	8000b8c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4619      	mov	r1, r3
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <MX_TIM2_Init+0xd0>)
 80008ca:	f002 fe67 	bl	800359c <HAL_TIM_SlaveConfigSynchro>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80008d4:	f000 f95a 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d8:	2300      	movs	r3, #0
 80008da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e0:	463b      	mov	r3, r7
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_TIM2_Init+0xd0>)
 80008e6:	f003 fdb7 	bl	8004458 <HAL_TIMEx_MasterConfigSynchronization>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 80008f0:	f000 f94c 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	3730      	adds	r7, #48	; 0x30
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000344 	.word	0x20000344

08000900 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08c      	sub	sp, #48	; 0x30
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <MX_TIM3_Init+0xe0>)
 800092e:	4a2d      	ldr	r2, [pc, #180]	; (80009e4 <MX_TIM3_Init+0xe4>)
 8000930:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000938:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <MX_TIM3_Init+0xe0>)
 800093a:	2220      	movs	r2, #32
 800093c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000944:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <MX_TIM3_Init+0xe0>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000952:	4823      	ldr	r0, [pc, #140]	; (80009e0 <MX_TIM3_Init+0xe0>)
 8000954:	f002 f944 	bl	8002be0 <HAL_TIM_Base_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800095e:	f000 f915 	bl	8000b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000966:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  sClockSourceConfig.ClockFilter = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	4619      	mov	r1, r3
 800097a:	4819      	ldr	r0, [pc, #100]	; (80009e0 <MX_TIM3_Init+0xe0>)
 800097c:	f002 fd14 	bl	80033a8 <HAL_TIM_ConfigClockSource>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000986:	f000 f901 	bl	8000b8c <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 800099a:	f107 0310 	add.w	r3, r7, #16
 800099e:	4619      	mov	r1, r3
 80009a0:	480f      	ldr	r0, [pc, #60]	; (80009e0 <MX_TIM3_Init+0xe0>)
 80009a2:	f003 fca0 	bl	80042e6 <HAL_TIMEx_HallSensor_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009ac:	f000 f8ee 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80009b0:	2350      	movs	r3, #80	; 0x50
 80009b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	4619      	mov	r1, r3
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <MX_TIM3_Init+0xe0>)
 80009be:	f003 fd4b 	bl	8004458 <HAL_TIMEx_MasterConfigSynchronization>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 80009c8:	f000 f8e0 	bl	8000b8c <Error_Handler>
  }
  HAL_TIMEx_RemapConfig(&htim3, TIM_TIM3_ETR_COMP1);
 80009cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d0:	4803      	ldr	r0, [pc, #12]	; (80009e0 <MX_TIM3_Init+0xe0>)
 80009d2:	f003 fe63 	bl	800469c <HAL_TIMEx_RemapConfig>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3730      	adds	r7, #48	; 0x30
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000390 	.word	0x20000390
 80009e4:	40000400 	.word	0x40000400

080009e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 80009ee:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <MX_USART2_UART_Init+0x94>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a30:	4811      	ldr	r0, [pc, #68]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a32:	f003 fe58 	bl	80046e6 <HAL_UART_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a3c:	f000 f8a6 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a44:	f004 fb5a 	bl	80050fc <HAL_UARTEx_SetTxFifoThreshold>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a4e:	f000 f89d 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a56:	f004 fb8f 	bl	8005178 <HAL_UARTEx_SetRxFifoThreshold>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a60:	f000 f894 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a66:	f004 fb10 	bl	800508a <HAL_UARTEx_DisableFifoMode>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a70:	f000 f88c 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000049c 	.word	0x2000049c
 8000a7c:	40004400 	.word	0x40004400

08000a80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_DMA_Init+0x70>)
 8000a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a8a:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <MX_DMA_Init+0x70>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6493      	str	r3, [r2, #72]	; 0x48
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_DMA_Init+0x70>)
 8000a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_DMA_Init+0x70>)
 8000aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aa2:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <MX_DMA_Init+0x70>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6493      	str	r3, [r2, #72]	; 0x48
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_DMA_Init+0x70>)
 8000aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	200b      	movs	r0, #11
 8000abc:	f000 fc35 	bl	800132a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ac0:	200b      	movs	r0, #11
 8000ac2:	f000 fc4c 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	200c      	movs	r0, #12
 8000acc:	f000 fc2d 	bl	800132a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ad0:	200c      	movs	r0, #12
 8000ad2:	f000 fc44 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	205e      	movs	r0, #94	; 0x5e
 8000adc:	f000 fc25 	bl	800132a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8000ae0:	205e      	movs	r0, #94	; 0x5e
 8000ae2:	f000 fc3c 	bl	800135e <HAL_NVIC_EnableIRQ>

}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MX_GPIO_Init+0x90>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	4a1d      	ldr	r2, [pc, #116]	; (8000b84 <MX_GPIO_Init+0x90>)
 8000b10:	f043 0320 	orr.w	r3, r3, #32
 8000b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <MX_GPIO_Init+0x90>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	f003 0320 	and.w	r3, r3, #32
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MX_GPIO_Init+0x90>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <MX_GPIO_Init+0x90>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_GPIO_Init+0x90>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_GPIO_Init+0x90>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <MX_GPIO_Init+0x90>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_GPIO_Init+0x90>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b58:	480b      	ldr	r0, [pc, #44]	; (8000b88 <MX_GPIO_Init+0x94>)
 8000b5a:	f001 f861 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_GPIO_Init+0x94>)
 8000b78:	f000 fed0 	bl	800191c <HAL_GPIO_Init>

}
 8000b7c:	bf00      	nop
 8000b7e:	3720      	adds	r7, #32
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40021000 	.word	0x40021000
 8000b88:	48000400 	.word	0x48000400

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <Error_Handler+0x8>
	...

08000b98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <HAL_MspInit+0x44>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <HAL_MspInit+0x44>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6613      	str	r3, [r2, #96]	; 0x60
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <HAL_MspInit+0x44>)
 8000bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_MspInit+0x44>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <HAL_MspInit+0x44>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_MspInit+0x44>)
 8000bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000

08000be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08e      	sub	sp, #56	; 0x38
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a71      	ldr	r2, [pc, #452]	; (8000dc4 <HAL_TIM_Base_MspInit+0x1e4>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d162      	bne.n	8000cc8 <HAL_TIM_Base_MspInit+0xe8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c02:	4b71      	ldr	r3, [pc, #452]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	4a70      	ldr	r2, [pc, #448]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000c08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c0e:	4b6e      	ldr	r3, [pc, #440]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c16:	623b      	str	r3, [r7, #32]
 8000c18:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8000c1a:	4b6c      	ldr	r3, [pc, #432]	; (8000dcc <HAL_TIM_Base_MspInit+0x1ec>)
 8000c1c:	4a6c      	ldr	r2, [pc, #432]	; (8000dd0 <HAL_TIM_Base_MspInit+0x1f0>)
 8000c1e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8000c20:	4b6a      	ldr	r3, [pc, #424]	; (8000dcc <HAL_TIM_Base_MspInit+0x1ec>)
 8000c22:	222a      	movs	r2, #42	; 0x2a
 8000c24:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c26:	4b69      	ldr	r3, [pc, #420]	; (8000dcc <HAL_TIM_Base_MspInit+0x1ec>)
 8000c28:	2210      	movs	r2, #16
 8000c2a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2c:	4b67      	ldr	r3, [pc, #412]	; (8000dcc <HAL_TIM_Base_MspInit+0x1ec>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c32:	4b66      	ldr	r3, [pc, #408]	; (8000dcc <HAL_TIM_Base_MspInit+0x1ec>)
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c38:	4b64      	ldr	r3, [pc, #400]	; (8000dcc <HAL_TIM_Base_MspInit+0x1ec>)
 8000c3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c3e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c40:	4b62      	ldr	r3, [pc, #392]	; (8000dcc <HAL_TIM_Base_MspInit+0x1ec>)
 8000c42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c46:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c48:	4b60      	ldr	r3, [pc, #384]	; (8000dcc <HAL_TIM_Base_MspInit+0x1ec>)
 8000c4a:	2220      	movs	r2, #32
 8000c4c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c4e:	4b5f      	ldr	r3, [pc, #380]	; (8000dcc <HAL_TIM_Base_MspInit+0x1ec>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000c54:	485d      	ldr	r0, [pc, #372]	; (8000dcc <HAL_TIM_Base_MspInit+0x1ec>)
 8000c56:	f000 fb9d 	bl	8001394 <HAL_DMA_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8000c60:	f7ff ff94 	bl	8000b8c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a59      	ldr	r2, [pc, #356]	; (8000dcc <HAL_TIM_Base_MspInit+0x1ec>)
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24
 8000c6a:	4a58      	ldr	r2, [pc, #352]	; (8000dcc <HAL_TIM_Base_MspInit+0x1ec>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel2;
 8000c70:	4b58      	ldr	r3, [pc, #352]	; (8000dd4 <HAL_TIM_Base_MspInit+0x1f4>)
 8000c72:	4a59      	ldr	r2, [pc, #356]	; (8000dd8 <HAL_TIM_Base_MspInit+0x1f8>)
 8000c74:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 8000c76:	4b57      	ldr	r3, [pc, #348]	; (8000dd4 <HAL_TIM_Base_MspInit+0x1f4>)
 8000c78:	222b      	movs	r2, #43	; 0x2b
 8000c7a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c7c:	4b55      	ldr	r3, [pc, #340]	; (8000dd4 <HAL_TIM_Base_MspInit+0x1f4>)
 8000c7e:	2210      	movs	r2, #16
 8000c80:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c82:	4b54      	ldr	r3, [pc, #336]	; (8000dd4 <HAL_TIM_Base_MspInit+0x1f4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000c88:	4b52      	ldr	r3, [pc, #328]	; (8000dd4 <HAL_TIM_Base_MspInit+0x1f4>)
 8000c8a:	2280      	movs	r2, #128	; 0x80
 8000c8c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c8e:	4b51      	ldr	r3, [pc, #324]	; (8000dd4 <HAL_TIM_Base_MspInit+0x1f4>)
 8000c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c94:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c96:	4b4f      	ldr	r3, [pc, #316]	; (8000dd4 <HAL_TIM_Base_MspInit+0x1f4>)
 8000c98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c9c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8000c9e:	4b4d      	ldr	r3, [pc, #308]	; (8000dd4 <HAL_TIM_Base_MspInit+0x1f4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000ca4:	4b4b      	ldr	r3, [pc, #300]	; (8000dd4 <HAL_TIM_Base_MspInit+0x1f4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8000caa:	484a      	ldr	r0, [pc, #296]	; (8000dd4 <HAL_TIM_Base_MspInit+0x1f4>)
 8000cac:	f000 fb72 	bl	8001394 <HAL_DMA_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_TIM_Base_MspInit+0xda>
    {
      Error_Handler();
 8000cb6:	f7ff ff69 	bl	8000b8c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a45      	ldr	r2, [pc, #276]	; (8000dd4 <HAL_TIM_Base_MspInit+0x1f4>)
 8000cbe:	629a      	str	r2, [r3, #40]	; 0x28
 8000cc0:	4a44      	ldr	r2, [pc, #272]	; (8000dd4 <HAL_TIM_Base_MspInit+0x1f4>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cc6:	e078      	b.n	8000dba <HAL_TIM_Base_MspInit+0x1da>
  else if(htim_base->Instance==TIM2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd0:	d129      	bne.n	8000d26 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd2:	4b3d      	ldr	r3, [pc, #244]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	4a3c      	ldr	r2, [pc, #240]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cde:	4b3a      	ldr	r3, [pc, #232]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	61fb      	str	r3, [r7, #28]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	4a36      	ldr	r2, [pc, #216]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf6:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	61bb      	str	r3, [r7, #24]
 8000d00:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d02:	2301      	movs	r3, #1
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8000d12:	230e      	movs	r3, #14
 8000d14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f000 fdfc 	bl	800191c <HAL_GPIO_Init>
}
 8000d24:	e049      	b.n	8000dba <HAL_TIM_Base_MspInit+0x1da>
  else if(htim_base->Instance==TIM3)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a2c      	ldr	r2, [pc, #176]	; (8000ddc <HAL_TIM_Base_MspInit+0x1fc>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d144      	bne.n	8000dba <HAL_TIM_Base_MspInit+0x1da>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d30:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d34:	4a24      	ldr	r2, [pc, #144]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4c:	4a1e      	ldr	r2, [pc, #120]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d64:	4a18      	ldr	r2, [pc, #96]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8000d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000d78:	2350      	movs	r3, #80	; 0x50
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d96:	f000 fdc1 	bl	800191c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000daa:	2302      	movs	r3, #2
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	480a      	ldr	r0, [pc, #40]	; (8000de0 <HAL_TIM_Base_MspInit+0x200>)
 8000db6:	f000 fdb1 	bl	800191c <HAL_GPIO_Init>
}
 8000dba:	bf00      	nop
 8000dbc:	3738      	adds	r7, #56	; 0x38
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40012c00 	.word	0x40012c00
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	200003dc 	.word	0x200003dc
 8000dd0:	40020008 	.word	0x40020008
 8000dd4:	2000043c 	.word	0x2000043c
 8000dd8:	4002001c 	.word	0x4002001c
 8000ddc:	40000400 	.word	0x40000400
 8000de0:	48000400 	.word	0x48000400

08000de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a20      	ldr	r2, [pc, #128]	; (8000e84 <HAL_TIM_MspPostInit+0xa0>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d139      	bne.n	8000e7a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_TIM_MspPostInit+0xa4>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <HAL_TIM_MspPostInit+0xa4>)
 8000e0c:	f043 0320 	orr.w	r3, r3, #32
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_TIM_MspPostInit+0xa4>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f003 0320 	and.w	r3, r3, #32
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_TIM_MspPostInit+0xa4>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <HAL_TIM_MspPostInit+0xa4>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_TIM_MspPostInit+0xa4>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e36:	2301      	movs	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e46:	2306      	movs	r3, #6
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480e      	ldr	r0, [pc, #56]	; (8000e8c <HAL_TIM_MspPostInit+0xa8>)
 8000e52:	f000 fd63 	bl	800191c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e56:	f44f 53bc 	mov.w	r3, #6016	; 0x1780
 8000e5a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e68:	2306      	movs	r3, #6
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e76:	f000 fd51 	bl	800191c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40012c00 	.word	0x40012c00
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	48001400 	.word	0x48001400

08000e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b09a      	sub	sp, #104	; 0x68
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	2244      	movs	r2, #68	; 0x44
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f004 fa11 	bl	80052d8 <memset>
  if(huart->Instance==USART2)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a1f      	ldr	r2, [pc, #124]	; (8000f38 <HAL_UART_MspInit+0xa8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d136      	bne.n	8000f2e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f001 fc97 	bl	8002800 <HAL_RCCEx_PeriphCLKConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ed8:	f7ff fe58 	bl	8000b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_UART_MspInit+0xac>)
 8000ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee0:	4a16      	ldr	r2, [pc, #88]	; (8000f3c <HAL_UART_MspInit+0xac>)
 8000ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_UART_MspInit+0xac>)
 8000eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_UART_MspInit+0xac>)
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef8:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <HAL_UART_MspInit+0xac>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_UART_MspInit+0xac>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000f0c:	230c      	movs	r3, #12
 8000f0e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f24:	4619      	mov	r1, r3
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2a:	f000 fcf7 	bl	800191c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	3768      	adds	r7, #104	; 0x68
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40004400 	.word	0x40004400
 8000f3c:	40021000 	.word	0x40021000

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8c:	f000 f8b2 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <DMA1_Channel1_IRQHandler+0x10>)
 8000f9a:	f000 fb1e 	bl	80015da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200003dc 	.word	0x200003dc

08000fa8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <DMA1_Channel2_IRQHandler+0x10>)
 8000fae:	f000 fb14 	bl	80015da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000043c 	.word	0x2000043c

08000fbc <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_tim1_ch1);
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <DMAMUX_OVR_IRQHandler+0x14>)
 8000fc2:	f000 fc59 	bl	8001878 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_tim1_ch2);
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <DMAMUX_OVR_IRQHandler+0x18>)
 8000fc8:	f000 fc56 	bl	8001878 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200003dc 	.word	0x200003dc
 8000fd4:	2000043c 	.word	0x2000043c

08000fd8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ffc:	480d      	ldr	r0, [pc, #52]	; (8001034 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ffe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopForever+0x6>)
  ldr r1, =_edata
 8001002:	490e      	ldr	r1, [pc, #56]	; (800103c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <LoopForever+0xe>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001018:	4c0b      	ldr	r4, [pc, #44]	; (8001048 <LoopForever+0x16>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001026:	f7ff ffd7 	bl	8000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f004 f931 	bl	8005290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800102e:	f7ff fac7 	bl	80005c0 <main>

08001032 <LoopForever>:

LoopForever:
    b LoopForever
 8001032:	e7fe      	b.n	8001032 <LoopForever>
  ldr   r0, =_estack
 8001034:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8001040:	08005350 	.word	0x08005350
  ldr r2, =_sbss
 8001044:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8001048:	20000530 	.word	0x20000530

0800104c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC1_2_IRQHandler>

0800104e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001058:	2003      	movs	r0, #3
 800105a:	f000 f95b 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105e:	2000      	movs	r0, #0
 8001060:	f000 f80e 	bl	8001080 <HAL_InitTick>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	e001      	b.n	8001074 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001070:	f7ff fd92 	bl	8000b98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001074:	79fb      	ldrb	r3, [r7, #7]

}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <HAL_InitTick+0x68>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d022      	beq.n	80010da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_InitTick+0x6c>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_InitTick+0x68>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80010a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f966 	bl	800137a <HAL_SYSTICK_Config>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10f      	bne.n	80010d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b0f      	cmp	r3, #15
 80010b8:	d809      	bhi.n	80010ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ba:	2200      	movs	r2, #0
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	f04f 30ff 	mov.w	r0, #4294967295
 80010c2:	f000 f932 	bl	800132a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <HAL_InitTick+0x70>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e007      	b.n	80010de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e004      	b.n	80010de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e001      	b.n	80010de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200002d8 	.word	0x200002d8
 80010ec:	200002d0 	.word	0x200002d0
 80010f0:	200002d4 	.word	0x200002d4

080010f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_IncTick+0x1c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_IncTick+0x20>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4413      	add	r3, r2
 8001102:	4a03      	ldr	r2, [pc, #12]	; (8001110 <HAL_IncTick+0x1c>)
 8001104:	6013      	str	r3, [r2, #0]
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	2000052c 	.word	0x2000052c
 8001114:	200002d8 	.word	0x200002d8

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	2000052c 	.word	0x2000052c

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff ffee 	bl	8001118 <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d004      	beq.n	8001154 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_Delay+0x40>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	4413      	add	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001154:	bf00      	nop
 8001156:	f7ff ffdf 	bl	8001118 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	429a      	cmp	r2, r3
 8001164:	d8f7      	bhi.n	8001156 <HAL_Delay+0x26>
  {
  }
}
 8001166:	bf00      	nop
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200002d8 	.word	0x200002d8

08001174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001190:	4013      	ands	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800119c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <__NVIC_GetPriorityGrouping+0x18>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	f003 0307 	and.w	r3, r3, #7
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db0b      	blt.n	8001202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 021f 	and.w	r2, r3, #31
 80011f0:	4907      	ldr	r1, [pc, #28]	; (8001210 <__NVIC_EnableIRQ+0x38>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	095b      	lsrs	r3, r3, #5
 80011f8:	2001      	movs	r0, #1
 80011fa:	fa00 f202 	lsl.w	r2, r0, r2
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000e100 	.word	0xe000e100

08001214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	db0a      	blt.n	800123e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	490c      	ldr	r1, [pc, #48]	; (8001260 <__NVIC_SetPriority+0x4c>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	0112      	lsls	r2, r2, #4
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	440b      	add	r3, r1
 8001238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800123c:	e00a      	b.n	8001254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4908      	ldr	r1, [pc, #32]	; (8001264 <__NVIC_SetPriority+0x50>)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	3b04      	subs	r3, #4
 800124c:	0112      	lsls	r2, r2, #4
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	440b      	add	r3, r1
 8001252:	761a      	strb	r2, [r3, #24]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000e100 	.word	0xe000e100
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f1c3 0307 	rsb	r3, r3, #7
 8001282:	2b04      	cmp	r3, #4
 8001284:	bf28      	it	cs
 8001286:	2304      	movcs	r3, #4
 8001288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3304      	adds	r3, #4
 800128e:	2b06      	cmp	r3, #6
 8001290:	d902      	bls.n	8001298 <NVIC_EncodePriority+0x30>
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b03      	subs	r3, #3
 8001296:	e000      	b.n	800129a <NVIC_EncodePriority+0x32>
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	f04f 32ff 	mov.w	r2, #4294967295
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	401a      	ands	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	43d9      	mvns	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	4313      	orrs	r3, r2
         );
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3724      	adds	r7, #36	; 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e0:	d301      	bcc.n	80012e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00f      	b.n	8001306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <SysTick_Config+0x40>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ee:	210f      	movs	r1, #15
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f7ff ff8e 	bl	8001214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <SysTick_Config+0x40>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <SysTick_Config+0x40>)
 8001300:	2207      	movs	r2, #7
 8001302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	e000e010 	.word	0xe000e010

08001314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff29 	bl	8001174 <__NVIC_SetPriorityGrouping>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001338:	f7ff ff40 	bl	80011bc <__NVIC_GetPriorityGrouping>
 800133c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f7ff ff90 	bl	8001268 <NVIC_EncodePriority>
 8001348:	4602      	mov	r2, r0
 800134a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff5f 	bl	8001214 <__NVIC_SetPriority>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff33 	bl	80011d8 <__NVIC_EnableIRQ>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa4 	bl	80012d0 <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e08d      	b.n	80014c2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b47      	ldr	r3, [pc, #284]	; (80014cc <HAL_DMA_Init+0x138>)
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d80f      	bhi.n	80013d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b45      	ldr	r3, [pc, #276]	; (80014d0 <HAL_DMA_Init+0x13c>)
 80013ba:	4413      	add	r3, r2
 80013bc:	4a45      	ldr	r2, [pc, #276]	; (80014d4 <HAL_DMA_Init+0x140>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	009a      	lsls	r2, r3, #2
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a42      	ldr	r2, [pc, #264]	; (80014d8 <HAL_DMA_Init+0x144>)
 80013ce:	641a      	str	r2, [r3, #64]	; 0x40
 80013d0:	e00e      	b.n	80013f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b40      	ldr	r3, [pc, #256]	; (80014dc <HAL_DMA_Init+0x148>)
 80013da:	4413      	add	r3, r2
 80013dc:	4a3d      	ldr	r2, [pc, #244]	; (80014d4 <HAL_DMA_Init+0x140>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	009a      	lsls	r2, r3, #2
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a3c      	ldr	r2, [pc, #240]	; (80014e0 <HAL_DMA_Init+0x14c>)
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2202      	movs	r2, #2
 80013f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800140a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001414:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001420:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	4313      	orrs	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f9b6 	bl	80017b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001450:	d102      	bne.n	8001458 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800146c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d010      	beq.n	8001498 <HAL_DMA_Init+0x104>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b04      	cmp	r3, #4
 800147c:	d80c      	bhi.n	8001498 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f9d6 	bl	8001830 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	e008      	b.n	80014aa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40020407 	.word	0x40020407
 80014d0:	bffdfff8 	.word	0xbffdfff8
 80014d4:	cccccccd 	.word	0xcccccccd
 80014d8:	40020000 	.word	0x40020000
 80014dc:	bffdfbf8 	.word	0xbffdfbf8
 80014e0:	40020400 	.word	0x40020400

080014e4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
 80014f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_DMA_Start_IT+0x20>
 8001500:	2302      	movs	r3, #2
 8001502:	e066      	b.n	80015d2 <HAL_DMA_Start_IT+0xee>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b01      	cmp	r3, #1
 8001516:	d155      	bne.n	80015c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2202      	movs	r2, #2
 800151c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	68b9      	ldr	r1, [r7, #8]
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 f8fb 	bl	8001738 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	2b00      	cmp	r3, #0
 8001548:	d008      	beq.n	800155c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 020e 	orr.w	r2, r2, #14
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	e00f      	b.n	800157c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0204 	bic.w	r2, r2, #4
 800156a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 020a 	orr.w	r2, r2, #10
 800157a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001598:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0201 	orr.w	r2, r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	e005      	b.n	80015d0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015cc:	2302      	movs	r3, #2
 80015ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b084      	sub	sp, #16
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f003 031f 	and.w	r3, r3, #31
 80015fa:	2204      	movs	r2, #4
 80015fc:	409a      	lsls	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4013      	ands	r3, r2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d026      	beq.n	8001654 <HAL_DMA_IRQHandler+0x7a>
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d021      	beq.n	8001654 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0320 	and.w	r3, r3, #32
 800161a:	2b00      	cmp	r3, #0
 800161c:	d107      	bne.n	800162e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0204 	bic.w	r2, r2, #4
 800162c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f003 021f 	and.w	r2, r3, #31
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	2104      	movs	r1, #4
 800163c:	fa01 f202 	lsl.w	r2, r1, r2
 8001640:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	2b00      	cmp	r3, #0
 8001648:	d071      	beq.n	800172e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001652:	e06c      	b.n	800172e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	2202      	movs	r2, #2
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d02e      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d029      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0320 	and.w	r3, r3, #32
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10b      	bne.n	8001698 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 020a 	bic.w	r2, r2, #10
 800168e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	2102      	movs	r1, #2
 80016a6:	fa01 f202 	lsl.w	r2, r1, r2
 80016aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d038      	beq.n	800172e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016c4:	e033      	b.n	800172e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	2208      	movs	r2, #8
 80016d0:	409a      	lsls	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d02a      	beq.n	8001730 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d025      	beq.n	8001730 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 020e 	bic.w	r2, r2, #14
 80016f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	f003 021f 	and.w	r2, r3, #31
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	2101      	movs	r1, #1
 8001702:	fa01 f202 	lsl.w	r2, r1, r2
 8001706:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001722:	2b00      	cmp	r3, #0
 8001724:	d004      	beq.n	8001730 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800172e:	bf00      	nop
 8001730:	bf00      	nop
}
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800174e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001754:	2b00      	cmp	r3, #0
 8001756:	d004      	beq.n	8001762 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001760:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f003 021f 	and.w	r2, r3, #31
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f202 	lsl.w	r2, r1, r2
 8001774:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b10      	cmp	r3, #16
 8001784:	d108      	bne.n	8001798 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001796:	e007      	b.n	80017a8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	60da      	str	r2, [r3, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d802      	bhi.n	80017ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	e001      	b.n	80017d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80017d0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	3b08      	subs	r3, #8
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80017e0:	fba2 2303 	umull	r2, r3, r2, r3
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	089b      	lsrs	r3, r3, #2
 80017ee:	009a      	lsls	r2, r3, #2
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4413      	add	r3, r2
 80017f4:	461a      	mov	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a0b      	ldr	r2, [pc, #44]	; (800182c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80017fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	2201      	movs	r2, #1
 8001808:	409a      	lsls	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800180e:	bf00      	nop
 8001810:	371c      	adds	r7, #28
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40020407 	.word	0x40020407
 8001820:	40020800 	.word	0x40020800
 8001824:	40020820 	.word	0x40020820
 8001828:	cccccccd 	.word	0xcccccccd
 800182c:	40020880 	.word	0x40020880

08001830 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001844:	4413      	add	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	461a      	mov	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a08      	ldr	r2, [pc, #32]	; (8001874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001852:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3b01      	subs	r3, #1
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	2201      	movs	r2, #1
 800185e:	409a      	lsls	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	1000823f 	.word	0x1000823f
 8001874:	40020940 	.word	0x40020940

08001878 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d01a      	beq.n	80018c6 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800189e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018a8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d022      	beq.n	8001914 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d8:	4013      	ands	r3, r2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d01a      	beq.n	8001914 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	4798      	blx	r3
      }
    }
  }
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800192a:	e15a      	b.n	8001be2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2101      	movs	r1, #1
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 814c 	beq.w	8001bdc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b01      	cmp	r3, #1
 800194e:	d005      	beq.n	800195c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001958:	2b02      	cmp	r3, #2
 800195a:	d130      	bne.n	80019be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001992:	2201      	movs	r2, #1
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	091b      	lsrs	r3, r3, #4
 80019a8:	f003 0201 	and.w	r2, r3, #1
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d017      	beq.n	80019fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	2203      	movs	r2, #3
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d123      	bne.n	8001a4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	08da      	lsrs	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3208      	adds	r2, #8
 8001a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	691a      	ldr	r2, [r3, #16]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	08da      	lsrs	r2, r3, #3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3208      	adds	r2, #8
 8001a48:	6939      	ldr	r1, [r7, #16]
 8001a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	2203      	movs	r2, #3
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0203 	and.w	r2, r3, #3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 80a6 	beq.w	8001bdc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a90:	4b5b      	ldr	r3, [pc, #364]	; (8001c00 <HAL_GPIO_Init+0x2e4>)
 8001a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a94:	4a5a      	ldr	r2, [pc, #360]	; (8001c00 <HAL_GPIO_Init+0x2e4>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6613      	str	r3, [r2, #96]	; 0x60
 8001a9c:	4b58      	ldr	r3, [pc, #352]	; (8001c00 <HAL_GPIO_Init+0x2e4>)
 8001a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa8:	4a56      	ldr	r2, [pc, #344]	; (8001c04 <HAL_GPIO_Init+0x2e8>)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ad2:	d01f      	beq.n	8001b14 <HAL_GPIO_Init+0x1f8>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a4c      	ldr	r2, [pc, #304]	; (8001c08 <HAL_GPIO_Init+0x2ec>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d019      	beq.n	8001b10 <HAL_GPIO_Init+0x1f4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a4b      	ldr	r2, [pc, #300]	; (8001c0c <HAL_GPIO_Init+0x2f0>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d013      	beq.n	8001b0c <HAL_GPIO_Init+0x1f0>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a4a      	ldr	r2, [pc, #296]	; (8001c10 <HAL_GPIO_Init+0x2f4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d00d      	beq.n	8001b08 <HAL_GPIO_Init+0x1ec>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a49      	ldr	r2, [pc, #292]	; (8001c14 <HAL_GPIO_Init+0x2f8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d007      	beq.n	8001b04 <HAL_GPIO_Init+0x1e8>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a48      	ldr	r2, [pc, #288]	; (8001c18 <HAL_GPIO_Init+0x2fc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d101      	bne.n	8001b00 <HAL_GPIO_Init+0x1e4>
 8001afc:	2305      	movs	r3, #5
 8001afe:	e00a      	b.n	8001b16 <HAL_GPIO_Init+0x1fa>
 8001b00:	2306      	movs	r3, #6
 8001b02:	e008      	b.n	8001b16 <HAL_GPIO_Init+0x1fa>
 8001b04:	2304      	movs	r3, #4
 8001b06:	e006      	b.n	8001b16 <HAL_GPIO_Init+0x1fa>
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e004      	b.n	8001b16 <HAL_GPIO_Init+0x1fa>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e002      	b.n	8001b16 <HAL_GPIO_Init+0x1fa>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <HAL_GPIO_Init+0x1fa>
 8001b14:	2300      	movs	r3, #0
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	f002 0203 	and.w	r2, r2, #3
 8001b1c:	0092      	lsls	r2, r2, #2
 8001b1e:	4093      	lsls	r3, r2
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b26:	4937      	ldr	r1, [pc, #220]	; (8001c04 <HAL_GPIO_Init+0x2e8>)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b34:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b58:	4a30      	ldr	r2, [pc, #192]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b5e:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b82:	4a26      	ldr	r2, [pc, #152]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bac:	4a1b      	ldr	r2, [pc, #108]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bd6:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3301      	adds	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f47f ae9d 	bne.w	800192c <HAL_GPIO_Init+0x10>
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	bf00      	nop
 8001bf6:	371c      	adds	r7, #28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40010000 	.word	0x40010000
 8001c08:	48000400 	.word	0x48000400
 8001c0c:	48000800 	.word	0x48000800
 8001c10:	48000c00 	.word	0x48000c00
 8001c14:	48001000 	.word	0x48001000
 8001c18:	48001400 	.word	0x48001400
 8001c1c:	40010400 	.word	0x40010400

08001c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c30:	787b      	ldrb	r3, [r7, #1]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c3e:	887a      	ldrh	r2, [r7, #2]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d141      	bne.n	8001ce2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c5e:	4b4b      	ldr	r3, [pc, #300]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c6a:	d131      	bne.n	8001cd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c6c:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c72:	4a46      	ldr	r2, [pc, #280]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c7c:	4b43      	ldr	r3, [pc, #268]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c84:	4a41      	ldr	r2, [pc, #260]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c8c:	4b40      	ldr	r3, [pc, #256]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2232      	movs	r2, #50	; 0x32
 8001c92:	fb02 f303 	mul.w	r3, r2, r3
 8001c96:	4a3f      	ldr	r2, [pc, #252]	; (8001d94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c98:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9c:	0c9b      	lsrs	r3, r3, #18
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ca2:	e002      	b.n	8001caa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001caa:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb6:	d102      	bne.n	8001cbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f2      	bne.n	8001ca4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cbe:	4b33      	ldr	r3, [pc, #204]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cca:	d158      	bne.n	8001d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e057      	b.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cd0:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cd6:	4a2d      	ldr	r2, [pc, #180]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ce0:	e04d      	b.n	8001d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce8:	d141      	bne.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cea:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf6:	d131      	bne.n	8001d5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cf8:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cfe:	4a23      	ldr	r2, [pc, #140]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d08:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d10:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2232      	movs	r2, #50	; 0x32
 8001d1e:	fb02 f303 	mul.w	r3, r2, r3
 8001d22:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	0c9b      	lsrs	r3, r3, #18
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d2e:	e002      	b.n	8001d36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d42:	d102      	bne.n	8001d4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f2      	bne.n	8001d30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d56:	d112      	bne.n	8001d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e011      	b.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d6c:	e007      	b.n	8001d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	40007000 	.word	0x40007000
 8001d90:	200002d0 	.word	0x200002d0
 8001d94:	431bde83 	.word	0x431bde83

08001d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e306      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d075      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001db6:	4b97      	ldr	r3, [pc, #604]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc0:	4b94      	ldr	r3, [pc, #592]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	2b0c      	cmp	r3, #12
 8001dce:	d102      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x3e>
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d002      	beq.n	8001ddc <HAL_RCC_OscConfig+0x44>
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d10b      	bne.n	8001df4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ddc:	4b8d      	ldr	r3, [pc, #564]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d05b      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x108>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d157      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e2e1      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfc:	d106      	bne.n	8001e0c <HAL_RCC_OscConfig+0x74>
 8001dfe:	4b85      	ldr	r3, [pc, #532]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a84      	ldr	r2, [pc, #528]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e01d      	b.n	8001e48 <HAL_RCC_OscConfig+0xb0>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x98>
 8001e16:	4b7f      	ldr	r3, [pc, #508]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a7e      	ldr	r2, [pc, #504]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	4b7c      	ldr	r3, [pc, #496]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a7b      	ldr	r2, [pc, #492]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e00b      	b.n	8001e48 <HAL_RCC_OscConfig+0xb0>
 8001e30:	4b78      	ldr	r3, [pc, #480]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a77      	ldr	r2, [pc, #476]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b75      	ldr	r3, [pc, #468]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a74      	ldr	r2, [pc, #464]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d013      	beq.n	8001e78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7ff f962 	bl	8001118 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e58:	f7ff f95e 	bl	8001118 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b64      	cmp	r3, #100	; 0x64
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e2a6      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e6a:	4b6a      	ldr	r3, [pc, #424]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0xc0>
 8001e76:	e014      	b.n	8001ea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e78:	f7ff f94e 	bl	8001118 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e80:	f7ff f94a 	bl	8001118 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b64      	cmp	r3, #100	; 0x64
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e292      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e92:	4b60      	ldr	r3, [pc, #384]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0xe8>
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d075      	beq.n	8001f9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eae:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb8:	4b56      	ldr	r3, [pc, #344]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2b0c      	cmp	r3, #12
 8001ec6:	d102      	bne.n	8001ece <HAL_RCC_OscConfig+0x136>
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d002      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x13c>
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d11f      	bne.n	8001f14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed4:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_OscConfig+0x154>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e265      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b49      	ldr	r3, [pc, #292]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	061b      	lsls	r3, r3, #24
 8001efa:	4946      	ldr	r1, [pc, #280]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f00:	4b45      	ldr	r3, [pc, #276]	; (8002018 <HAL_RCC_OscConfig+0x280>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff f8bb 	bl	8001080 <HAL_InitTick>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d043      	beq.n	8001f98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e251      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d023      	beq.n	8001f64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f1c:	4b3d      	ldr	r3, [pc, #244]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a3c      	ldr	r2, [pc, #240]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7ff f8f6 	bl	8001118 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f30:	f7ff f8f2 	bl	8001118 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e23a      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f42:	4b34      	ldr	r3, [pc, #208]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4e:	4b31      	ldr	r3, [pc, #196]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	061b      	lsls	r3, r3, #24
 8001f5c:	492d      	ldr	r1, [pc, #180]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
 8001f62:	e01a      	b.n	8001f9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f64:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a2a      	ldr	r2, [pc, #168]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001f6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff f8d2 	bl	8001118 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f78:	f7ff f8ce 	bl	8001118 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e216      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f8a:	4b22      	ldr	r3, [pc, #136]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x1e0>
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d041      	beq.n	800202a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d01c      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fae:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb4:	4a17      	ldr	r2, [pc, #92]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbe:	f7ff f8ab 	bl	8001118 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc6:	f7ff f8a7 	bl	8001118 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e1ef      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0ef      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x22e>
 8001fe6:	e020      	b.n	800202a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fee:	4a09      	ldr	r2, [pc, #36]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff8:	f7ff f88e 	bl	8001118 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ffe:	e00d      	b.n	800201c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002000:	f7ff f88a 	bl	8001118 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d906      	bls.n	800201c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e1d2      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	200002d4 	.word	0x200002d4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800201c:	4b8c      	ldr	r3, [pc, #560]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 800201e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1ea      	bne.n	8002000 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 80a6 	beq.w	8002184 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002038:	2300      	movs	r3, #0
 800203a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800203c:	4b84      	ldr	r3, [pc, #528]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_OscConfig+0x2b4>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <HAL_RCC_OscConfig+0x2b6>
 800204c:	2300      	movs	r3, #0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00d      	beq.n	800206e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b7f      	ldr	r3, [pc, #508]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	4a7e      	ldr	r2, [pc, #504]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	6593      	str	r3, [r2, #88]	; 0x58
 800205e:	4b7c      	ldr	r3, [pc, #496]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800206a:	2301      	movs	r3, #1
 800206c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800206e:	4b79      	ldr	r3, [pc, #484]	; (8002254 <HAL_RCC_OscConfig+0x4bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d118      	bne.n	80020ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800207a:	4b76      	ldr	r3, [pc, #472]	; (8002254 <HAL_RCC_OscConfig+0x4bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a75      	ldr	r2, [pc, #468]	; (8002254 <HAL_RCC_OscConfig+0x4bc>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002086:	f7ff f847 	bl	8001118 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208e:	f7ff f843 	bl	8001118 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e18b      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a0:	4b6c      	ldr	r3, [pc, #432]	; (8002254 <HAL_RCC_OscConfig+0x4bc>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d108      	bne.n	80020c6 <HAL_RCC_OscConfig+0x32e>
 80020b4:	4b66      	ldr	r3, [pc, #408]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	4a65      	ldr	r2, [pc, #404]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020c4:	e024      	b.n	8002110 <HAL_RCC_OscConfig+0x378>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b05      	cmp	r3, #5
 80020cc:	d110      	bne.n	80020f0 <HAL_RCC_OscConfig+0x358>
 80020ce:	4b60      	ldr	r3, [pc, #384]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d4:	4a5e      	ldr	r2, [pc, #376]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80020d6:	f043 0304 	orr.w	r3, r3, #4
 80020da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020de:	4b5c      	ldr	r3, [pc, #368]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e4:	4a5a      	ldr	r2, [pc, #360]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ee:	e00f      	b.n	8002110 <HAL_RCC_OscConfig+0x378>
 80020f0:	4b57      	ldr	r3, [pc, #348]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f6:	4a56      	ldr	r2, [pc, #344]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002100:	4b53      	ldr	r3, [pc, #332]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	4a52      	ldr	r2, [pc, #328]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d016      	beq.n	8002146 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002118:	f7fe fffe 	bl	8001118 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211e:	e00a      	b.n	8002136 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002120:	f7fe fffa 	bl	8001118 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e140      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002136:	4b46      	ldr	r3, [pc, #280]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ed      	beq.n	8002120 <HAL_RCC_OscConfig+0x388>
 8002144:	e015      	b.n	8002172 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002146:	f7fe ffe7 	bl	8001118 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7fe ffe3 	bl	8001118 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	; 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e129      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002164:	4b3a      	ldr	r3, [pc, #232]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1ed      	bne.n	800214e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002172:	7ffb      	ldrb	r3, [r7, #31]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002178:	4b35      	ldr	r3, [pc, #212]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 800217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217c:	4a34      	ldr	r2, [pc, #208]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 800217e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002182:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b00      	cmp	r3, #0
 800218e:	d03c      	beq.n	800220a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01c      	beq.n	80021d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002198:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 800219a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800219e:	4a2c      	ldr	r2, [pc, #176]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7fe ffb6 	bl	8001118 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b0:	f7fe ffb2 	bl	8001118 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0fa      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021c2:	4b23      	ldr	r3, [pc, #140]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80021c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0ef      	beq.n	80021b0 <HAL_RCC_OscConfig+0x418>
 80021d0:	e01b      	b.n	800220a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021d2:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80021d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021d8:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80021da:	f023 0301 	bic.w	r3, r3, #1
 80021de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e2:	f7fe ff99 	bl	8001118 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ea:	f7fe ff95 	bl	8001118 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e0dd      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80021fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1ef      	bne.n	80021ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80d1 	beq.w	80023b6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b0c      	cmp	r3, #12
 800221e:	f000 808b 	beq.w	8002338 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d15e      	bne.n	80022e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a08      	ldr	r2, [pc, #32]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002230:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7fe ff6f 	bl	8001118 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223c:	e00c      	b.n	8002258 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223e:	f7fe ff6b 	bl	8001118 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d905      	bls.n	8002258 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e0b3      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
 8002250:	40021000 	.word	0x40021000
 8002254:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002258:	4b59      	ldr	r3, [pc, #356]	; (80023c0 <HAL_RCC_OscConfig+0x628>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1ec      	bne.n	800223e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002264:	4b56      	ldr	r3, [pc, #344]	; (80023c0 <HAL_RCC_OscConfig+0x628>)
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	4b56      	ldr	r3, [pc, #344]	; (80023c4 <HAL_RCC_OscConfig+0x62c>)
 800226a:	4013      	ands	r3, r2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6a11      	ldr	r1, [r2, #32]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002274:	3a01      	subs	r2, #1
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	4311      	orrs	r1, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800227e:	0212      	lsls	r2, r2, #8
 8002280:	4311      	orrs	r1, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002286:	0852      	lsrs	r2, r2, #1
 8002288:	3a01      	subs	r2, #1
 800228a:	0552      	lsls	r2, r2, #21
 800228c:	4311      	orrs	r1, r2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002292:	0852      	lsrs	r2, r2, #1
 8002294:	3a01      	subs	r2, #1
 8002296:	0652      	lsls	r2, r2, #25
 8002298:	4311      	orrs	r1, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800229e:	06d2      	lsls	r2, r2, #27
 80022a0:	430a      	orrs	r2, r1
 80022a2:	4947      	ldr	r1, [pc, #284]	; (80023c0 <HAL_RCC_OscConfig+0x628>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a8:	4b45      	ldr	r3, [pc, #276]	; (80023c0 <HAL_RCC_OscConfig+0x628>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a44      	ldr	r2, [pc, #272]	; (80023c0 <HAL_RCC_OscConfig+0x628>)
 80022ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022b4:	4b42      	ldr	r3, [pc, #264]	; (80023c0 <HAL_RCC_OscConfig+0x628>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a41      	ldr	r2, [pc, #260]	; (80023c0 <HAL_RCC_OscConfig+0x628>)
 80022ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe ff2a 	bl	8001118 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c8:	f7fe ff26 	bl	8001118 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e06e      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022da:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <HAL_RCC_OscConfig+0x628>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x530>
 80022e6:	e066      	b.n	80023b6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e8:	4b35      	ldr	r3, [pc, #212]	; (80023c0 <HAL_RCC_OscConfig+0x628>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a34      	ldr	r2, [pc, #208]	; (80023c0 <HAL_RCC_OscConfig+0x628>)
 80022ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022f4:	4b32      	ldr	r3, [pc, #200]	; (80023c0 <HAL_RCC_OscConfig+0x628>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a31      	ldr	r2, [pc, #196]	; (80023c0 <HAL_RCC_OscConfig+0x628>)
 80022fa:	f023 0303 	bic.w	r3, r3, #3
 80022fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002300:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <HAL_RCC_OscConfig+0x628>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a2e      	ldr	r2, [pc, #184]	; (80023c0 <HAL_RCC_OscConfig+0x628>)
 8002306:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800230a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe ff02 	bl	8001118 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002318:	f7fe fefe 	bl	8001118 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e046      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800232a:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <HAL_RCC_OscConfig+0x628>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x580>
 8002336:	e03e      	b.n	80023b6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e039      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002344:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HAL_RCC_OscConfig+0x628>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	429a      	cmp	r2, r3
 8002356:	d12c      	bne.n	80023b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	3b01      	subs	r3, #1
 8002364:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d123      	bne.n	80023b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d11b      	bne.n	80023b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d113      	bne.n	80023b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	085b      	lsrs	r3, r3, #1
 8002396:	3b01      	subs	r3, #1
 8002398:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800239a:	429a      	cmp	r2, r3
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a8:	085b      	lsrs	r3, r3, #1
 80023aa:	3b01      	subs	r3, #1
 80023ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3720      	adds	r7, #32
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40021000 	.word	0x40021000
 80023c4:	019f800c 	.word	0x019f800c

080023c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e11e      	b.n	800261e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e0:	4b91      	ldr	r3, [pc, #580]	; (8002628 <HAL_RCC_ClockConfig+0x260>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d910      	bls.n	8002410 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b8e      	ldr	r3, [pc, #568]	; (8002628 <HAL_RCC_ClockConfig+0x260>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 020f 	bic.w	r2, r3, #15
 80023f6:	498c      	ldr	r1, [pc, #560]	; (8002628 <HAL_RCC_ClockConfig+0x260>)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b8a      	ldr	r3, [pc, #552]	; (8002628 <HAL_RCC_ClockConfig+0x260>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e106      	b.n	800261e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d073      	beq.n	8002504 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d129      	bne.n	8002478 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002424:	4b81      	ldr	r3, [pc, #516]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0f4      	b.n	800261e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002434:	f000 f99e 	bl	8002774 <RCC_GetSysClockFreqFromPLLSource>
 8002438:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4a7c      	ldr	r2, [pc, #496]	; (8002630 <HAL_RCC_ClockConfig+0x268>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d93f      	bls.n	80024c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002442:	4b7a      	ldr	r3, [pc, #488]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002456:	2b00      	cmp	r3, #0
 8002458:	d033      	beq.n	80024c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800245e:	2b00      	cmp	r3, #0
 8002460:	d12f      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002462:	4b72      	ldr	r3, [pc, #456]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800246a:	4a70      	ldr	r2, [pc, #448]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 800246c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002470:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	e024      	b.n	80024c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d107      	bne.n	8002490 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002480:	4b6a      	ldr	r3, [pc, #424]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0c6      	b.n	800261e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002490:	4b66      	ldr	r3, [pc, #408]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0be      	b.n	800261e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80024a0:	f000 f8ce 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80024a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4a61      	ldr	r2, [pc, #388]	; (8002630 <HAL_RCC_ClockConfig+0x268>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d909      	bls.n	80024c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024ae:	4b5f      	ldr	r3, [pc, #380]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024b6:	4a5d      	ldr	r2, [pc, #372]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80024b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c2:	4b5a      	ldr	r3, [pc, #360]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f023 0203 	bic.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4957      	ldr	r1, [pc, #348]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d4:	f7fe fe20 	bl	8001118 <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7fe fe1c 	bl	8001118 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e095      	b.n	800261e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	4b4e      	ldr	r3, [pc, #312]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 020c 	and.w	r2, r3, #12
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	429a      	cmp	r2, r3
 8002502:	d1eb      	bne.n	80024dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d023      	beq.n	8002558 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800251c:	4b43      	ldr	r3, [pc, #268]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	4a42      	ldr	r2, [pc, #264]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002522:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002526:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002534:	4b3d      	ldr	r3, [pc, #244]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800253c:	4a3b      	ldr	r2, [pc, #236]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 800253e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002542:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002544:	4b39      	ldr	r3, [pc, #228]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4936      	ldr	r1, [pc, #216]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
 8002556:	e008      	b.n	800256a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b80      	cmp	r3, #128	; 0x80
 800255c:	d105      	bne.n	800256a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800255e:	4b33      	ldr	r3, [pc, #204]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	4a32      	ldr	r2, [pc, #200]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002564:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002568:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800256a:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <HAL_RCC_ClockConfig+0x260>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d21d      	bcs.n	80025b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_RCC_ClockConfig+0x260>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 020f 	bic.w	r2, r3, #15
 8002580:	4929      	ldr	r1, [pc, #164]	; (8002628 <HAL_RCC_ClockConfig+0x260>)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002588:	f7fe fdc6 	bl	8001118 <HAL_GetTick>
 800258c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002590:	f7fe fdc2 	bl	8001118 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	; 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e03b      	b.n	800261e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_RCC_ClockConfig+0x260>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d1ed      	bne.n	8002590 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c0:	4b1a      	ldr	r3, [pc, #104]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4917      	ldr	r1, [pc, #92]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025de:	4b13      	ldr	r3, [pc, #76]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	490f      	ldr	r1, [pc, #60]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025f2:	f000 f825 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025f6:	4602      	mov	r2, r0
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	490c      	ldr	r1, [pc, #48]	; (8002634 <HAL_RCC_ClockConfig+0x26c>)
 8002604:	5ccb      	ldrb	r3, [r1, r3]
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_RCC_ClockConfig+0x270>)
 8002610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_RCC_ClockConfig+0x274>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fd32 	bl	8001080 <HAL_InitTick>
 800261c:	4603      	mov	r3, r0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40022000 	.word	0x40022000
 800262c:	40021000 	.word	0x40021000
 8002630:	04c4b400 	.word	0x04c4b400
 8002634:	08005300 	.word	0x08005300
 8002638:	200002d0 	.word	0x200002d0
 800263c:	200002d4 	.word	0x200002d4

08002640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002646:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b04      	cmp	r3, #4
 8002650:	d102      	bne.n	8002658 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002652:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	e047      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002658:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b08      	cmp	r3, #8
 8002662:	d102      	bne.n	800266a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002664:	4b26      	ldr	r3, [pc, #152]	; (8002700 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	e03e      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800266a:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b0c      	cmp	r3, #12
 8002674:	d136      	bne.n	80026e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002680:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	3301      	adds	r3, #1
 800268c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d10c      	bne.n	80026ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002694:	4a1a      	ldr	r2, [pc, #104]	; (8002700 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	4a16      	ldr	r2, [pc, #88]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800269e:	68d2      	ldr	r2, [r2, #12]
 80026a0:	0a12      	lsrs	r2, r2, #8
 80026a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	617b      	str	r3, [r7, #20]
      break;
 80026ac:	e00c      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026ae:	4a13      	ldr	r2, [pc, #76]	; (80026fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	4a10      	ldr	r2, [pc, #64]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026b8:	68d2      	ldr	r2, [r2, #12]
 80026ba:	0a12      	lsrs	r2, r2, #8
 80026bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026c0:	fb02 f303 	mul.w	r3, r2, r3
 80026c4:	617b      	str	r3, [r7, #20]
      break;
 80026c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	0e5b      	lsrs	r3, r3, #25
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	3301      	adds	r3, #1
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	e001      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026e8:	693b      	ldr	r3, [r7, #16]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	00f42400 	.word	0x00f42400
 8002700:	007a1200 	.word	0x007a1200

08002704 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <HAL_RCC_GetHCLKFreq+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	200002d0 	.word	0x200002d0

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002720:	f7ff fff0 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4904      	ldr	r1, [pc, #16]	; (8002744 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	08005310 	.word	0x08005310

08002748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800274c:	f7ff ffda 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0adb      	lsrs	r3, r3, #11
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4904      	ldr	r1, [pc, #16]	; (8002770 <HAL_RCC_GetPCLK2Freq+0x28>)
 800275e:	5ccb      	ldrb	r3, [r1, r3]
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002768:	4618      	mov	r0, r3
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	08005310 	.word	0x08005310

08002774 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800277a:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	3301      	adds	r3, #1
 8002790:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d10c      	bne.n	80027b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002798:	4a17      	ldr	r2, [pc, #92]	; (80027f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a0:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027a2:	68d2      	ldr	r2, [r2, #12]
 80027a4:	0a12      	lsrs	r2, r2, #8
 80027a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	617b      	str	r3, [r7, #20]
    break;
 80027b0:	e00c      	b.n	80027cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027b2:	4a12      	ldr	r2, [pc, #72]	; (80027fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ba:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027bc:	68d2      	ldr	r2, [r2, #12]
 80027be:	0a12      	lsrs	r2, r2, #8
 80027c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027c4:	fb02 f303 	mul.w	r3, r2, r3
 80027c8:	617b      	str	r3, [r7, #20]
    break;
 80027ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	0e5b      	lsrs	r3, r3, #25
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	3301      	adds	r3, #1
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027e6:	687b      	ldr	r3, [r7, #4]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	371c      	adds	r7, #28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	40021000 	.word	0x40021000
 80027f8:	007a1200 	.word	0x007a1200
 80027fc:	00f42400 	.word	0x00f42400

08002800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002808:	2300      	movs	r3, #0
 800280a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800280c:	2300      	movs	r3, #0
 800280e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8098 	beq.w	800294e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002822:	4b43      	ldr	r3, [pc, #268]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10d      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282e:	4b40      	ldr	r3, [pc, #256]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	4a3f      	ldr	r2, [pc, #252]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002838:	6593      	str	r3, [r2, #88]	; 0x58
 800283a:	4b3d      	ldr	r3, [pc, #244]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002846:	2301      	movs	r3, #1
 8002848:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800284a:	4b3a      	ldr	r3, [pc, #232]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a39      	ldr	r2, [pc, #228]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002854:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002856:	f7fe fc5f 	bl	8001118 <HAL_GetTick>
 800285a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800285c:	e009      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285e:	f7fe fc5b 	bl	8001118 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d902      	bls.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	74fb      	strb	r3, [r7, #19]
        break;
 8002870:	e005      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002872:	4b30      	ldr	r3, [pc, #192]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0ef      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d159      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002884:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800288e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01e      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	429a      	cmp	r2, r3
 800289e:	d019      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028a0:	4b23      	ldr	r3, [pc, #140]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028ac:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028bc:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028cc:	4a18      	ldr	r2, [pc, #96]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d016      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe fc1b 	bl	8001118 <HAL_GetTick>
 80028e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e4:	e00b      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e6:	f7fe fc17 	bl	8001118 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d902      	bls.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	74fb      	strb	r3, [r7, #19]
            break;
 80028fc:	e006      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fe:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ec      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10b      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002912:	4b07      	ldr	r3, [pc, #28]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002918:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	4903      	ldr	r1, [pc, #12]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002928:	e008      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800292a:	7cfb      	ldrb	r3, [r7, #19]
 800292c:	74bb      	strb	r3, [r7, #18]
 800292e:	e005      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002930:	40021000 	.word	0x40021000
 8002934:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002938:	7cfb      	ldrb	r3, [r7, #19]
 800293a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800293c:	7c7b      	ldrb	r3, [r7, #17]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d105      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002942:	4ba6      	ldr	r3, [pc, #664]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002946:	4aa5      	ldr	r2, [pc, #660]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800295a:	4ba0      	ldr	r3, [pc, #640]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002960:	f023 0203 	bic.w	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	499c      	ldr	r1, [pc, #624]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800297c:	4b97      	ldr	r3, [pc, #604]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	f023 020c 	bic.w	r2, r3, #12
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	4994      	ldr	r1, [pc, #592]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800299e:	4b8f      	ldr	r3, [pc, #572]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	498b      	ldr	r1, [pc, #556]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029c0:	4b86      	ldr	r3, [pc, #536]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	4983      	ldr	r1, [pc, #524]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0320 	and.w	r3, r3, #32
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029e2:	4b7e      	ldr	r3, [pc, #504]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	497a      	ldr	r1, [pc, #488]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a04:	4b75      	ldr	r3, [pc, #468]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	4972      	ldr	r1, [pc, #456]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a26:	4b6d      	ldr	r3, [pc, #436]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	4969      	ldr	r1, [pc, #420]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a48:	4b64      	ldr	r3, [pc, #400]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	4961      	ldr	r1, [pc, #388]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a6a:	4b5c      	ldr	r3, [pc, #368]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	4958      	ldr	r1, [pc, #352]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a8c:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	4950      	ldr	r1, [pc, #320]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aac:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a4a      	ldr	r2, [pc, #296]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ab6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d015      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ac4:	4b45      	ldr	r3, [pc, #276]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	4942      	ldr	r1, [pc, #264]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae4:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4a3c      	ldr	r2, [pc, #240]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d015      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002afc:	4b37      	ldr	r3, [pc, #220]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4934      	ldr	r1, [pc, #208]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b1a:	d105      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b1c:	4b2f      	ldr	r3, [pc, #188]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a2e      	ldr	r2, [pc, #184]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d015      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b34:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b42:	4926      	ldr	r1, [pc, #152]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b52:	d105      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b54:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a20      	ldr	r2, [pc, #128]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d015      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	4918      	ldr	r1, [pc, #96]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b8a:	d105      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a12      	ldr	r2, [pc, #72]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d015      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ba4:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb2:	490a      	ldr	r1, [pc, #40]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002bd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000

08002be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e049      	b.n	8002c86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d106      	bne.n	8002c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7fd ffea 	bl	8000be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f000 fdee 	bl	8003800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e049      	b.n	8002d34 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f841 	bl	8002d3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	f000 fd97 	bl	8003800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_TIM_PWM_Start_DMA+0x2c>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	e03c      	b.n	8002df6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d109      	bne.n	8002d96 <HAL_TIM_PWM_Start_DMA+0x46>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	e02f      	b.n	8002df6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d109      	bne.n	8002db0 <HAL_TIM_PWM_Start_DMA+0x60>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	e022      	b.n	8002df6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b0c      	cmp	r3, #12
 8002db4:	d109      	bne.n	8002dca <HAL_TIM_PWM_Start_DMA+0x7a>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	bf0c      	ite	eq
 8002dc2:	2301      	moveq	r3, #1
 8002dc4:	2300      	movne	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	e015      	b.n	8002df6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b10      	cmp	r3, #16
 8002dce:	d109      	bne.n	8002de4 <HAL_TIM_PWM_Start_DMA+0x94>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	e008      	b.n	8002df6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	bf0c      	ite	eq
 8002df0:	2301      	moveq	r3, #1
 8002df2:	2300      	movne	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e1a6      	b.n	800314c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d109      	bne.n	8002e18 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e03c      	b.n	8002e92 <HAL_TIM_PWM_Start_DMA+0x142>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d109      	bne.n	8002e32 <HAL_TIM_PWM_Start_DMA+0xe2>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	bf0c      	ite	eq
 8002e2a:	2301      	moveq	r3, #1
 8002e2c:	2300      	movne	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	e02f      	b.n	8002e92 <HAL_TIM_PWM_Start_DMA+0x142>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d109      	bne.n	8002e4c <HAL_TIM_PWM_Start_DMA+0xfc>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	e022      	b.n	8002e92 <HAL_TIM_PWM_Start_DMA+0x142>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b0c      	cmp	r3, #12
 8002e50:	d109      	bne.n	8002e66 <HAL_TIM_PWM_Start_DMA+0x116>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	bf0c      	ite	eq
 8002e5e:	2301      	moveq	r3, #1
 8002e60:	2300      	movne	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	e015      	b.n	8002e92 <HAL_TIM_PWM_Start_DMA+0x142>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d109      	bne.n	8002e80 <HAL_TIM_PWM_Start_DMA+0x130>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	bf0c      	ite	eq
 8002e78:	2301      	moveq	r3, #1
 8002e7a:	2300      	movne	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e008      	b.n	8002e92 <HAL_TIM_PWM_Start_DMA+0x142>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d034      	beq.n	8002f00 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d104      	bne.n	8002ea6 <HAL_TIM_PWM_Start_DMA+0x156>
 8002e9c:	887b      	ldrh	r3, [r7, #2]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e152      	b.n	800314c <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d104      	bne.n	8002eb6 <HAL_TIM_PWM_Start_DMA+0x166>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb4:	e026      	b.n	8002f04 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d104      	bne.n	8002ec6 <HAL_TIM_PWM_Start_DMA+0x176>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec4:	e01e      	b.n	8002f04 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d104      	bne.n	8002ed6 <HAL_TIM_PWM_Start_DMA+0x186>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed4:	e016      	b.n	8002f04 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b0c      	cmp	r3, #12
 8002eda:	d104      	bne.n	8002ee6 <HAL_TIM_PWM_Start_DMA+0x196>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ee4:	e00e      	b.n	8002f04 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	d104      	bne.n	8002ef6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ef4:	e006      	b.n	8002f04 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002efe:	e001      	b.n	8002f04 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e123      	b.n	800314c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b0c      	cmp	r3, #12
 8002f08:	f200 80ae 	bhi.w	8003068 <HAL_TIM_PWM_Start_DMA+0x318>
 8002f0c:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8002f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f12:	bf00      	nop
 8002f14:	08002f49 	.word	0x08002f49
 8002f18:	08003069 	.word	0x08003069
 8002f1c:	08003069 	.word	0x08003069
 8002f20:	08003069 	.word	0x08003069
 8002f24:	08002f91 	.word	0x08002f91
 8002f28:	08003069 	.word	0x08003069
 8002f2c:	08003069 	.word	0x08003069
 8002f30:	08003069 	.word	0x08003069
 8002f34:	08002fd9 	.word	0x08002fd9
 8002f38:	08003069 	.word	0x08003069
 8002f3c:	08003069 	.word	0x08003069
 8002f40:	08003069 	.word	0x08003069
 8002f44:	08003021 	.word	0x08003021
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	4a81      	ldr	r2, [pc, #516]	; (8003154 <HAL_TIM_PWM_Start_DMA+0x404>)
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	4a80      	ldr	r2, [pc, #512]	; (8003158 <HAL_TIM_PWM_Start_DMA+0x408>)
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	4a7f      	ldr	r2, [pc, #508]	; (800315c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8002f5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3334      	adds	r3, #52	; 0x34
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	887b      	ldrh	r3, [r7, #2]
 8002f70:	f7fe fab8 	bl	80014e4 <HAL_DMA_Start_IT>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e0e6      	b.n	800314c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8c:	60da      	str	r2, [r3, #12]
      break;
 8002f8e:	e06e      	b.n	800306e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	4a6f      	ldr	r2, [pc, #444]	; (8003154 <HAL_TIM_PWM_Start_DMA+0x404>)
 8002f96:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	4a6e      	ldr	r2, [pc, #440]	; (8003158 <HAL_TIM_PWM_Start_DMA+0x408>)
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	4a6d      	ldr	r2, [pc, #436]	; (800315c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8002fa6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3338      	adds	r3, #56	; 0x38
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	887b      	ldrh	r3, [r7, #2]
 8002fb8:	f7fe fa94 	bl	80014e4 <HAL_DMA_Start_IT>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e0c2      	b.n	800314c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fd4:	60da      	str	r2, [r3, #12]
      break;
 8002fd6:	e04a      	b.n	800306e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	4a5d      	ldr	r2, [pc, #372]	; (8003154 <HAL_TIM_PWM_Start_DMA+0x404>)
 8002fde:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	4a5c      	ldr	r2, [pc, #368]	; (8003158 <HAL_TIM_PWM_Start_DMA+0x408>)
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	4a5b      	ldr	r2, [pc, #364]	; (800315c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8002fee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	333c      	adds	r3, #60	; 0x3c
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	887b      	ldrh	r3, [r7, #2]
 8003000:	f7fe fa70 	bl	80014e4 <HAL_DMA_Start_IT>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e09e      	b.n	800314c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800301c:	60da      	str	r2, [r3, #12]
      break;
 800301e:	e026      	b.n	800306e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	4a4b      	ldr	r2, [pc, #300]	; (8003154 <HAL_TIM_PWM_Start_DMA+0x404>)
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	4a4a      	ldr	r2, [pc, #296]	; (8003158 <HAL_TIM_PWM_Start_DMA+0x408>)
 800302e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	4a49      	ldr	r2, [pc, #292]	; (800315c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8003036:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3340      	adds	r3, #64	; 0x40
 8003044:	461a      	mov	r2, r3
 8003046:	887b      	ldrh	r3, [r7, #2]
 8003048:	f7fe fa4c 	bl	80014e4 <HAL_DMA_Start_IT>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e07a      	b.n	800314c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003064:	60da      	str	r2, [r3, #12]
      break;
 8003066:	e002      	b.n	800306e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	75fb      	strb	r3, [r7, #23]
      break;
 800306c:	bf00      	nop
  }

  if (status == HAL_OK)
 800306e:	7dfb      	ldrb	r3, [r7, #23]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d16a      	bne.n	800314a <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2201      	movs	r2, #1
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	4618      	mov	r0, r3
 800307e:	f001 f90d 	bl	800429c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a36      	ldr	r2, [pc, #216]	; (8003160 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d013      	beq.n	80030b4 <HAL_TIM_PWM_Start_DMA+0x364>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a34      	ldr	r2, [pc, #208]	; (8003164 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00e      	beq.n	80030b4 <HAL_TIM_PWM_Start_DMA+0x364>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a33      	ldr	r2, [pc, #204]	; (8003168 <HAL_TIM_PWM_Start_DMA+0x418>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d009      	beq.n	80030b4 <HAL_TIM_PWM_Start_DMA+0x364>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a31      	ldr	r2, [pc, #196]	; (800316c <HAL_TIM_PWM_Start_DMA+0x41c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d004      	beq.n	80030b4 <HAL_TIM_PWM_Start_DMA+0x364>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a30      	ldr	r2, [pc, #192]	; (8003170 <HAL_TIM_PWM_Start_DMA+0x420>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d101      	bne.n	80030b8 <HAL_TIM_PWM_Start_DMA+0x368>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <HAL_TIM_PWM_Start_DMA+0x36a>
 80030b8:	2300      	movs	r3, #0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a23      	ldr	r2, [pc, #140]	; (8003160 <HAL_TIM_PWM_Start_DMA+0x410>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d018      	beq.n	800310a <HAL_TIM_PWM_Start_DMA+0x3ba>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e0:	d013      	beq.n	800310a <HAL_TIM_PWM_Start_DMA+0x3ba>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a23      	ldr	r2, [pc, #140]	; (8003174 <HAL_TIM_PWM_Start_DMA+0x424>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00e      	beq.n	800310a <HAL_TIM_PWM_Start_DMA+0x3ba>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a21      	ldr	r2, [pc, #132]	; (8003178 <HAL_TIM_PWM_Start_DMA+0x428>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d009      	beq.n	800310a <HAL_TIM_PWM_Start_DMA+0x3ba>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1a      	ldr	r2, [pc, #104]	; (8003164 <HAL_TIM_PWM_Start_DMA+0x414>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d004      	beq.n	800310a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a18      	ldr	r2, [pc, #96]	; (8003168 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d115      	bne.n	8003136 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003112:	4013      	ands	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	2b06      	cmp	r3, #6
 800311a:	d015      	beq.n	8003148 <HAL_TIM_PWM_Start_DMA+0x3f8>
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003122:	d011      	beq.n	8003148 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003134:	e008      	b.n	8003148 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e000      	b.n	800314a <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003148:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800314a:	7dfb      	ldrb	r3, [r7, #23]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	080036ef 	.word	0x080036ef
 8003158:	08003797 	.word	0x08003797
 800315c:	0800365d 	.word	0x0800365d
 8003160:	40012c00 	.word	0x40012c00
 8003164:	40013400 	.word	0x40013400
 8003168:	40014000 	.word	0x40014000
 800316c:	40014400 	.word	0x40014400
 8003170:	40014800 	.word	0x40014800
 8003174:	40000400 	.word	0x40000400
 8003178:	40000800 	.word	0x40000800
 800317c:	00010007 	.word	0x00010007

08003180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800319a:	2302      	movs	r3, #2
 800319c:	e0ff      	b.n	800339e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b14      	cmp	r3, #20
 80031aa:	f200 80f0 	bhi.w	800338e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	08003209 	.word	0x08003209
 80031b8:	0800338f 	.word	0x0800338f
 80031bc:	0800338f 	.word	0x0800338f
 80031c0:	0800338f 	.word	0x0800338f
 80031c4:	08003249 	.word	0x08003249
 80031c8:	0800338f 	.word	0x0800338f
 80031cc:	0800338f 	.word	0x0800338f
 80031d0:	0800338f 	.word	0x0800338f
 80031d4:	0800328b 	.word	0x0800328b
 80031d8:	0800338f 	.word	0x0800338f
 80031dc:	0800338f 	.word	0x0800338f
 80031e0:	0800338f 	.word	0x0800338f
 80031e4:	080032cb 	.word	0x080032cb
 80031e8:	0800338f 	.word	0x0800338f
 80031ec:	0800338f 	.word	0x0800338f
 80031f0:	0800338f 	.word	0x0800338f
 80031f4:	0800330d 	.word	0x0800330d
 80031f8:	0800338f 	.word	0x0800338f
 80031fc:	0800338f 	.word	0x0800338f
 8003200:	0800338f 	.word	0x0800338f
 8003204:	0800334d 	.word	0x0800334d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fb86 	bl	8003920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0208 	orr.w	r2, r2, #8
 8003222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0204 	bic.w	r2, r2, #4
 8003232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6999      	ldr	r1, [r3, #24]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	619a      	str	r2, [r3, #24]
      break;
 8003246:	e0a5      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fbf6 	bl	8003a40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6999      	ldr	r1, [r3, #24]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	021a      	lsls	r2, r3, #8
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	619a      	str	r2, [r3, #24]
      break;
 8003288:	e084      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fc5f 	bl	8003b54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0208 	orr.w	r2, r2, #8
 80032a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0204 	bic.w	r2, r2, #4
 80032b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69d9      	ldr	r1, [r3, #28]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	61da      	str	r2, [r3, #28]
      break;
 80032c8:	e064      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fcc7 	bl	8003c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69da      	ldr	r2, [r3, #28]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69d9      	ldr	r1, [r3, #28]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	021a      	lsls	r2, r3, #8
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	61da      	str	r2, [r3, #28]
      break;
 800330a:	e043      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fd30 	bl	8003d78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0208 	orr.w	r2, r2, #8
 8003326:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0204 	bic.w	r2, r2, #4
 8003336:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800334a:	e023      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fd74 	bl	8003e40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003366:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003376:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	021a      	lsls	r2, r3, #8
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800338c:	e002      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	75fb      	strb	r3, [r7, #23]
      break;
 8003392:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800339c:	7dfb      	ldrb	r3, [r7, #23]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop

080033a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_TIM_ConfigClockSource+0x1c>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e0de      	b.n	8003582 <HAL_TIM_ConfigClockSource+0x1da>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80033e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a63      	ldr	r2, [pc, #396]	; (800358c <HAL_TIM_ConfigClockSource+0x1e4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	f000 80a9 	beq.w	8003556 <HAL_TIM_ConfigClockSource+0x1ae>
 8003404:	4a61      	ldr	r2, [pc, #388]	; (800358c <HAL_TIM_ConfigClockSource+0x1e4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	f200 80ae 	bhi.w	8003568 <HAL_TIM_ConfigClockSource+0x1c0>
 800340c:	4a60      	ldr	r2, [pc, #384]	; (8003590 <HAL_TIM_ConfigClockSource+0x1e8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	f000 80a1 	beq.w	8003556 <HAL_TIM_ConfigClockSource+0x1ae>
 8003414:	4a5e      	ldr	r2, [pc, #376]	; (8003590 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	f200 80a6 	bhi.w	8003568 <HAL_TIM_ConfigClockSource+0x1c0>
 800341c:	4a5d      	ldr	r2, [pc, #372]	; (8003594 <HAL_TIM_ConfigClockSource+0x1ec>)
 800341e:	4293      	cmp	r3, r2
 8003420:	f000 8099 	beq.w	8003556 <HAL_TIM_ConfigClockSource+0x1ae>
 8003424:	4a5b      	ldr	r2, [pc, #364]	; (8003594 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003426:	4293      	cmp	r3, r2
 8003428:	f200 809e 	bhi.w	8003568 <HAL_TIM_ConfigClockSource+0x1c0>
 800342c:	4a5a      	ldr	r2, [pc, #360]	; (8003598 <HAL_TIM_ConfigClockSource+0x1f0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	f000 8091 	beq.w	8003556 <HAL_TIM_ConfigClockSource+0x1ae>
 8003434:	4a58      	ldr	r2, [pc, #352]	; (8003598 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	f200 8096 	bhi.w	8003568 <HAL_TIM_ConfigClockSource+0x1c0>
 800343c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003440:	f000 8089 	beq.w	8003556 <HAL_TIM_ConfigClockSource+0x1ae>
 8003444:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003448:	f200 808e 	bhi.w	8003568 <HAL_TIM_ConfigClockSource+0x1c0>
 800344c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003450:	d03e      	beq.n	80034d0 <HAL_TIM_ConfigClockSource+0x128>
 8003452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003456:	f200 8087 	bhi.w	8003568 <HAL_TIM_ConfigClockSource+0x1c0>
 800345a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345e:	f000 8086 	beq.w	800356e <HAL_TIM_ConfigClockSource+0x1c6>
 8003462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003466:	d87f      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x1c0>
 8003468:	2b70      	cmp	r3, #112	; 0x70
 800346a:	d01a      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0xfa>
 800346c:	2b70      	cmp	r3, #112	; 0x70
 800346e:	d87b      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x1c0>
 8003470:	2b60      	cmp	r3, #96	; 0x60
 8003472:	d050      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x16e>
 8003474:	2b60      	cmp	r3, #96	; 0x60
 8003476:	d877      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x1c0>
 8003478:	2b50      	cmp	r3, #80	; 0x50
 800347a:	d03c      	beq.n	80034f6 <HAL_TIM_ConfigClockSource+0x14e>
 800347c:	2b50      	cmp	r3, #80	; 0x50
 800347e:	d873      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x1c0>
 8003480:	2b40      	cmp	r3, #64	; 0x40
 8003482:	d058      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x18e>
 8003484:	2b40      	cmp	r3, #64	; 0x40
 8003486:	d86f      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x1c0>
 8003488:	2b30      	cmp	r3, #48	; 0x30
 800348a:	d064      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x1ae>
 800348c:	2b30      	cmp	r3, #48	; 0x30
 800348e:	d86b      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x1c0>
 8003490:	2b20      	cmp	r3, #32
 8003492:	d060      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x1ae>
 8003494:	2b20      	cmp	r3, #32
 8003496:	d867      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x1c0>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d05c      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x1ae>
 800349c:	2b10      	cmp	r3, #16
 800349e:	d05a      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x1ae>
 80034a0:	e062      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6899      	ldr	r1, [r3, #8]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f000 fed3 	bl	800425c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	609a      	str	r2, [r3, #8]
      break;
 80034ce:	e04f      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	6899      	ldr	r1, [r3, #8]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f000 febc 	bl	800425c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034f2:	609a      	str	r2, [r3, #8]
      break;
 80034f4:	e03c      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6859      	ldr	r1, [r3, #4]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	461a      	mov	r2, r3
 8003504:	f000 fe2e 	bl	8004164 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2150      	movs	r1, #80	; 0x50
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fe87 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003514:	e02c      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6859      	ldr	r1, [r3, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	461a      	mov	r2, r3
 8003524:	f000 fe4d 	bl	80041c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2160      	movs	r1, #96	; 0x60
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fe77 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003534:	e01c      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	6859      	ldr	r1, [r3, #4]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	461a      	mov	r2, r3
 8003544:	f000 fe0e 	bl	8004164 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2140      	movs	r1, #64	; 0x40
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fe67 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003554:	e00c      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f000 fe5e 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003566:	e003      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
      break;
 800356c:	e000      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800356e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	00100070 	.word	0x00100070
 8003590:	00100040 	.word	0x00100040
 8003594:	00100030 	.word	0x00100030
 8003598:	00100020 	.word	0x00100020

0800359c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e031      	b.n	8003618 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80035c4:	6839      	ldr	r1, [r7, #0]
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fca0 	bl	8003f0c <TIM_SlaveTimer_SetConfig>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d009      	beq.n	80035e6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e018      	b.n	8003618 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003604:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	429a      	cmp	r2, r3
 8003672:	d107      	bne.n	8003684 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2201      	movs	r2, #1
 8003678:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003682:	e02a      	b.n	80036da <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	429a      	cmp	r2, r3
 800368c:	d107      	bne.n	800369e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2202      	movs	r2, #2
 8003692:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800369c:	e01d      	b.n	80036da <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d107      	bne.n	80036b8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2204      	movs	r2, #4
 80036ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b6:	e010      	b.n	80036da <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d107      	bne.n	80036d2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2208      	movs	r2, #8
 80036c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036d0:	e003      	b.n	80036da <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7ff ffb4 	bl	8003648 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	771a      	strb	r2, [r3, #28]
}
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	429a      	cmp	r2, r3
 8003704:	d10b      	bne.n	800371e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d136      	bne.n	8003782 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800371c:	e031      	b.n	8003782 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	429a      	cmp	r2, r3
 8003726:	d10b      	bne.n	8003740 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2202      	movs	r2, #2
 800372c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d125      	bne.n	8003782 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800373e:	e020      	b.n	8003782 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	d10b      	bne.n	8003762 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2204      	movs	r2, #4
 800374e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d114      	bne.n	8003782 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003760:	e00f      	b.n	8003782 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	429a      	cmp	r2, r3
 800376a:	d10a      	bne.n	8003782 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2208      	movs	r2, #8
 8003770:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d103      	bne.n	8003782 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f7ff ff4c 	bl	8003620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	771a      	strb	r2, [r3, #28]
}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d103      	bne.n	80037b6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	771a      	strb	r2, [r3, #28]
 80037b4:	e019      	b.n	80037ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d103      	bne.n	80037c8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2202      	movs	r2, #2
 80037c4:	771a      	strb	r2, [r3, #28]
 80037c6:	e010      	b.n	80037ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d103      	bne.n	80037da <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2204      	movs	r2, #4
 80037d6:	771a      	strb	r2, [r3, #28]
 80037d8:	e007      	b.n	80037ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d102      	bne.n	80037ea <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2208      	movs	r2, #8
 80037e8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7ff ff22 	bl	8003634 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	771a      	strb	r2, [r3, #28]
}
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a3c      	ldr	r2, [pc, #240]	; (8003904 <TIM_Base_SetConfig+0x104>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00f      	beq.n	8003838 <TIM_Base_SetConfig+0x38>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381e:	d00b      	beq.n	8003838 <TIM_Base_SetConfig+0x38>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a39      	ldr	r2, [pc, #228]	; (8003908 <TIM_Base_SetConfig+0x108>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d007      	beq.n	8003838 <TIM_Base_SetConfig+0x38>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a38      	ldr	r2, [pc, #224]	; (800390c <TIM_Base_SetConfig+0x10c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d003      	beq.n	8003838 <TIM_Base_SetConfig+0x38>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a37      	ldr	r2, [pc, #220]	; (8003910 <TIM_Base_SetConfig+0x110>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d108      	bne.n	800384a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a2d      	ldr	r2, [pc, #180]	; (8003904 <TIM_Base_SetConfig+0x104>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d01b      	beq.n	800388a <TIM_Base_SetConfig+0x8a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003858:	d017      	beq.n	800388a <TIM_Base_SetConfig+0x8a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a2a      	ldr	r2, [pc, #168]	; (8003908 <TIM_Base_SetConfig+0x108>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d013      	beq.n	800388a <TIM_Base_SetConfig+0x8a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a29      	ldr	r2, [pc, #164]	; (800390c <TIM_Base_SetConfig+0x10c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00f      	beq.n	800388a <TIM_Base_SetConfig+0x8a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a28      	ldr	r2, [pc, #160]	; (8003910 <TIM_Base_SetConfig+0x110>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00b      	beq.n	800388a <TIM_Base_SetConfig+0x8a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a27      	ldr	r2, [pc, #156]	; (8003914 <TIM_Base_SetConfig+0x114>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d007      	beq.n	800388a <TIM_Base_SetConfig+0x8a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a26      	ldr	r2, [pc, #152]	; (8003918 <TIM_Base_SetConfig+0x118>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d003      	beq.n	800388a <TIM_Base_SetConfig+0x8a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a25      	ldr	r2, [pc, #148]	; (800391c <TIM_Base_SetConfig+0x11c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d108      	bne.n	800389c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a10      	ldr	r2, [pc, #64]	; (8003904 <TIM_Base_SetConfig+0x104>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00f      	beq.n	80038e8 <TIM_Base_SetConfig+0xe8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a11      	ldr	r2, [pc, #68]	; (8003910 <TIM_Base_SetConfig+0x110>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <TIM_Base_SetConfig+0xe8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a10      	ldr	r2, [pc, #64]	; (8003914 <TIM_Base_SetConfig+0x114>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <TIM_Base_SetConfig+0xe8>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a0f      	ldr	r2, [pc, #60]	; (8003918 <TIM_Base_SetConfig+0x118>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_Base_SetConfig+0xe8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a0e      	ldr	r2, [pc, #56]	; (800391c <TIM_Base_SetConfig+0x11c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d103      	bne.n	80038f0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	615a      	str	r2, [r3, #20]
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40012c00 	.word	0x40012c00
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800
 8003910:	40013400 	.word	0x40013400
 8003914:	40014000 	.word	0x40014000
 8003918:	40014400 	.word	0x40014400
 800391c:	40014800 	.word	0x40014800

08003920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	f023 0201 	bic.w	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0303 	bic.w	r3, r3, #3
 800395a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f023 0302 	bic.w	r3, r3, #2
 800396c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a2c      	ldr	r2, [pc, #176]	; (8003a2c <TIM_OC1_SetConfig+0x10c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00f      	beq.n	80039a0 <TIM_OC1_SetConfig+0x80>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a2b      	ldr	r2, [pc, #172]	; (8003a30 <TIM_OC1_SetConfig+0x110>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00b      	beq.n	80039a0 <TIM_OC1_SetConfig+0x80>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a2a      	ldr	r2, [pc, #168]	; (8003a34 <TIM_OC1_SetConfig+0x114>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d007      	beq.n	80039a0 <TIM_OC1_SetConfig+0x80>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a29      	ldr	r2, [pc, #164]	; (8003a38 <TIM_OC1_SetConfig+0x118>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_OC1_SetConfig+0x80>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a28      	ldr	r2, [pc, #160]	; (8003a3c <TIM_OC1_SetConfig+0x11c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d10c      	bne.n	80039ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f023 0308 	bic.w	r3, r3, #8
 80039a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 0304 	bic.w	r3, r3, #4
 80039b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a1b      	ldr	r2, [pc, #108]	; (8003a2c <TIM_OC1_SetConfig+0x10c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00f      	beq.n	80039e2 <TIM_OC1_SetConfig+0xc2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a1a      	ldr	r2, [pc, #104]	; (8003a30 <TIM_OC1_SetConfig+0x110>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00b      	beq.n	80039e2 <TIM_OC1_SetConfig+0xc2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a19      	ldr	r2, [pc, #100]	; (8003a34 <TIM_OC1_SetConfig+0x114>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d007      	beq.n	80039e2 <TIM_OC1_SetConfig+0xc2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <TIM_OC1_SetConfig+0x118>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d003      	beq.n	80039e2 <TIM_OC1_SetConfig+0xc2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <TIM_OC1_SetConfig+0x11c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d111      	bne.n	8003a06 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	621a      	str	r2, [r3, #32]
}
 8003a20:	bf00      	nop
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	40013400 	.word	0x40013400
 8003a34:	40014000 	.word	0x40014000
 8003a38:	40014400 	.word	0x40014400
 8003a3c:	40014800 	.word	0x40014800

08003a40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	f023 0210 	bic.w	r2, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f023 0320 	bic.w	r3, r3, #32
 8003a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a28      	ldr	r2, [pc, #160]	; (8003b40 <TIM_OC2_SetConfig+0x100>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d003      	beq.n	8003aac <TIM_OC2_SetConfig+0x6c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a27      	ldr	r2, [pc, #156]	; (8003b44 <TIM_OC2_SetConfig+0x104>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d10d      	bne.n	8003ac8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ac6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a1d      	ldr	r2, [pc, #116]	; (8003b40 <TIM_OC2_SetConfig+0x100>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00f      	beq.n	8003af0 <TIM_OC2_SetConfig+0xb0>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a1c      	ldr	r2, [pc, #112]	; (8003b44 <TIM_OC2_SetConfig+0x104>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00b      	beq.n	8003af0 <TIM_OC2_SetConfig+0xb0>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a1b      	ldr	r2, [pc, #108]	; (8003b48 <TIM_OC2_SetConfig+0x108>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d007      	beq.n	8003af0 <TIM_OC2_SetConfig+0xb0>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a1a      	ldr	r2, [pc, #104]	; (8003b4c <TIM_OC2_SetConfig+0x10c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_OC2_SetConfig+0xb0>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a19      	ldr	r2, [pc, #100]	; (8003b50 <TIM_OC2_SetConfig+0x110>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d113      	bne.n	8003b18 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	621a      	str	r2, [r3, #32]
}
 8003b32:	bf00      	nop
 8003b34:	371c      	adds	r7, #28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40013400 	.word	0x40013400
 8003b48:	40014000 	.word	0x40014000
 8003b4c:	40014400 	.word	0x40014400
 8003b50:	40014800 	.word	0x40014800

08003b54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0303 	bic.w	r3, r3, #3
 8003b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a27      	ldr	r2, [pc, #156]	; (8003c50 <TIM_OC3_SetConfig+0xfc>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d003      	beq.n	8003bbe <TIM_OC3_SetConfig+0x6a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <TIM_OC3_SetConfig+0x100>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d10d      	bne.n	8003bda <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a1c      	ldr	r2, [pc, #112]	; (8003c50 <TIM_OC3_SetConfig+0xfc>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00f      	beq.n	8003c02 <TIM_OC3_SetConfig+0xae>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a1b      	ldr	r2, [pc, #108]	; (8003c54 <TIM_OC3_SetConfig+0x100>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00b      	beq.n	8003c02 <TIM_OC3_SetConfig+0xae>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1a      	ldr	r2, [pc, #104]	; (8003c58 <TIM_OC3_SetConfig+0x104>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <TIM_OC3_SetConfig+0xae>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a19      	ldr	r2, [pc, #100]	; (8003c5c <TIM_OC3_SetConfig+0x108>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_OC3_SetConfig+0xae>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a18      	ldr	r2, [pc, #96]	; (8003c60 <TIM_OC3_SetConfig+0x10c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d113      	bne.n	8003c2a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	621a      	str	r2, [r3, #32]
}
 8003c44:	bf00      	nop
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	40012c00 	.word	0x40012c00
 8003c54:	40013400 	.word	0x40013400
 8003c58:	40014000 	.word	0x40014000
 8003c5c:	40014400 	.word	0x40014400
 8003c60:	40014800 	.word	0x40014800

08003c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	031b      	lsls	r3, r3, #12
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a28      	ldr	r2, [pc, #160]	; (8003d64 <TIM_OC4_SetConfig+0x100>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_OC4_SetConfig+0x6c>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a27      	ldr	r2, [pc, #156]	; (8003d68 <TIM_OC4_SetConfig+0x104>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d10d      	bne.n	8003cec <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	031b      	lsls	r3, r3, #12
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <TIM_OC4_SetConfig+0x100>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00f      	beq.n	8003d14 <TIM_OC4_SetConfig+0xb0>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a1c      	ldr	r2, [pc, #112]	; (8003d68 <TIM_OC4_SetConfig+0x104>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00b      	beq.n	8003d14 <TIM_OC4_SetConfig+0xb0>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a1b      	ldr	r2, [pc, #108]	; (8003d6c <TIM_OC4_SetConfig+0x108>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d007      	beq.n	8003d14 <TIM_OC4_SetConfig+0xb0>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a1a      	ldr	r2, [pc, #104]	; (8003d70 <TIM_OC4_SetConfig+0x10c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d003      	beq.n	8003d14 <TIM_OC4_SetConfig+0xb0>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a19      	ldr	r2, [pc, #100]	; (8003d74 <TIM_OC4_SetConfig+0x110>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d113      	bne.n	8003d3c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d1a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d22:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	019b      	lsls	r3, r3, #6
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	019b      	lsls	r3, r3, #6
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	621a      	str	r2, [r3, #32]
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40013400 	.word	0x40013400
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	40014400 	.word	0x40014400
 8003d74:	40014800 	.word	0x40014800

08003d78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003dbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a17      	ldr	r2, [pc, #92]	; (8003e2c <TIM_OC5_SetConfig+0xb4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00f      	beq.n	8003df2 <TIM_OC5_SetConfig+0x7a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a16      	ldr	r2, [pc, #88]	; (8003e30 <TIM_OC5_SetConfig+0xb8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00b      	beq.n	8003df2 <TIM_OC5_SetConfig+0x7a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a15      	ldr	r2, [pc, #84]	; (8003e34 <TIM_OC5_SetConfig+0xbc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d007      	beq.n	8003df2 <TIM_OC5_SetConfig+0x7a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <TIM_OC5_SetConfig+0xc0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d003      	beq.n	8003df2 <TIM_OC5_SetConfig+0x7a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a13      	ldr	r2, [pc, #76]	; (8003e3c <TIM_OC5_SetConfig+0xc4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d109      	bne.n	8003e06 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	621a      	str	r2, [r3, #32]
}
 8003e20:	bf00      	nop
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40012c00 	.word	0x40012c00
 8003e30:	40013400 	.word	0x40013400
 8003e34:	40014000 	.word	0x40014000
 8003e38:	40014400 	.word	0x40014400
 8003e3c:	40014800 	.word	0x40014800

08003e40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	051b      	lsls	r3, r3, #20
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <TIM_OC6_SetConfig+0xb8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00f      	beq.n	8003ebc <TIM_OC6_SetConfig+0x7c>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a17      	ldr	r2, [pc, #92]	; (8003efc <TIM_OC6_SetConfig+0xbc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00b      	beq.n	8003ebc <TIM_OC6_SetConfig+0x7c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a16      	ldr	r2, [pc, #88]	; (8003f00 <TIM_OC6_SetConfig+0xc0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d007      	beq.n	8003ebc <TIM_OC6_SetConfig+0x7c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a15      	ldr	r2, [pc, #84]	; (8003f04 <TIM_OC6_SetConfig+0xc4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <TIM_OC6_SetConfig+0x7c>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a14      	ldr	r2, [pc, #80]	; (8003f08 <TIM_OC6_SetConfig+0xc8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d109      	bne.n	8003ed0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	029b      	lsls	r3, r3, #10
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	621a      	str	r2, [r3, #32]
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40012c00 	.word	0x40012c00
 8003efc:	40013400 	.word	0x40013400
 8003f00:	40014000 	.word	0x40014000
 8003f04:	40014400 	.word	0x40014400
 8003f08:	40014800 	.word	0x40014800

08003f0c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3e:	f023 0307 	bic.w	r3, r3, #7
 8003f42:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4a4a      	ldr	r2, [pc, #296]	; (8004084 <TIM_SlaveTimer_SetConfig+0x178>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	f000 808a 	beq.w	8004076 <TIM_SlaveTimer_SetConfig+0x16a>
 8003f62:	4a48      	ldr	r2, [pc, #288]	; (8004084 <TIM_SlaveTimer_SetConfig+0x178>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	f200 8083 	bhi.w	8004070 <TIM_SlaveTimer_SetConfig+0x164>
 8003f6a:	4a47      	ldr	r2, [pc, #284]	; (8004088 <TIM_SlaveTimer_SetConfig+0x17c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	f000 8082 	beq.w	8004076 <TIM_SlaveTimer_SetConfig+0x16a>
 8003f72:	4a45      	ldr	r2, [pc, #276]	; (8004088 <TIM_SlaveTimer_SetConfig+0x17c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d87b      	bhi.n	8004070 <TIM_SlaveTimer_SetConfig+0x164>
 8003f78:	4a44      	ldr	r2, [pc, #272]	; (800408c <TIM_SlaveTimer_SetConfig+0x180>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d07b      	beq.n	8004076 <TIM_SlaveTimer_SetConfig+0x16a>
 8003f7e:	4a43      	ldr	r2, [pc, #268]	; (800408c <TIM_SlaveTimer_SetConfig+0x180>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d875      	bhi.n	8004070 <TIM_SlaveTimer_SetConfig+0x164>
 8003f84:	4a42      	ldr	r2, [pc, #264]	; (8004090 <TIM_SlaveTimer_SetConfig+0x184>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d075      	beq.n	8004076 <TIM_SlaveTimer_SetConfig+0x16a>
 8003f8a:	4a41      	ldr	r2, [pc, #260]	; (8004090 <TIM_SlaveTimer_SetConfig+0x184>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d86f      	bhi.n	8004070 <TIM_SlaveTimer_SetConfig+0x164>
 8003f90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003f94:	d06f      	beq.n	8004076 <TIM_SlaveTimer_SetConfig+0x16a>
 8003f96:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003f9a:	d869      	bhi.n	8004070 <TIM_SlaveTimer_SetConfig+0x164>
 8003f9c:	2b70      	cmp	r3, #112	; 0x70
 8003f9e:	d01a      	beq.n	8003fd6 <TIM_SlaveTimer_SetConfig+0xca>
 8003fa0:	2b70      	cmp	r3, #112	; 0x70
 8003fa2:	d865      	bhi.n	8004070 <TIM_SlaveTimer_SetConfig+0x164>
 8003fa4:	2b60      	cmp	r3, #96	; 0x60
 8003fa6:	d059      	beq.n	800405c <TIM_SlaveTimer_SetConfig+0x150>
 8003fa8:	2b60      	cmp	r3, #96	; 0x60
 8003faa:	d861      	bhi.n	8004070 <TIM_SlaveTimer_SetConfig+0x164>
 8003fac:	2b50      	cmp	r3, #80	; 0x50
 8003fae:	d04b      	beq.n	8004048 <TIM_SlaveTimer_SetConfig+0x13c>
 8003fb0:	2b50      	cmp	r3, #80	; 0x50
 8003fb2:	d85d      	bhi.n	8004070 <TIM_SlaveTimer_SetConfig+0x164>
 8003fb4:	2b40      	cmp	r3, #64	; 0x40
 8003fb6:	d019      	beq.n	8003fec <TIM_SlaveTimer_SetConfig+0xe0>
 8003fb8:	2b40      	cmp	r3, #64	; 0x40
 8003fba:	d859      	bhi.n	8004070 <TIM_SlaveTimer_SetConfig+0x164>
 8003fbc:	2b30      	cmp	r3, #48	; 0x30
 8003fbe:	d05a      	beq.n	8004076 <TIM_SlaveTimer_SetConfig+0x16a>
 8003fc0:	2b30      	cmp	r3, #48	; 0x30
 8003fc2:	d855      	bhi.n	8004070 <TIM_SlaveTimer_SetConfig+0x164>
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d056      	beq.n	8004076 <TIM_SlaveTimer_SetConfig+0x16a>
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d851      	bhi.n	8004070 <TIM_SlaveTimer_SetConfig+0x164>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d052      	beq.n	8004076 <TIM_SlaveTimer_SetConfig+0x16a>
 8003fd0:	2b10      	cmp	r3, #16
 8003fd2:	d050      	beq.n	8004076 <TIM_SlaveTimer_SetConfig+0x16a>
 8003fd4:	e04c      	b.n	8004070 <TIM_SlaveTimer_SetConfig+0x164>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68d9      	ldr	r1, [r3, #12]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f000 f939 	bl	800425c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003fea:	e045      	b.n	8004078 <TIM_SlaveTimer_SetConfig+0x16c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b05      	cmp	r3, #5
 8003ff2:	d004      	beq.n	8003ffe <TIM_SlaveTimer_SetConfig+0xf2>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8003ff8:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003ffc:	d101      	bne.n	8004002 <TIM_SlaveTimer_SetConfig+0xf6>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e03b      	b.n	800407a <TIM_SlaveTimer_SetConfig+0x16e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6a1a      	ldr	r2, [r3, #32]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004028:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	4313      	orrs	r3, r2
 8004034:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	621a      	str	r2, [r3, #32]
      break;
 8004046:	e017      	b.n	8004078 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	6899      	ldr	r1, [r3, #8]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	461a      	mov	r2, r3
 8004056:	f000 f885 	bl	8004164 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800405a:	e00d      	b.n	8004078 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	6899      	ldr	r1, [r3, #8]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	461a      	mov	r2, r3
 800406a:	f000 f8aa 	bl	80041c2 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800406e:	e003      	b.n	8004078 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	75fb      	strb	r3, [r7, #23]
      break;
 8004074:	e000      	b.n	8004078 <TIM_SlaveTimer_SetConfig+0x16c>
      break;
 8004076:	bf00      	nop
  }

  return status;
 8004078:	7dfb      	ldrb	r3, [r7, #23]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	00100070 	.word	0x00100070
 8004088:	00100040 	.word	0x00100040
 800408c:	00100030 	.word	0x00100030
 8004090:	00100020 	.word	0x00100020

08004094 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	f023 0201 	bic.w	r2, r3, #1
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4a24      	ldr	r2, [pc, #144]	; (8004150 <TIM_TI1_SetConfig+0xbc>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d013      	beq.n	80040ea <TIM_TI1_SetConfig+0x56>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c8:	d00f      	beq.n	80040ea <TIM_TI1_SetConfig+0x56>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4a21      	ldr	r2, [pc, #132]	; (8004154 <TIM_TI1_SetConfig+0xc0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00b      	beq.n	80040ea <TIM_TI1_SetConfig+0x56>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4a20      	ldr	r2, [pc, #128]	; (8004158 <TIM_TI1_SetConfig+0xc4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d007      	beq.n	80040ea <TIM_TI1_SetConfig+0x56>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4a1f      	ldr	r2, [pc, #124]	; (800415c <TIM_TI1_SetConfig+0xc8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d003      	beq.n	80040ea <TIM_TI1_SetConfig+0x56>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4a1e      	ldr	r2, [pc, #120]	; (8004160 <TIM_TI1_SetConfig+0xcc>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d101      	bne.n	80040ee <TIM_TI1_SetConfig+0x5a>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <TIM_TI1_SetConfig+0x5c>
 80040ee:	2300      	movs	r3, #0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f023 0303 	bic.w	r3, r3, #3
 80040fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	e003      	b.n	800410e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004114:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	b2db      	uxtb	r3, r3
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f023 030a 	bic.w	r3, r3, #10
 8004128:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f003 030a 	and.w	r3, r3, #10
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800
 800415c:	40013400 	.word	0x40013400
 8004160:	40014000 	.word	0x40014000

08004164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f023 0201 	bic.w	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800418e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f023 030a 	bic.w	r3, r3, #10
 80041a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	621a      	str	r2, [r3, #32]
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b087      	sub	sp, #28
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f023 0210 	bic.w	r2, r3, #16
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	031b      	lsls	r3, r3, #12
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	621a      	str	r2, [r3, #32]
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004222:	b480      	push	{r7}
 8004224:	b085      	sub	sp, #20
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	f043 0307 	orr.w	r3, r3, #7
 8004248:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	609a      	str	r2, [r3, #8]
}
 8004250:	bf00      	nop
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004276:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	021a      	lsls	r2, r3, #8
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	431a      	orrs	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4313      	orrs	r3, r2
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	609a      	str	r2, [r3, #8]
}
 8004290:	bf00      	nop
 8004292:	371c      	adds	r7, #28
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	2201      	movs	r2, #1
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a1a      	ldr	r2, [r3, #32]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	43db      	mvns	r3, r3
 80042be:	401a      	ands	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a1a      	ldr	r2, [r3, #32]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f003 031f 	and.w	r3, r3, #31
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	fa01 f303 	lsl.w	r3, r1, r3
 80042d4:	431a      	orrs	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	621a      	str	r2, [r3, #32]
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b08a      	sub	sp, #40	; 0x28
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e0a0      	b.n	800443c <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f898 	bl	8004444 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f7ff fa6a 	bl	8003800 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6818      	ldr	r0, [r3, #0]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	6819      	ldr	r1, [r3, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2203      	movs	r2, #3
 800433a:	f7ff feab 	bl	8004094 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699a      	ldr	r2, [r3, #24]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 020c 	bic.w	r2, r2, #12
 800434c:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6999      	ldr	r1, [r3, #24]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800436e:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800437e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004382:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004392:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a2:	f023 0307 	bic.w	r3, r3, #7
 80043a6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0204 	orr.w	r2, r2, #4
 80043b6:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043bc:	2300      	movs	r3, #0
 80043be:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80043c0:	2370      	movs	r3, #112	; 0x70
 80043c2:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043c4:	2300      	movs	r3, #0
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f107 020c 	add.w	r2, r7, #12
 80043de:	4611      	mov	r1, r2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fb2d 	bl	8003a40 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80043f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f8:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8004408:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3728      	adds	r7, #40	; 0x28
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800446c:	2302      	movs	r3, #2
 800446e:	e065      	b.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a2c      	ldr	r2, [pc, #176]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d004      	beq.n	80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a2b      	ldr	r2, [pc, #172]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d108      	bne.n	80044b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80044aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80044bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1b      	ldr	r2, [pc, #108]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d018      	beq.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e6:	d013      	beq.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a18      	ldr	r2, [pc, #96]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00e      	beq.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a17      	ldr	r2, [pc, #92]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d009      	beq.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a12      	ldr	r2, [pc, #72]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d004      	beq.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a13      	ldr	r2, [pc, #76]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d10c      	bne.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004516:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	4313      	orrs	r3, r2
 8004520:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40013400 	.word	0x40013400
 8004550:	40000400 	.word	0x40000400
 8004554:	40000800 	.word	0x40000800
 8004558:	40014000 	.word	0x40014000

0800455c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004574:	2302      	movs	r3, #2
 8004576:	e087      	b.n	8004688 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	041b      	lsls	r3, r3, #16
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a27      	ldr	r2, [pc, #156]	; (8004694 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d004      	beq.n	8004606 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a25      	ldr	r2, [pc, #148]	; (8004698 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d106      	bne.n	8004614 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1e      	ldr	r2, [pc, #120]	; (8004694 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a1d      	ldr	r2, [pc, #116]	; (8004698 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d126      	bne.n	8004676 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	051b      	lsls	r3, r3, #20
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a0e      	ldr	r2, [pc, #56]	; (8004694 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d004      	beq.n	8004668 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a0d      	ldr	r2, [pc, #52]	; (8004698 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d106      	bne.n	8004676 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	40012c00 	.word	0x40012c00
 8004698:	40013400 	.word	0x40013400

0800469c <HAL_TIMEx_RemapConfig>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  __HAL_LOCK(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_TIMEx_RemapConfig+0x18>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e012      	b.n	80046da <HAL_TIMEx_RemapConfig+0x3e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  MODIFY_REG(htim->Instance->AF1, TIM1_AF1_ETRSEL_Msk, Remap);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c2:	f423 3170 	bic.w	r1, r3, #245760	; 0x3c000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e042      	b.n	800477e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d106      	bne.n	8004710 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fc fbc0 	bl	8000e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2224      	movs	r2, #36	; 0x24
 8004714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0201 	bic.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f82d 	bl	8004788 <UART_SetConfig>
 800472e:	4603      	mov	r3, r0
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e022      	b.n	800477e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 faed 	bl	8004d20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004754:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004764:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fb74 	bl	8004e64 <UART_CheckIdleState>
 800477c:	4603      	mov	r3, r0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800478c:	b08c      	sub	sp, #48	; 0x30
 800478e:	af00      	add	r7, sp, #0
 8004790:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	431a      	orrs	r2, r3
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	4bab      	ldr	r3, [pc, #684]	; (8004a64 <UART_SetConfig+0x2dc>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047c0:	430b      	orrs	r3, r1
 80047c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4aa0      	ldr	r2, [pc, #640]	; (8004a68 <UART_SetConfig+0x2e0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d004      	beq.n	80047f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047f0:	4313      	orrs	r3, r2
 80047f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80047fe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004808:	430b      	orrs	r3, r1
 800480a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	f023 010f 	bic.w	r1, r3, #15
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a91      	ldr	r2, [pc, #580]	; (8004a6c <UART_SetConfig+0x2e4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d125      	bne.n	8004878 <UART_SetConfig+0xf0>
 800482c:	4b90      	ldr	r3, [pc, #576]	; (8004a70 <UART_SetConfig+0x2e8>)
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b03      	cmp	r3, #3
 8004838:	d81a      	bhi.n	8004870 <UART_SetConfig+0xe8>
 800483a:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <UART_SetConfig+0xb8>)
 800483c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004840:	08004851 	.word	0x08004851
 8004844:	08004861 	.word	0x08004861
 8004848:	08004859 	.word	0x08004859
 800484c:	08004869 	.word	0x08004869
 8004850:	2301      	movs	r3, #1
 8004852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004856:	e0d6      	b.n	8004a06 <UART_SetConfig+0x27e>
 8004858:	2302      	movs	r3, #2
 800485a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800485e:	e0d2      	b.n	8004a06 <UART_SetConfig+0x27e>
 8004860:	2304      	movs	r3, #4
 8004862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004866:	e0ce      	b.n	8004a06 <UART_SetConfig+0x27e>
 8004868:	2308      	movs	r3, #8
 800486a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800486e:	e0ca      	b.n	8004a06 <UART_SetConfig+0x27e>
 8004870:	2310      	movs	r3, #16
 8004872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004876:	e0c6      	b.n	8004a06 <UART_SetConfig+0x27e>
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a7d      	ldr	r2, [pc, #500]	; (8004a74 <UART_SetConfig+0x2ec>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d138      	bne.n	80048f4 <UART_SetConfig+0x16c>
 8004882:	4b7b      	ldr	r3, [pc, #492]	; (8004a70 <UART_SetConfig+0x2e8>)
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004888:	f003 030c 	and.w	r3, r3, #12
 800488c:	2b0c      	cmp	r3, #12
 800488e:	d82d      	bhi.n	80048ec <UART_SetConfig+0x164>
 8004890:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <UART_SetConfig+0x110>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	080048cd 	.word	0x080048cd
 800489c:	080048ed 	.word	0x080048ed
 80048a0:	080048ed 	.word	0x080048ed
 80048a4:	080048ed 	.word	0x080048ed
 80048a8:	080048dd 	.word	0x080048dd
 80048ac:	080048ed 	.word	0x080048ed
 80048b0:	080048ed 	.word	0x080048ed
 80048b4:	080048ed 	.word	0x080048ed
 80048b8:	080048d5 	.word	0x080048d5
 80048bc:	080048ed 	.word	0x080048ed
 80048c0:	080048ed 	.word	0x080048ed
 80048c4:	080048ed 	.word	0x080048ed
 80048c8:	080048e5 	.word	0x080048e5
 80048cc:	2300      	movs	r3, #0
 80048ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048d2:	e098      	b.n	8004a06 <UART_SetConfig+0x27e>
 80048d4:	2302      	movs	r3, #2
 80048d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048da:	e094      	b.n	8004a06 <UART_SetConfig+0x27e>
 80048dc:	2304      	movs	r3, #4
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048e2:	e090      	b.n	8004a06 <UART_SetConfig+0x27e>
 80048e4:	2308      	movs	r3, #8
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ea:	e08c      	b.n	8004a06 <UART_SetConfig+0x27e>
 80048ec:	2310      	movs	r3, #16
 80048ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f2:	e088      	b.n	8004a06 <UART_SetConfig+0x27e>
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a5f      	ldr	r2, [pc, #380]	; (8004a78 <UART_SetConfig+0x2f0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d125      	bne.n	800494a <UART_SetConfig+0x1c2>
 80048fe:	4b5c      	ldr	r3, [pc, #368]	; (8004a70 <UART_SetConfig+0x2e8>)
 8004900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004904:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004908:	2b30      	cmp	r3, #48	; 0x30
 800490a:	d016      	beq.n	800493a <UART_SetConfig+0x1b2>
 800490c:	2b30      	cmp	r3, #48	; 0x30
 800490e:	d818      	bhi.n	8004942 <UART_SetConfig+0x1ba>
 8004910:	2b20      	cmp	r3, #32
 8004912:	d00a      	beq.n	800492a <UART_SetConfig+0x1a2>
 8004914:	2b20      	cmp	r3, #32
 8004916:	d814      	bhi.n	8004942 <UART_SetConfig+0x1ba>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <UART_SetConfig+0x19a>
 800491c:	2b10      	cmp	r3, #16
 800491e:	d008      	beq.n	8004932 <UART_SetConfig+0x1aa>
 8004920:	e00f      	b.n	8004942 <UART_SetConfig+0x1ba>
 8004922:	2300      	movs	r3, #0
 8004924:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004928:	e06d      	b.n	8004a06 <UART_SetConfig+0x27e>
 800492a:	2302      	movs	r3, #2
 800492c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004930:	e069      	b.n	8004a06 <UART_SetConfig+0x27e>
 8004932:	2304      	movs	r3, #4
 8004934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004938:	e065      	b.n	8004a06 <UART_SetConfig+0x27e>
 800493a:	2308      	movs	r3, #8
 800493c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004940:	e061      	b.n	8004a06 <UART_SetConfig+0x27e>
 8004942:	2310      	movs	r3, #16
 8004944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004948:	e05d      	b.n	8004a06 <UART_SetConfig+0x27e>
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a4b      	ldr	r2, [pc, #300]	; (8004a7c <UART_SetConfig+0x2f4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d125      	bne.n	80049a0 <UART_SetConfig+0x218>
 8004954:	4b46      	ldr	r3, [pc, #280]	; (8004a70 <UART_SetConfig+0x2e8>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800495e:	2bc0      	cmp	r3, #192	; 0xc0
 8004960:	d016      	beq.n	8004990 <UART_SetConfig+0x208>
 8004962:	2bc0      	cmp	r3, #192	; 0xc0
 8004964:	d818      	bhi.n	8004998 <UART_SetConfig+0x210>
 8004966:	2b80      	cmp	r3, #128	; 0x80
 8004968:	d00a      	beq.n	8004980 <UART_SetConfig+0x1f8>
 800496a:	2b80      	cmp	r3, #128	; 0x80
 800496c:	d814      	bhi.n	8004998 <UART_SetConfig+0x210>
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <UART_SetConfig+0x1f0>
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d008      	beq.n	8004988 <UART_SetConfig+0x200>
 8004976:	e00f      	b.n	8004998 <UART_SetConfig+0x210>
 8004978:	2300      	movs	r3, #0
 800497a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800497e:	e042      	b.n	8004a06 <UART_SetConfig+0x27e>
 8004980:	2302      	movs	r3, #2
 8004982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004986:	e03e      	b.n	8004a06 <UART_SetConfig+0x27e>
 8004988:	2304      	movs	r3, #4
 800498a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800498e:	e03a      	b.n	8004a06 <UART_SetConfig+0x27e>
 8004990:	2308      	movs	r3, #8
 8004992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004996:	e036      	b.n	8004a06 <UART_SetConfig+0x27e>
 8004998:	2310      	movs	r3, #16
 800499a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800499e:	e032      	b.n	8004a06 <UART_SetConfig+0x27e>
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a30      	ldr	r2, [pc, #192]	; (8004a68 <UART_SetConfig+0x2e0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d12a      	bne.n	8004a00 <UART_SetConfig+0x278>
 80049aa:	4b31      	ldr	r3, [pc, #196]	; (8004a70 <UART_SetConfig+0x2e8>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049b8:	d01a      	beq.n	80049f0 <UART_SetConfig+0x268>
 80049ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049be:	d81b      	bhi.n	80049f8 <UART_SetConfig+0x270>
 80049c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c4:	d00c      	beq.n	80049e0 <UART_SetConfig+0x258>
 80049c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ca:	d815      	bhi.n	80049f8 <UART_SetConfig+0x270>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <UART_SetConfig+0x250>
 80049d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d4:	d008      	beq.n	80049e8 <UART_SetConfig+0x260>
 80049d6:	e00f      	b.n	80049f8 <UART_SetConfig+0x270>
 80049d8:	2300      	movs	r3, #0
 80049da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049de:	e012      	b.n	8004a06 <UART_SetConfig+0x27e>
 80049e0:	2302      	movs	r3, #2
 80049e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049e6:	e00e      	b.n	8004a06 <UART_SetConfig+0x27e>
 80049e8:	2304      	movs	r3, #4
 80049ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ee:	e00a      	b.n	8004a06 <UART_SetConfig+0x27e>
 80049f0:	2308      	movs	r3, #8
 80049f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049f6:	e006      	b.n	8004a06 <UART_SetConfig+0x27e>
 80049f8:	2310      	movs	r3, #16
 80049fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049fe:	e002      	b.n	8004a06 <UART_SetConfig+0x27e>
 8004a00:	2310      	movs	r3, #16
 8004a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a17      	ldr	r2, [pc, #92]	; (8004a68 <UART_SetConfig+0x2e0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	f040 80a8 	bne.w	8004b62 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d834      	bhi.n	8004a84 <UART_SetConfig+0x2fc>
 8004a1a:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <UART_SetConfig+0x298>)
 8004a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a20:	08004a45 	.word	0x08004a45
 8004a24:	08004a85 	.word	0x08004a85
 8004a28:	08004a4d 	.word	0x08004a4d
 8004a2c:	08004a85 	.word	0x08004a85
 8004a30:	08004a53 	.word	0x08004a53
 8004a34:	08004a85 	.word	0x08004a85
 8004a38:	08004a85 	.word	0x08004a85
 8004a3c:	08004a85 	.word	0x08004a85
 8004a40:	08004a5b 	.word	0x08004a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a44:	f7fd fe6a 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8004a48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a4a:	e021      	b.n	8004a90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <UART_SetConfig+0x2f8>)
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a50:	e01e      	b.n	8004a90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a52:	f7fd fdf5 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8004a56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a58:	e01a      	b.n	8004a90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a60:	e016      	b.n	8004a90 <UART_SetConfig+0x308>
 8004a62:	bf00      	nop
 8004a64:	cfff69f3 	.word	0xcfff69f3
 8004a68:	40008000 	.word	0x40008000
 8004a6c:	40013800 	.word	0x40013800
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40004400 	.word	0x40004400
 8004a78:	40004800 	.word	0x40004800
 8004a7c:	40004c00 	.word	0x40004c00
 8004a80:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 812a 	beq.w	8004cec <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	4a9e      	ldr	r2, [pc, #632]	; (8004d18 <UART_SetConfig+0x590>)
 8004a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	4413      	add	r3, r2
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d305      	bcc.n	8004ac8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d903      	bls.n	8004ad0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ace:	e10d      	b.n	8004cec <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	60fa      	str	r2, [r7, #12]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	4a8e      	ldr	r2, [pc, #568]	; (8004d18 <UART_SetConfig+0x590>)
 8004ade:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004af2:	f7fb fb91 	bl	8000218 <__aeabi_uldivmod>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4610      	mov	r0, r2
 8004afc:	4619      	mov	r1, r3
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	020b      	lsls	r3, r1, #8
 8004b08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b0c:	0202      	lsls	r2, r0, #8
 8004b0e:	6979      	ldr	r1, [r7, #20]
 8004b10:	6849      	ldr	r1, [r1, #4]
 8004b12:	0849      	lsrs	r1, r1, #1
 8004b14:	2000      	movs	r0, #0
 8004b16:	460c      	mov	r4, r1
 8004b18:	4605      	mov	r5, r0
 8004b1a:	eb12 0804 	adds.w	r8, r2, r4
 8004b1e:	eb43 0905 	adc.w	r9, r3, r5
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	469a      	mov	sl, r3
 8004b2a:	4693      	mov	fp, r2
 8004b2c:	4652      	mov	r2, sl
 8004b2e:	465b      	mov	r3, fp
 8004b30:	4640      	mov	r0, r8
 8004b32:	4649      	mov	r1, r9
 8004b34:	f7fb fb70 	bl	8000218 <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b46:	d308      	bcc.n	8004b5a <UART_SetConfig+0x3d2>
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b4e:	d204      	bcs.n	8004b5a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6a3a      	ldr	r2, [r7, #32]
 8004b56:	60da      	str	r2, [r3, #12]
 8004b58:	e0c8      	b.n	8004cec <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b60:	e0c4      	b.n	8004cec <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b6a:	d167      	bne.n	8004c3c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004b6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d828      	bhi.n	8004bc6 <UART_SetConfig+0x43e>
 8004b74:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <UART_SetConfig+0x3f4>)
 8004b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7a:	bf00      	nop
 8004b7c:	08004ba1 	.word	0x08004ba1
 8004b80:	08004ba9 	.word	0x08004ba9
 8004b84:	08004bb1 	.word	0x08004bb1
 8004b88:	08004bc7 	.word	0x08004bc7
 8004b8c:	08004bb7 	.word	0x08004bb7
 8004b90:	08004bc7 	.word	0x08004bc7
 8004b94:	08004bc7 	.word	0x08004bc7
 8004b98:	08004bc7 	.word	0x08004bc7
 8004b9c:	08004bbf 	.word	0x08004bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba0:	f7fd fdbc 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8004ba4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ba6:	e014      	b.n	8004bd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ba8:	f7fd fdce 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 8004bac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bae:	e010      	b.n	8004bd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb0:	4b5a      	ldr	r3, [pc, #360]	; (8004d1c <UART_SetConfig+0x594>)
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bb4:	e00d      	b.n	8004bd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb6:	f7fd fd43 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8004bba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bbc:	e009      	b.n	8004bd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bc4:	e005      	b.n	8004bd2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8089 	beq.w	8004cec <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	4a4e      	ldr	r2, [pc, #312]	; (8004d18 <UART_SetConfig+0x590>)
 8004be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004be4:	461a      	mov	r2, r3
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bec:	005a      	lsls	r2, r3, #1
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	085b      	lsrs	r3, r3, #1
 8004bf4:	441a      	add	r2, r3
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	2b0f      	cmp	r3, #15
 8004c04:	d916      	bls.n	8004c34 <UART_SetConfig+0x4ac>
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0c:	d212      	bcs.n	8004c34 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f023 030f 	bic.w	r3, r3, #15
 8004c16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	085b      	lsrs	r3, r3, #1
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	8bfb      	ldrh	r3, [r7, #30]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	8bfa      	ldrh	r2, [r7, #30]
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	e05b      	b.n	8004cec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c3a:	e057      	b.n	8004cec <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d828      	bhi.n	8004c96 <UART_SetConfig+0x50e>
 8004c44:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <UART_SetConfig+0x4c4>)
 8004c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4a:	bf00      	nop
 8004c4c:	08004c71 	.word	0x08004c71
 8004c50:	08004c79 	.word	0x08004c79
 8004c54:	08004c81 	.word	0x08004c81
 8004c58:	08004c97 	.word	0x08004c97
 8004c5c:	08004c87 	.word	0x08004c87
 8004c60:	08004c97 	.word	0x08004c97
 8004c64:	08004c97 	.word	0x08004c97
 8004c68:	08004c97 	.word	0x08004c97
 8004c6c:	08004c8f 	.word	0x08004c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c70:	f7fd fd54 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8004c74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c76:	e014      	b.n	8004ca2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c78:	f7fd fd66 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 8004c7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c7e:	e010      	b.n	8004ca2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c80:	4b26      	ldr	r3, [pc, #152]	; (8004d1c <UART_SetConfig+0x594>)
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c84:	e00d      	b.n	8004ca2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c86:	f7fd fcdb 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8004c8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c8c:	e009      	b.n	8004ca2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c94:	e005      	b.n	8004ca2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ca0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d021      	beq.n	8004cec <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	4a1a      	ldr	r2, [pc, #104]	; (8004d18 <UART_SetConfig+0x590>)
 8004cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	085b      	lsrs	r3, r3, #1
 8004cc0:	441a      	add	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	2b0f      	cmp	r3, #15
 8004cd0:	d909      	bls.n	8004ce6 <UART_SetConfig+0x55e>
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd8:	d205      	bcs.n	8004ce6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	60da      	str	r2, [r3, #12]
 8004ce4:	e002      	b.n	8004cec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2200      	movs	r2, #0
 8004d06:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004d08:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3730      	adds	r7, #48	; 0x30
 8004d10:	46bd      	mov	sp, r7
 8004d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d16:	bf00      	nop
 8004d18:	08005318 	.word	0x08005318
 8004d1c:	00f42400 	.word	0x00f42400

08004d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01a      	beq.n	8004e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e1e:	d10a      	bne.n	8004e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	605a      	str	r2, [r3, #4]
  }
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e74:	f7fc f950 	bl	8001118 <HAL_GetTick>
 8004e78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d10e      	bne.n	8004ea6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f82f 	bl	8004efa <UART_WaitOnFlagUntilTimeout>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e025      	b.n	8004ef2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d10e      	bne.n	8004ed2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f819 	bl	8004efa <UART_WaitOnFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e00f      	b.n	8004ef2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b09c      	sub	sp, #112	; 0x70
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	4613      	mov	r3, r2
 8004f08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f0a:	e0a9      	b.n	8005060 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f12:	f000 80a5 	beq.w	8005060 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f16:	f7fc f8ff 	bl	8001118 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d302      	bcc.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x32>
 8004f26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d140      	bne.n	8004fae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f40:	667b      	str	r3, [r7, #100]	; 0x64
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f4c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e6      	bne.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3308      	adds	r3, #8
 8004f64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	f023 0301 	bic.w	r3, r3, #1
 8004f74:	663b      	str	r3, [r7, #96]	; 0x60
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1e5      	bne.n	8004f5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e069      	b.n	8005082 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d051      	beq.n	8005060 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fca:	d149      	bne.n	8005060 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fd4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	e853 3f00 	ldrex	r3, [r3]
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e6      	bne.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3308      	adds	r3, #8
 800500e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	613b      	str	r3, [r7, #16]
   return(result);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f023 0301 	bic.w	r3, r3, #1
 800501e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3308      	adds	r3, #8
 8005026:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005028:	623a      	str	r2, [r7, #32]
 800502a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	69f9      	ldr	r1, [r7, #28]
 800502e:	6a3a      	ldr	r2, [r7, #32]
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	61bb      	str	r3, [r7, #24]
   return(result);
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e5      	bne.n	8005008 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2220      	movs	r2, #32
 8005050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e010      	b.n	8005082 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	69da      	ldr	r2, [r3, #28]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	4013      	ands	r3, r2
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	429a      	cmp	r2, r3
 800506e:	bf0c      	ite	eq
 8005070:	2301      	moveq	r3, #1
 8005072:	2300      	movne	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	461a      	mov	r2, r3
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	429a      	cmp	r2, r3
 800507c:	f43f af46 	beq.w	8004f0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3770      	adds	r7, #112	; 0x70
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800508a:	b480      	push	{r7}
 800508c:	b085      	sub	sp, #20
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800509c:	2302      	movs	r3, #2
 800509e:	e027      	b.n	80050f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2224      	movs	r2, #36	; 0x24
 80050ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0201 	bic.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005110:	2302      	movs	r3, #2
 8005112:	e02d      	b.n	8005170 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2224      	movs	r2, #36	; 0x24
 8005120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0201 	bic.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f84f 	bl	80051f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800518c:	2302      	movs	r3, #2
 800518e:	e02d      	b.n	80051ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2224      	movs	r2, #36	; 0x24
 800519c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0201 	bic.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f811 	bl	80051f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005200:	2b00      	cmp	r3, #0
 8005202:	d108      	bne.n	8005216 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005214:	e031      	b.n	800527a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005216:	2308      	movs	r3, #8
 8005218:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800521a:	2308      	movs	r3, #8
 800521c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	0e5b      	lsrs	r3, r3, #25
 8005226:	b2db      	uxtb	r3, r3
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	0f5b      	lsrs	r3, r3, #29
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800523e:	7bbb      	ldrb	r3, [r7, #14]
 8005240:	7b3a      	ldrb	r2, [r7, #12]
 8005242:	4911      	ldr	r1, [pc, #68]	; (8005288 <UARTEx_SetNbDataToProcess+0x94>)
 8005244:	5c8a      	ldrb	r2, [r1, r2]
 8005246:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800524a:	7b3a      	ldrb	r2, [r7, #12]
 800524c:	490f      	ldr	r1, [pc, #60]	; (800528c <UARTEx_SetNbDataToProcess+0x98>)
 800524e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005250:	fb93 f3f2 	sdiv	r3, r3, r2
 8005254:	b29a      	uxth	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	7b7a      	ldrb	r2, [r7, #13]
 8005260:	4909      	ldr	r1, [pc, #36]	; (8005288 <UARTEx_SetNbDataToProcess+0x94>)
 8005262:	5c8a      	ldrb	r2, [r1, r2]
 8005264:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005268:	7b7a      	ldrb	r2, [r7, #13]
 800526a:	4908      	ldr	r1, [pc, #32]	; (800528c <UARTEx_SetNbDataToProcess+0x98>)
 800526c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800526e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005272:	b29a      	uxth	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800527a:	bf00      	nop
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	08005330 	.word	0x08005330
 800528c:	08005338 	.word	0x08005338

08005290 <__libc_init_array>:
 8005290:	b570      	push	{r4, r5, r6, lr}
 8005292:	4d0d      	ldr	r5, [pc, #52]	; (80052c8 <__libc_init_array+0x38>)
 8005294:	4c0d      	ldr	r4, [pc, #52]	; (80052cc <__libc_init_array+0x3c>)
 8005296:	1b64      	subs	r4, r4, r5
 8005298:	10a4      	asrs	r4, r4, #2
 800529a:	2600      	movs	r6, #0
 800529c:	42a6      	cmp	r6, r4
 800529e:	d109      	bne.n	80052b4 <__libc_init_array+0x24>
 80052a0:	4d0b      	ldr	r5, [pc, #44]	; (80052d0 <__libc_init_array+0x40>)
 80052a2:	4c0c      	ldr	r4, [pc, #48]	; (80052d4 <__libc_init_array+0x44>)
 80052a4:	f000 f820 	bl	80052e8 <_init>
 80052a8:	1b64      	subs	r4, r4, r5
 80052aa:	10a4      	asrs	r4, r4, #2
 80052ac:	2600      	movs	r6, #0
 80052ae:	42a6      	cmp	r6, r4
 80052b0:	d105      	bne.n	80052be <__libc_init_array+0x2e>
 80052b2:	bd70      	pop	{r4, r5, r6, pc}
 80052b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b8:	4798      	blx	r3
 80052ba:	3601      	adds	r6, #1
 80052bc:	e7ee      	b.n	800529c <__libc_init_array+0xc>
 80052be:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c2:	4798      	blx	r3
 80052c4:	3601      	adds	r6, #1
 80052c6:	e7f2      	b.n	80052ae <__libc_init_array+0x1e>
 80052c8:	08005348 	.word	0x08005348
 80052cc:	08005348 	.word	0x08005348
 80052d0:	08005348 	.word	0x08005348
 80052d4:	0800534c 	.word	0x0800534c

080052d8 <memset>:
 80052d8:	4402      	add	r2, r0
 80052da:	4603      	mov	r3, r0
 80052dc:	4293      	cmp	r3, r2
 80052de:	d100      	bne.n	80052e2 <memset+0xa>
 80052e0:	4770      	bx	lr
 80052e2:	f803 1b01 	strb.w	r1, [r3], #1
 80052e6:	e7f9      	b.n	80052dc <memset+0x4>

080052e8 <_init>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	bf00      	nop
 80052ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ee:	bc08      	pop	{r3}
 80052f0:	469e      	mov	lr, r3
 80052f2:	4770      	bx	lr

080052f4 <_fini>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	bf00      	nop
 80052f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fa:	bc08      	pop	{r3}
 80052fc:	469e      	mov	lr, r3
 80052fe:	4770      	bx	lr
